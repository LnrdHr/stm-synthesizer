
stm-synthesizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001050  08004288  08004288  00005288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e0  080052e0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052e4  080052e4  000062e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080052e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  20000060  08005344  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  08005344  00007d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e9a  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e92  00000000  00000000  0001af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000097cc  00000000  00000000  0001ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00027588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001307  00000000  00000000  000280a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bc5  00000000  00000000  000293a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019751  00000000  00000000  00040f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096638  00000000  00000000  0005a6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0cf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026f8  00000000  00000000  000f0d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000f3430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004270 	.word	0x08004270

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08004270 	.word	0x08004270

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <ADSR_Init>:
	adsr.sustainLevel=sLevel;
	adsr.releaseTime=rTime;
	adsr.triggered = 0;
	adsr.released = 0;
	adsr.out = 0;
	return adsr;
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	7002      	strb	r2, [r0, #0]
 8000eaa:	ed80 0a01 	vstr	s0, [r0, #4]
 8000eae:	edc0 0a02 	vstr	s1, [r0, #8]
 8000eb2:	ed80 1a03 	vstr	s2, [r0, #12]
 8000eb6:	edc0 1a04 	vstr	s3, [r0, #16]
 8000eba:	6141      	str	r1, [r0, #20]
 8000ebc:	8302      	strh	r2, [r0, #24]
}
 8000ebe:	4770      	bx	lr

08000ec0 <ADSR_Update>:
 *
 *
 */

uint16_t ADSR_Update(ADSR adsr, unsigned int in)
{
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	b538      	push	{r3, r4, r5, lr}
 8000ec4:	ac04      	add	r4, sp, #16
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t out=0; //amplitudni izlaz
	float b1=0; //pocetna tocka level segmenta
	float b2=0; //krajnja tocka level segmenta

	switch (adsr.state)
 8000eca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000ece:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8000ed2:	eddd 7a05 	vldr	s15, [sp, #20]
 8000ed6:	ed9d 7a07 	vldr	s14, [sp, #28]
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d820      	bhi.n	8000f20 <ADSR_Update+0x60>
 8000ede:	e8df f003 	tbb	[pc, r3]
 8000ee2:	3d1d      	.short	0x3d1d
 8000ee4:	3421      	.short	0x3421
 8000ee6:	03          	.byte	0x03
 8000ee7:	00          	.byte	0x00

		break;

	case releaseState:

		if(adsr.triggered==1)
 8000ee8:	2a01      	cmp	r2, #1
 8000eea:	d046      	beq.n	8000f7a <ADSR_Update+0xba>
			b1=0;
			b2=1;
			out=0;
			break;
		}
		if(counter==Nsamples)
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <ADSR_Update+0x108>)
 8000eee:	4d37      	ldr	r5, [pc, #220]	@ (8000fcc <ADSR_Update+0x10c>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	682c      	ldr	r4, [r5, #0]
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	d064      	beq.n	8000fc2 <ADSR_Update+0x102>
		{
			adsr.state=offState;
			counter=0;
			break;
		}
		out =  (in * b1) - round(counter * in * (b1- b2) / Nsamples);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fad1 	bl	80004a0 <__aeabi_f2d>
 8000efe:	ec41 0b10 	vmov	d0, r0, r1
 8000f02:	f002 ffb5 	bl	8003e70 <round>
 8000f06:	ec51 0b10 	vmov	r0, r1, d0
 8000f0a:	f7ff fde3 	bl	8000ad4 <__aeabi_d2uiz>
		counter++;
 8000f0e:	3401      	adds	r4, #1
		out =  (in * b1) - round(counter * in * (b1- b2) / Nsamples);
 8000f10:	b280      	uxth	r0, r0
		counter++;
 8000f12:	602c      	str	r4, [r5, #0]

		break;
	}
	return out;
}
 8000f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr
		if(adsr.triggered==1)
 8000f1c:	2a01      	cmp	r2, #1
 8000f1e:	d02c      	beq.n	8000f7a <ADSR_Update+0xba>
	uint16_t out=0; //amplitudni izlaz
 8000f20:	2000      	movs	r0, #0
 8000f22:	e7f7      	b.n	8000f14 <ADSR_Update+0x54>
		if(counter==Nsamples)
 8000f24:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <ADSR_Update+0x108>)
 8000f26:	4a29      	ldr	r2, [pc, #164]	@ (8000fcc <ADSR_Update+0x10c>)
 8000f28:	8819      	ldrh	r1, [r3, #0]
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d032      	beq.n	8000f96 <ADSR_Update+0xd6>
		counter++;
 8000f30:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000fd0 <ADSR_Update+0x110>
 8000f34:	3301      	adds	r3, #1
		out =  (in * b1) -  (int)(counter * in * (b1- b2) / Nsamples);
 8000f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		counter++;
 8000f3a:	6013      	str	r3, [r2, #0]
		out =  (in * b1) -  (int)(counter * in * (b1- b2) / Nsamples);
 8000f3c:	ee17 3a90 	vmov	r3, s15
 8000f40:	b298      	uxth	r0, r3
}
 8000f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f46:	b004      	add	sp, #16
 8000f48:	4770      	bx	lr
		if(adsr.released==1)
 8000f4a:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d011      	beq.n	8000f76 <ADSR_Update+0xb6>
		counter++;
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <ADSR_Update+0x10c>)
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
		break;
 8000f5a:	e7e1      	b.n	8000f20 <ADSR_Update+0x60>
		if(counter==Nsamples)
 8000f5c:	491a      	ldr	r1, [pc, #104]	@ (8000fc8 <ADSR_Update+0x108>)
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <ADSR_Update+0x10c>)
 8000f60:	8808      	ldrh	r0, [r1, #0]
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	4298      	cmp	r0, r3
 8000f66:	d01e      	beq.n	8000fa6 <ADSR_Update+0xe6>
		counter++;
 8000f68:	3301      	adds	r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		out = (int)(counter * in * (b2-b1) / Nsamples);
 8000f70:	2000      	movs	r0, #0
}
 8000f72:	b004      	add	sp, #16
 8000f74:	4770      	bx	lr
			Nsamples = (SAMPLING_FREQ * adsr.releaseTime) ;
 8000f76:	eddd 7a08 	vldr	s15, [sp, #32]
			Nsamples = (SAMPLING_FREQ * adsr.attackTime)  ;
 8000f7a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000fd4 <ADSR_Update+0x114>
			counter=0;
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <ADSR_Update+0x10c>)
			Nsamples = (SAMPLING_FREQ * adsr.attackTime)  ;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <ADSR_Update+0x108>)
 8000f82:	ee67 7a87 	vmul.f32	s15, s15, s14
			counter=0;
 8000f86:	2100      	movs	r1, #0
			Nsamples = (SAMPLING_FREQ * adsr.attackTime)  ;
 8000f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			counter=0;
 8000f8c:	6011      	str	r1, [r2, #0]
			Nsamples = (SAMPLING_FREQ * adsr.attackTime)  ;
 8000f8e:	ee17 2a90 	vmov	r2, s15
 8000f92:	801a      	strh	r2, [r3, #0]
			b2=1;
 8000f94:	e7c4      	b.n	8000f20 <ADSR_Update+0x60>
		out =  (in * b1) -  (int)(counter * in * (b1- b2) / Nsamples);
 8000f96:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8000f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	e7c7      	b.n	8000f36 <ADSR_Update+0x76>
			Nsamples = (SAMPLING_FREQ * adsr.decayTime)  ;
 8000fa6:	eddd 7a06 	vldr	s15, [sp, #24]
 8000faa:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000fd4 <ADSR_Update+0x114>
 8000fae:	ee67 7a87 	vmul.f32	s15, s15, s14
			counter = 0;
 8000fb2:	2300      	movs	r3, #0
			Nsamples = (SAMPLING_FREQ * adsr.decayTime)  ;
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			counter = 0;
 8000fb8:	6013      	str	r3, [r2, #0]
			Nsamples = (SAMPLING_FREQ * adsr.decayTime)  ;
 8000fba:	ee17 3a90 	vmov	r3, s15
 8000fbe:	800b      	strh	r3, [r1, #0]
			break;
 8000fc0:	e7ae      	b.n	8000f20 <ADSR_Update+0x60>
			counter=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	602b      	str	r3, [r5, #0]
			break;
 8000fc6:	e7ab      	b.n	8000f20 <ADSR_Update+0x60>
 8000fc8:	2000007c 	.word	0x2000007c
 8000fcc:	20000080 	.word	0x20000080
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	472be000 	.word	0x472be000

08000fd8 <Voice_Init>:
#include "ADSR.h"
#include "Voice.h"
#include "math.h"

Voice Voice_Init(ADSR ovojnica, char nota, char notaVelo)
{
 8000fd8:	b084      	sub	sp, #16
 8000fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fdc:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
	Voice voice;
	voice.nota = nota;
	voice.notaVelo = notaVelo;
	voice.frekvencija_f = 440.0f * (pow(2,((voice.nota - 69) * 0.0833333f ))) / 2;
 8000fe0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001078 <Voice_Init+0xa0>
{
 8000fe4:	f89d 703c 	ldrb.w	r7, [sp, #60]	@ 0x3c
 8000fe8:	ac07      	add	r4, sp, #28
 8000fea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	voice.frekvencija_f = 440.0f * (pow(2,((voice.nota - 69) * 0.0833333f ))) / 2;
 8000fee:	f1a6 0345 	sub.w	r3, r6, #69	@ 0x45
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000ffa:	4605      	mov	r5, r0
	voice.frekvencija_f = 440.0f * (pow(2,((voice.nota - 69) * 0.0833333f ))) / 2;
 8000ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001000:	ee17 0a90 	vmov	r0, s15
 8001004:	f7ff fa4c 	bl	80004a0 <__aeabi_f2d>
 8001008:	a319      	add	r3, pc, #100	@ (adr r3, 8001070 <Voice_Init+0x98>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fa9f 	bl	8000550 <__aeabi_dmul>
 8001012:	ec41 0b10 	vmov	d0, r0, r1
 8001016:	f002 fed7 	bl	8003dc8 <exp>
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <Voice_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	ec51 0b10 	vmov	r0, r1, d0
 8001022:	f7ff fa95 	bl	8000550 <__aeabi_dmul>
 8001026:	f7ff fd75 	bl	8000b14 <__aeabi_d2f>
	voice.notaStanje = 1;
	voice.pomakUTablici_f = 2048.0f * voice.frekvencija_f / 44000.0f;
	voice.accFaze_f = 0;
	voice.adsr = ovojnica;
 800102a:	46a4      	mov	ip, r4
	voice.adsr.triggered = 1;
	voice.aktivan = 1;
	return voice;
 800102c:	2300      	movs	r3, #0
	voice.frekvencija_f = 440.0f * (pow(2,((voice.nota - 69) * 0.0833333f ))) / 2;
 800102e:	ee07 0a90 	vmov	s15, r0
	return voice;
 8001032:	60a8      	str	r0, [r5, #8]
 8001034:	612b      	str	r3, [r5, #16]
	voice.adsr = ovojnica;
 8001036:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800103a:	f105 0414 	add.w	r4, r5, #20
 800103e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001040:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	voice.pomakUTablici_f = 2048.0f * voice.frekvencija_f / 44000.0f;
 8001044:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001080 <Voice_Init+0xa8>
	return voice;
 8001048:	712e      	strb	r6, [r5, #4]
	voice.pomakUTablici_f = 2048.0f * voice.frekvencija_f / 44000.0f;
 800104a:	ee27 7a87 	vmul.f32	s14, s15, s14
	return voice;
 800104e:	2601      	movs	r6, #1
	voice.adsr = ovojnica;
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return voice;
 8001054:	716f      	strb	r7, [r5, #5]
 8001056:	f885 602c 	strb.w	r6, [r5, #44]	@ 0x2c
}
 800105a:	4628      	mov	r0, r5
	return voice;
 800105c:	ed85 7a03 	vstr	s14, [r5, #12]
 8001060:	602e      	str	r6, [r5, #0]
 8001062:	632e      	str	r6, [r5, #48]	@ 0x30
}
 8001064:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001068:	b004      	add	sp, #16
 800106a:	4770      	bx	lr
 800106c:	f3af 8000 	nop.w
 8001070:	fefa39ef 	.word	0xfefa39ef
 8001074:	3fe62e42 	.word	0x3fe62e42
 8001078:	3daaaaa6 	.word	0x3daaaaa6
 800107c:	406b8000 	.word	0x406b8000
 8001080:	3d3ea672 	.word	0x3d3ea672

08001084 <HAL_ADC_ConvCpltCallback>:
	/* USER CODE BEGIN 0 */
	//DMA za citanje analognih ulaza - potenciometri
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
		uint16_t ad_rez = 0;
		sumAdc = sumAdc + adc1_buf[0];
		numADCconvert++;
 8001084:	4811      	ldr	r0, [pc, #68]	@ (80010cc <HAL_ADC_ConvCpltCallback+0x48>)
		sumAdc = sumAdc + adc1_buf[0];
 8001086:	4912      	ldr	r1, [pc, #72]	@ (80010d0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_ADC_ConvCpltCallback+0x50>)
		numADCconvert++;
 800108a:	8802      	ldrh	r2, [r0, #0]
		sumAdc = sumAdc + adc1_buf[0];
 800108c:	881b      	ldrh	r3, [r3, #0]
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 800108e:	b410      	push	{r4}
		numADCconvert++;
 8001090:	3201      	adds	r2, #1
		sumAdc = sumAdc + adc1_buf[0];
 8001092:	680c      	ldr	r4, [r1, #0]
		numADCconvert++;
 8001094:	b292      	uxth	r2, r2
		sumAdc = sumAdc + adc1_buf[0];
 8001096:	4423      	add	r3, r4
		if (numADCconvert >= 250) {
 8001098:	2af9      	cmp	r2, #249	@ 0xf9
		sumAdc = sumAdc + adc1_buf[0];
 800109a:	600b      	str	r3, [r1, #0]
		if (numADCconvert >= 250) {
 800109c:	d803      	bhi.n	80010a6 <HAL_ADC_ConvCpltCallback+0x22>
			ad_rez = ad_rez >> 2;
			numADCconvert = 0;
			sumAdc = 0;
			ADCGain = ad_rez / 1024.0f;
		}
	}
 800109e:	f85d 4b04 	ldr.w	r4, [sp], #4
		numADCconvert++;
 80010a2:	8002      	strh	r2, [r0, #0]
	}
 80010a4:	4770      	bx	lr
			ad_rez = sumAdc / 250;
 80010a6:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <HAL_ADC_ConvCpltCallback+0x54>)
			ADCGain = ad_rez / 1024.0f;
 80010a8:	4c0c      	ldr	r4, [pc, #48]	@ (80010dc <HAL_ADC_ConvCpltCallback+0x58>)
			ad_rez = sumAdc / 250;
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
			ADCGain = ad_rez / 1024.0f;
 80010ae:	f3c3 138d 	ubfx	r3, r3, #6, #14
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eefa 7acb 	vcvt.f32.s32	s15, s15, #10
			numADCconvert = 0;
 80010ba:	2300      	movs	r3, #0
			ADCGain = ad_rez / 1024.0f;
 80010bc:	edc4 7a00 	vstr	s15, [r4]
			numADCconvert = 0;
 80010c0:	8003      	strh	r3, [r0, #0]
	}
 80010c2:	f85d 4b04 	ldr.w	r4, [sp], #4
			sumAdc = 0;
 80010c6:	600b      	str	r3, [r1, #0]
	}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200009cc 	.word	0x200009cc
 80010d0:	200009d4 	.word	0x200009d4
 80010d4:	200009dc 	.word	0x200009dc
 80010d8:	10624dd3 	.word	0x10624dd3
 80010dc:	200009c8 	.word	0x200009c8

080010e0 <HAL_UART_RxCpltCallback>:
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);

	}
	////////////////////////////////////////////////////
	// MIDI IN obrada
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}

		char notaStanje = rxBuff[0];  // ON ili OFF
 80010e2:	4b3f      	ldr	r3, [pc, #252]	@ (80011e0 <HAL_UART_RxCpltCallback+0x100>)
 80010e4:	781a      	ldrb	r2, [r3, #0]
		char nota = rxBuff[1];  // koja tipka u MIDI sustavu
 80010e6:	785c      	ldrb	r4, [r3, #1]

		char notaVelo = rxBuff[2];   // glasnoca
 80010e8:	789d      	ldrb	r5, [r3, #2]

		if (notaStanje == 0x90) // nota ON
 80010ea:	2a90      	cmp	r2, #144	@ 0x90
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1) {
 80010ec:	b09b      	sub	sp, #108	@ 0x6c
		if (notaStanje == 0x90) // nota ON
 80010ee:	d018      	beq.n	8001122 <HAL_UART_RxCpltCallback+0x42>
				}
			}

		}

		if (notaStanje == 0x80)  // nota OFF
 80010f0:	2a80      	cmp	r2, #128	@ 0x80
 80010f2:	d114      	bne.n	800111e <HAL_UART_RxCpltCallback+0x3e>
				{
			for (int i = 0; i < POLYNUM; ++i) {
				if (stanjeTipki[i] == nota) {
 80010f4:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <HAL_UART_RxCpltCallback+0x104>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	42a2      	cmp	r2, r4
 80010fa:	d053      	beq.n	80011a4 <HAL_UART_RxCpltCallback+0xc4>
 80010fc:	785a      	ldrb	r2, [r3, #1]
 80010fe:	42a2      	cmp	r2, r4
 8001100:	d05d      	beq.n	80011be <HAL_UART_RxCpltCallback+0xde>
 8001102:	789a      	ldrb	r2, [r3, #2]
 8001104:	42a2      	cmp	r2, r4
 8001106:	d05e      	beq.n	80011c6 <HAL_UART_RxCpltCallback+0xe6>
 8001108:	78da      	ldrb	r2, [r3, #3]
 800110a:	42a2      	cmp	r2, r4
 800110c:	d05f      	beq.n	80011ce <HAL_UART_RxCpltCallback+0xee>
 800110e:	791a      	ldrb	r2, [r3, #4]
 8001110:	42a2      	cmp	r2, r4
 8001112:	d060      	beq.n	80011d6 <HAL_UART_RxCpltCallback+0xf6>
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	42a3      	cmp	r3, r4
			for (int i = 0; i < POLYNUM; ++i) {
 8001118:	bf08      	it	eq
 800111a:	2005      	moveq	r0, #5
				if (stanjeTipki[i] == nota) {
 800111c:	d043      	beq.n	80011a6 <HAL_UART_RxCpltCallback+0xc6>
					brojAktiviranihTipki--;
					break;
				}
			}
		}
	}
 800111e:	b01b      	add	sp, #108	@ 0x6c
 8001120:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (stanjeTipki[i] == 0) //nailazak prvog praznog mjesta u polju
 8001122:	4b30      	ldr	r3, [pc, #192]	@ (80011e4 <HAL_UART_RxCpltCallback+0x104>)
 8001124:	781e      	ldrb	r6, [r3, #0]
 8001126:	b17e      	cbz	r6, 8001148 <HAL_UART_RxCpltCallback+0x68>
 8001128:	785a      	ldrb	r2, [r3, #1]
 800112a:	2a00      	cmp	r2, #0
 800112c:	d049      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0xe2>
 800112e:	789a      	ldrb	r2, [r3, #2]
 8001130:	2a00      	cmp	r2, #0
 8001132:	d04a      	beq.n	80011ca <HAL_UART_RxCpltCallback+0xea>
 8001134:	78da      	ldrb	r2, [r3, #3]
 8001136:	2a00      	cmp	r2, #0
 8001138:	d04b      	beq.n	80011d2 <HAL_UART_RxCpltCallback+0xf2>
 800113a:	791a      	ldrb	r2, [r3, #4]
 800113c:	2a00      	cmp	r2, #0
 800113e:	d04c      	beq.n	80011da <HAL_UART_RxCpltCallback+0xfa>
 8001140:	795a      	ldrb	r2, [r3, #5]
			for (int i = 0; i < POLYNUM; ++i) {
 8001142:	2605      	movs	r6, #5
				if (stanjeTipki[i] == 0) //nailazak prvog praznog mjesta u polju
 8001144:	2a00      	cmp	r2, #0
 8001146:	d1ea      	bne.n	800111e <HAL_UART_RxCpltCallback+0x3e>
					ADSR adsr = ADSR_Init(A_TIME_MS, D_TIME_MS,
 8001148:	eef3 1a04 	vmov.f32	s3, #52	@ 0x41a00000  20.0
 800114c:	af06      	add	r7, sp, #24
 800114e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001152:	eef0 0a61 	vmov.f32	s1, s3
 8001156:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800115a:	4638      	mov	r0, r7
					stanjeTipki[i] = nota;
 800115c:	559c      	strb	r4, [r3, r6]
					ADSR adsr = ADSR_Init(A_TIME_MS, D_TIME_MS,
 800115e:	f7ff fea1 	bl	8000ea4 <ADSR_Init>
					Voice v = Voice_Init(adsr, nota, notaVelo);
 8001162:	9404      	str	r4, [sp, #16]
 8001164:	9505      	str	r5, [sp, #20]
 8001166:	ab09      	add	r3, sp, #36	@ 0x24
 8001168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800116e:	a80d      	add	r0, sp, #52	@ 0x34
 8001170:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001174:	f7ff ff30 	bl	8000fd8 <Voice_Init>
					voices[i] = v;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <HAL_UART_RxCpltCallback+0x108>)
 800117a:	2234      	movs	r2, #52	@ 0x34
 800117c:	ac0d      	add	r4, sp, #52	@ 0x34
 800117e:	fb02 3c06 	mla	ip, r2, r6, r3
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800118e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001190:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
					brojAktiviranihTipki++;
 8001194:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <HAL_UART_RxCpltCallback+0x10c>)
					voices[i] = v;
 8001196:	6821      	ldr	r1, [r4, #0]
					brojAktiviranihTipki++;
 8001198:	7813      	ldrb	r3, [r2, #0]
					voices[i] = v;
 800119a:	f8cc 1000 	str.w	r1, [ip]
					brojAktiviranihTipki++;
 800119e:	3301      	adds	r3, #1
 80011a0:	7013      	strb	r3, [r2, #0]
		if (notaStanje == 0x80)  // nota OFF
 80011a2:	e7bc      	b.n	800111e <HAL_UART_RxCpltCallback+0x3e>
			for (int i = 0; i < POLYNUM; ++i) {
 80011a4:	2000      	movs	r0, #0
					brojAktiviranihTipki--;
 80011a6:	4911      	ldr	r1, [pc, #68]	@ (80011ec <HAL_UART_RxCpltCallback+0x10c>)
					voices[i].adsr.released = 1;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <HAL_UART_RxCpltCallback+0x108>)
					brojAktiviranihTipki--;
 80011aa:	780b      	ldrb	r3, [r1, #0]
					voices[i].adsr.released = 1;
 80011ac:	2434      	movs	r4, #52	@ 0x34
 80011ae:	fb04 2200 	mla	r2, r4, r0, r2
					brojAktiviranihTipki--;
 80011b2:	3b01      	subs	r3, #1
					voices[i].adsr.released = 1;
 80011b4:	2001      	movs	r0, #1
 80011b6:	f882 002d 	strb.w	r0, [r2, #45]	@ 0x2d
					brojAktiviranihTipki--;
 80011ba:	700b      	strb	r3, [r1, #0]
	}
 80011bc:	e7af      	b.n	800111e <HAL_UART_RxCpltCallback+0x3e>
			for (int i = 0; i < POLYNUM; ++i) {
 80011be:	2001      	movs	r0, #1
 80011c0:	e7f1      	b.n	80011a6 <HAL_UART_RxCpltCallback+0xc6>
			for (int i = 0; i < POLYNUM; ++i) {
 80011c2:	2601      	movs	r6, #1
 80011c4:	e7c0      	b.n	8001148 <HAL_UART_RxCpltCallback+0x68>
			for (int i = 0; i < POLYNUM; ++i) {
 80011c6:	2002      	movs	r0, #2
 80011c8:	e7ed      	b.n	80011a6 <HAL_UART_RxCpltCallback+0xc6>
			for (int i = 0; i < POLYNUM; ++i) {
 80011ca:	2602      	movs	r6, #2
 80011cc:	e7bc      	b.n	8001148 <HAL_UART_RxCpltCallback+0x68>
			for (int i = 0; i < POLYNUM; ++i) {
 80011ce:	2003      	movs	r0, #3
 80011d0:	e7e9      	b.n	80011a6 <HAL_UART_RxCpltCallback+0xc6>
			for (int i = 0; i < POLYNUM; ++i) {
 80011d2:	2603      	movs	r6, #3
 80011d4:	e7b8      	b.n	8001148 <HAL_UART_RxCpltCallback+0x68>
			for (int i = 0; i < POLYNUM; ++i) {
 80011d6:	2004      	movs	r0, #4
 80011d8:	e7e5      	b.n	80011a6 <HAL_UART_RxCpltCallback+0xc6>
			for (int i = 0; i < POLYNUM; ++i) {
 80011da:	2604      	movs	r6, #4
 80011dc:	e7b4      	b.n	8001148 <HAL_UART_RxCpltCallback+0x68>
 80011de:	bf00      	nop
 80011e0:	200009d8 	.word	0x200009d8
 80011e4:	20000088 	.word	0x20000088
 80011e8:	20000090 	.word	0x20000090
 80011ec:	20000084 	.word	0x20000084

080011f0 <ArangeSamplesInBuff>:
	////////////////////////////////////////////////////

	void ArangeSamplesInBuff(int dioBuffera) {
 80011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f4:	ed2d 8b02 	vpush	{d8}
		uint32_t accFaze_uw;
		uint32_t sumSample_uw = 0; //sadrzi ukupnu vrijednost svih sampla koja se dijeli s brojem aktiviranih tipki

		if (dioBuffera == QUARTER_BUFFER_SIZE)   // prvi  dio
 80011f8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
		{
			indeksRadnogPolja_uw = 0;
 80011fc:	f8df 9144 	ldr.w	r9, [pc, #324]	@ 8001344 <ArangeSamplesInBuff+0x154>
	void ArangeSamplesInBuff(int dioBuffera) {
 8001200:	b087      	sub	sp, #28
 8001202:	4682      	mov	sl, r0
		if (dioBuffera == QUARTER_BUFFER_SIZE)   // prvi  dio
 8001204:	f000 808f 	beq.w	8001326 <ArangeSamplesInBuff+0x136>
		}
		while (indeksRadnogPolja_uw < dioBuffera) //priprema radnog buffera HALF_BUF ili FULL_BUF
 8001208:	f8d9 2000 	ldr.w	r2, [r9]
 800120c:	4290      	cmp	r0, r2
 800120e:	d95b      	bls.n	80012c8 <ArangeSamplesInBuff+0xd8>
 8001210:	4d47      	ldr	r5, [pc, #284]	@ (8001330 <ArangeSamplesInBuff+0x140>)
		{  //Ogranicavanje rubnog uvjeta
			{
				for (volatile int i = 0; i < POLYNUM; ++i) {

						while (voices[i].accFaze_f + voices[i].pomakUTablici_f > TABLE_SIZE) {
 8001212:	ed9f 8a48 	vldr	s16, [pc, #288]	@ 8001334 <ArangeSamplesInBuff+0x144>
						if (voices[i].adsr.state == offState) {
								stanjeTipki[i] = 0;

							} else {
								accFaze_uw = round(voices[i].accFaze_f);
								uint16_t sample_ui = CURRENT_LUT[accFaze_uw];
 8001216:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8001348 <ArangeSamplesInBuff+0x158>
								stanjeTipki[i] = 0;
 800121a:	4f47      	ldr	r7, [pc, #284]	@ (8001338 <ArangeSamplesInBuff+0x148>)
		while (indeksRadnogPolja_uw < dioBuffera) //priprema radnog buffera HALF_BUF ili FULL_BUF
 800121c:	2600      	movs	r6, #0
				for (volatile int i = 0; i < POLYNUM; ++i) {
 800121e:	2300      	movs	r3, #0
 8001220:	9305      	str	r3, [sp, #20]
 8001222:	9b05      	ldr	r3, [sp, #20]
 8001224:	2b05      	cmp	r3, #5
 8001226:	dc40      	bgt.n	80012aa <ArangeSamplesInBuff+0xba>
						while (voices[i].accFaze_f + voices[i].pomakUTablici_f > TABLE_SIZE) {
 8001228:	2434      	movs	r4, #52	@ 0x34
 800122a:	9a05      	ldr	r2, [sp, #20]
 800122c:	9b05      	ldr	r3, [sp, #20]
 800122e:	fb04 5202 	mla	r2, r4, r2, r5
 8001232:	edd2 7a04 	vldr	s15, [r2, #16]
 8001236:	fb04 5303 	mla	r3, r4, r3, r5
 800123a:	e010      	b.n	800125e <ArangeSamplesInBuff+0x6e>
							voices[i].accFaze_f -= TABLE_SIZE;
 800123c:	9b05      	ldr	r3, [sp, #20]
						while (voices[i].accFaze_f + voices[i].pomakUTablici_f > TABLE_SIZE) {
 800123e:	9905      	ldr	r1, [sp, #20]
 8001240:	9a05      	ldr	r2, [sp, #20]
							voices[i].accFaze_f -= TABLE_SIZE;
 8001242:	fb04 5303 	mla	r3, r4, r3, r5
 8001246:	edd3 7a04 	vldr	s15, [r3, #16]
 800124a:	ee77 7ac8 	vsub.f32	s15, s15, s16
						while (voices[i].accFaze_f + voices[i].pomakUTablici_f > TABLE_SIZE) {
 800124e:	fb04 5101 	mla	r1, r4, r1, r5
							voices[i].accFaze_f -= TABLE_SIZE;
 8001252:	edc3 7a04 	vstr	s15, [r3, #16]
						while (voices[i].accFaze_f + voices[i].pomakUTablici_f > TABLE_SIZE) {
 8001256:	edd1 7a04 	vldr	s15, [r1, #16]
 800125a:	fb04 5302 	mla	r3, r4, r2, r5
 800125e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001262:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001266:	eef4 7ac8 	vcmpe.f32	s15, s16
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dce5      	bgt.n	800123c <ArangeSamplesInBuff+0x4c>
						voices[i].accFaze_f += voices[i].pomakUTablici_f;
 8001270:	9905      	ldr	r1, [sp, #20]
 8001272:	9b05      	ldr	r3, [sp, #20]
						if (voices[i].adsr.state == offState) {
 8001274:	9a05      	ldr	r2, [sp, #20]
						voices[i].accFaze_f += voices[i].pomakUTablici_f;
 8001276:	fb04 5303 	mla	r3, r4, r3, r5
 800127a:	fb04 5101 	mla	r1, r4, r1, r5
 800127e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001282:	ed91 7a03 	vldr	s14, [r1, #12]
						if (voices[i].adsr.state == offState) {
 8001286:	fb04 5202 	mla	r2, r4, r2, r5
						voices[i].accFaze_f += voices[i].pomakUTablici_f;
 800128a:	ee77 7a87 	vadd.f32	s15, s15, s14
						if (voices[i].adsr.state == offState) {
 800128e:	7d12      	ldrb	r2, [r2, #20]
						voices[i].accFaze_f += voices[i].pomakUTablici_f;
 8001290:	edc3 7a04 	vstr	s15, [r3, #16]
						if (voices[i].adsr.state == offState) {
 8001294:	b9ea      	cbnz	r2, 80012d2 <ArangeSamplesInBuff+0xe2>
								stanjeTipki[i] = 0;
 8001296:	9905      	ldr	r1, [sp, #20]
				for (volatile int i = 0; i < POLYNUM; ++i) {
 8001298:	9b05      	ldr	r3, [sp, #20]
								stanjeTipki[i] = 0;
 800129a:	547a      	strb	r2, [r7, r1]
				for (volatile int i = 0; i < POLYNUM; ++i) {
 800129c:	3301      	adds	r3, #1
 800129e:	9305      	str	r3, [sp, #20]
 80012a0:	9b05      	ldr	r3, [sp, #20]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	ddc1      	ble.n	800122a <ArangeSamplesInBuff+0x3a>

								sumSample_uw += processedSample_ui;
							}
				}

				WorkingBuffer[indeksRadnogPolja_uw] = sumSample_uw / POLYNUM;
 80012a6:	f8d9 2000 	ldr.w	r2, [r9]
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <ArangeSamplesInBuff+0x14c>)
 80012ac:	fba3 1306 	umull	r1, r3, r3, r6
 80012b0:	4923      	ldr	r1, [pc, #140]	@ (8001340 <ArangeSamplesInBuff+0x150>)
 80012b2:	089b      	lsrs	r3, r3, #2

				if (indeksRadnogPolja_uw < FULL_BUFFER_SIZE)
 80012b4:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
				WorkingBuffer[indeksRadnogPolja_uw] = sumSample_uw / POLYNUM;
 80012b8:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
				if (indeksRadnogPolja_uw < FULL_BUFFER_SIZE)
 80012bc:	d22c      	bcs.n	8001318 <ArangeSamplesInBuff+0x128>
					indeksRadnogPolja_uw++;
 80012be:	3201      	adds	r2, #1
		while (indeksRadnogPolja_uw < dioBuffera) //priprema radnog buffera HALF_BUF ili FULL_BUF
 80012c0:	4552      	cmp	r2, sl
					indeksRadnogPolja_uw++;
 80012c2:	f8c9 2000 	str.w	r2, [r9]
		while (indeksRadnogPolja_uw < dioBuffera) //priprema radnog buffera HALF_BUF ili FULL_BUF
 80012c6:	d3aa      	bcc.n	800121e <ArangeSamplesInBuff+0x2e>

			}

		}
	}
 80012c8:	b007      	add	sp, #28
 80012ca:	ecbd 8b02 	vpop	{d8}
 80012ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								accFaze_uw = round(voices[i].accFaze_f);
 80012d2:	9b05      	ldr	r3, [sp, #20]
 80012d4:	fb04 5303 	mla	r3, r4, r3, r5
 80012d8:	6918      	ldr	r0, [r3, #16]
 80012da:	f7ff f8e1 	bl	80004a0 <__aeabi_f2d>
 80012de:	ec41 0b10 	vmov	d0, r0, r1
 80012e2:	f002 fdc5 	bl	8003e70 <round>
								uint16_t processedSample_ui = ADSR_Update(voices[i].adsr,
 80012e6:	9b05      	ldr	r3, [sp, #20]
								accFaze_uw = round(voices[i].accFaze_f);
 80012e8:	ec51 0b10 	vmov	r0, r1, d0
								uint16_t processedSample_ui = ADSR_Update(voices[i].adsr,
 80012ec:	fb04 5b03 	mla	fp, r4, r3, r5
								accFaze_uw = round(voices[i].accFaze_f);
 80012f0:	f7ff fbf0 	bl	8000ad4 <__aeabi_d2uiz>
								uint16_t processedSample_ui = ADSR_Update(voices[i].adsr,
 80012f4:	f10b 0224 	add.w	r2, fp, #36	@ 0x24
								accFaze_uw = round(voices[i].accFaze_f);
 80012f8:	4684      	mov	ip, r0
								uint16_t processedSample_ui = ADSR_Update(voices[i].adsr,
 80012fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001300:	f838 c01c 	ldrh.w	ip, [r8, ip, lsl #1]
 8001304:	f8cd c00c 	str.w	ip, [sp, #12]
 8001308:	f10b 0314 	add.w	r3, fp, #20
 800130c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130e:	f7ff fdd7 	bl	8000ec0 <ADSR_Update>
				for (volatile int i = 0; i < POLYNUM; ++i) {
 8001312:	9b05      	ldr	r3, [sp, #20]
								sumSample_uw += processedSample_ui;
 8001314:	4406      	add	r6, r0
 8001316:	e7c1      	b.n	800129c <ArangeSamplesInBuff+0xac>
		while (indeksRadnogPolja_uw < dioBuffera) //priprema radnog buffera HALF_BUF ili FULL_BUF
 8001318:	4592      	cmp	sl, r2
 800131a:	d880      	bhi.n	800121e <ArangeSamplesInBuff+0x2e>
	}
 800131c:	b007      	add	sp, #28
 800131e:	ecbd 8b02 	vpop	{d8}
 8001322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			indeksRadnogPolja_uw = 0;
 8001326:	2200      	movs	r2, #0
 8001328:	f8c9 2000 	str.w	r2, [r9]
		while (indeksRadnogPolja_uw < dioBuffera) //priprema radnog buffera HALF_BUF ili FULL_BUF
 800132c:	e770      	b.n	8001210 <ArangeSamplesInBuff+0x20>
 800132e:	bf00      	nop
 8001330:	20000090 	.word	0x20000090
 8001334:	45000000 	.word	0x45000000
 8001338:	20000088 	.word	0x20000088
 800133c:	aaaaaaab 	.word	0xaaaaaaab
 8001340:	200001c8 	.word	0x200001c8
 8001344:	200009d0 	.word	0x200009d0
 8001348:	08004288 	.word	0x08004288

0800134c <HAL_I2S_TxHalfCpltCallback>:
	void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s2) {
 800134c:	b508      	push	{r3, lr}
		ArangeSamplesInBuff(QUARTER_BUFFER_SIZE);
 800134e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001352:	f7ff ff4d 	bl	80011f0 <ArangeSamplesInBuff>
		ADCGain = 0.2f;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 8001358:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800139c <HAL_I2S_TxHalfCpltCallback+0x50>
 800135c:	4910      	ldr	r1, [pc, #64]	@ (80013a0 <HAL_I2S_TxHalfCpltCallback+0x54>)
 800135e:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <HAL_I2S_TxHalfCpltCallback+0x58>)
 8001360:	ed83 7a00 	vstr	s14, [r3]
		for (int i = 0; i < QUARTER_BUFFER_SIZE; i++) {
 8001364:	f501 6c80 	add.w	ip, r1, #1024	@ 0x400
			temp_w = (WorkingBuffer[i]);
 8001368:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800136c:	ee07 3a90 	vmov	s15, r3
			dma_out[j] = (ADCGain * temp_w);
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	2200      	movs	r2, #0
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
		for (int i = 0; i < QUARTER_BUFFER_SIZE; i++) {
 800137a:	458c      	cmp	ip, r1
			dma_out[j] = (ADCGain * temp_w);
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	b21b      	sxth	r3, r3
 8001386:	f363 020f 	bfi	r2, r3, #0, #16
 800138a:	f363 421f 	bfi	r2, r3, #16, #16
 800138e:	f840 2f04 	str.w	r2, [r0, #4]!
		for (int i = 0; i < QUARTER_BUFFER_SIZE; i++) {
 8001392:	d1e9      	bne.n	8001368 <HAL_I2S_TxHalfCpltCallback+0x1c>
	}
 8001394:	bd08      	pop	{r3, pc}
 8001396:	bf00      	nop
 8001398:	200009c8 	.word	0x200009c8
 800139c:	3e4ccccd 	.word	0x3e4ccccd
 80013a0:	200001c6 	.word	0x200001c6
 80013a4:	200009dc 	.word	0x200009dc

080013a8 <HAL_I2S_TxCpltCallback>:
	void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s2) {
 80013a8:	b508      	push	{r3, lr}
		ArangeSamplesInBuff(HALF_BUFFER_SIZE);
 80013aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013ae:	f7ff ff1f 	bl	80011f0 <ArangeSamplesInBuff>
		ADCGain = 0.2f;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_I2S_TxCpltCallback+0x4c>)
 80013b4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80013f8 <HAL_I2S_TxCpltCallback+0x50>
 80013b8:	4910      	ldr	r1, [pc, #64]	@ (80013fc <HAL_I2S_TxCpltCallback+0x54>)
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <HAL_I2S_TxCpltCallback+0x58>)
 80013bc:	ed83 7a00 	vstr	s14, [r3]
		for (int i = QUARTER_BUFFER_SIZE; i < HALF_BUFFER_SIZE; i++) {
 80013c0:	f501 6c80 	add.w	ip, r1, #1024	@ 0x400
			temp_w = (WorkingBuffer[i]);
 80013c4:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80013c8:	ee07 3a90 	vmov	s15, r3
			dma_out[j] = (ADCGain * temp_w);
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	2200      	movs	r2, #0
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
		for (int i = QUARTER_BUFFER_SIZE; i < HALF_BUFFER_SIZE; i++) {
 80013d6:	458c      	cmp	ip, r1
			dma_out[j] = (ADCGain * temp_w);
 80013d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013dc:	ee17 3a90 	vmov	r3, s15
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	f363 020f 	bfi	r2, r3, #0, #16
 80013e6:	f363 421f 	bfi	r2, r3, #16, #16
 80013ea:	f840 2f04 	str.w	r2, [r0, #4]!
		for (int i = QUARTER_BUFFER_SIZE; i < HALF_BUFFER_SIZE; i++) {
 80013ee:	d1e9      	bne.n	80013c4 <HAL_I2S_TxCpltCallback+0x1c>
	}
 80013f0:	bd08      	pop	{r3, pc}
 80013f2:	bf00      	nop
 80013f4:	200009c8 	.word	0x200009c8
 80013f8:	3e4ccccd 	.word	0x3e4ccccd
 80013fc:	200005c6 	.word	0x200005c6
 8001400:	200011dc 	.word	0x200011dc

08001404 <SystemClock_Config>:

		/**
		 * @brief System Clock Configuration
		 * @retval None
		 */
		void SystemClock_Config(void) {
 8001404:	b510      	push	{r4, lr}
			RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001406:	2300      	movs	r3, #0
		void SystemClock_Config(void) {
 8001408:	b094      	sub	sp, #80	@ 0x50
			RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800140a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 800140e:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
			RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001412:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001416:	e9cd 3305 	strd	r3, r3, [sp, #20]

			/** Configure the main internal regulator output voltage
			 */
			__HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4920      	ldr	r1, [pc, #128]	@ (800149c <SystemClock_Config+0x98>)
 800141c:	9301      	str	r3, [sp, #4]
			RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800141e:	9307      	str	r3, [sp, #28]
			__HAL_RCC_PWR_CLK_ENABLE();
 8001420:	6c08      	ldr	r0, [r1, #64]	@ 0x40
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001422:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <SystemClock_Config+0x9c>)
			__HAL_RCC_PWR_CLK_ENABLE();
 8001424:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001428:	6408      	str	r0, [r1, #64]	@ 0x40
 800142a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800142c:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001430:	9101      	str	r1, [sp, #4]
 8001432:	9901      	ldr	r1, [sp, #4]
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	6813      	ldr	r3, [r2, #0]

			/** Initializes the RCC Oscillators according to the specified parameters
			 * in the RCC_OscInitTypeDef structure.
			 */
			RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001440:	2001      	movs	r0, #1
 8001442:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001446:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
			RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144a:	e9cd 0108 	strd	r0, r1, [sp, #32]
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144e:	9302      	str	r3, [sp, #8]
			RCC_OscInitStruct.HSEState = RCC_HSE_ON;
			RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
			RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001450:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
			RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2402      	movs	r4, #2
			RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145a:	9802      	ldr	r0, [sp, #8]
			RCC_OscInitStruct.PLL.PLLM = 12;
			RCC_OscInitStruct.PLL.PLLN = 96;
			RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145c:	2104      	movs	r1, #4
 800145e:	2002      	movs	r0, #2
 8001460:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
			RCC_OscInitStruct.PLL.PLLM = 12;
 8001464:	220c      	movs	r2, #12
			RCC_OscInitStruct.PLL.PLLN = 96;
 8001466:	2360      	movs	r3, #96	@ 0x60
			RCC_OscInitStruct.PLL.PLLQ = 4;
			if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001468:	a808      	add	r0, sp, #32
			RCC_OscInitStruct.PLL.PLLM = 12;
 800146a:	9210      	str	r2, [sp, #64]	@ 0x40
			RCC_OscInitStruct.PLL.PLLN = 96;
 800146c:	9311      	str	r3, [sp, #68]	@ 0x44
			if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800146e:	f001 fd0d 	bl	8002e8c <HAL_RCC_OscConfig>
 8001472:	b108      	cbz	r0, 8001478 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
		 */
		void Error_Handler(void) {
			/* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return Ovojnica */
			__disable_irq();
			while (1) {
 8001476:	e7fe      	b.n	8001476 <SystemClock_Config+0x72>
			RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001478:	210f      	movs	r1, #15
 800147a:	4603      	mov	r3, r0
			RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	e9cd 1403 	strd	r1, r4, [sp, #12]
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001480:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
			if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3)
 8001484:	a803      	add	r0, sp, #12
 8001486:	2103      	movs	r1, #3
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	e9cd 3205 	strd	r3, r2, [sp, #20]
			RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	9307      	str	r3, [sp, #28]
			if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3)
 800148e:	f001 ff13 	bl	80032b8 <HAL_RCC_ClockConfig>
 8001492:	b108      	cbz	r0, 8001498 <SystemClock_Config+0x94>
 8001494:	b672      	cpsid	i
			while (1) {
 8001496:	e7fe      	b.n	8001496 <SystemClock_Config+0x92>
		}
 8001498:	b014      	add	sp, #80	@ 0x50
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <main>:
	int main(void) {
 80014a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
			GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014a8:	2400      	movs	r4, #0
	int main(void) {
 80014aa:	b08d      	sub	sp, #52	@ 0x34
			HAL_Init();
 80014ac:	f000 fb54 	bl	8001b58 <HAL_Init>
			SystemClock_Config();
 80014b0:	f7ff ffa8 	bl	8001404 <SystemClock_Config>
			GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014b4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80014b8:	e9cd 4408 	strd	r4, r4, [sp, #32]
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4d88      	ldr	r5, [pc, #544]	@ (80016e0 <main+0x23c>)
 80014be:	9402      	str	r4, [sp, #8]
			GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014c0:	940a      	str	r4, [sp, #40]	@ 0x28
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014c4:	4887      	ldr	r0, [pc, #540]	@ (80016e4 <main+0x240>)
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	632b      	str	r3, [r5, #48]	@ 0x30
 80014cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	9b02      	ldr	r3, [sp, #8]
			__HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	9403      	str	r4, [sp, #12]
 80014d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014de:	632b      	str	r3, [r5, #48]	@ 0x30
 80014e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	9303      	str	r3, [sp, #12]
 80014e8:	9b03      	ldr	r3, [sp, #12]
			__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	9404      	str	r4, [sp, #16]
 80014ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	632b      	str	r3, [r5, #48]	@ 0x30
 80014f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	9304      	str	r3, [sp, #16]
 80014fc:	9b04      	ldr	r3, [sp, #16]
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	9405      	str	r4, [sp, #20]
 8001500:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	632b      	str	r3, [r5, #48]	@ 0x30
 8001508:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800150e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	9305      	str	r3, [sp, #20]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001514:	4622      	mov	r2, r4
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	9b05      	ldr	r3, [sp, #20]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001518:	f001 f8fe 	bl	8002718 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800151c:	4622      	mov	r2, r4
 800151e:	4872      	ldr	r0, [pc, #456]	@ (80016e8 <main+0x244>)
 8001520:	2104      	movs	r1, #4
 8001522:	f001 f8f9 	bl	8002718 <HAL_GPIO_WritePin>
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2601      	movs	r6, #1
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	486e      	ldr	r0, [pc, #440]	@ (80016e4 <main+0x240>)
 800152a:	a906      	add	r1, sp, #24
			GPIO_InitStruct.Pin = GPIO_PIN_13;
 800152c:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	e9cd 7606 	strd	r7, r6, [sp, #24]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	e9cd 4408 	strd	r4, r4, [sp, #32]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001538:	f04f 0a04 	mov.w	sl, #4
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f000 fff6 	bl	800252c <HAL_GPIO_Init>
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	4869      	ldr	r0, [pc, #420]	@ (80016e8 <main+0x244>)
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	9409      	str	r4, [sp, #36]	@ 0x24
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	a906      	add	r1, sp, #24
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	e9cd 6407 	strd	r6, r4, [sp, #28]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154a:	f8cd a018 	str.w	sl, [sp, #24]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	f04f 0b0c 	mov.w	fp, #12
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f000 ffeb 	bl	800252c <HAL_GPIO_Init>
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	f04f 0902 	mov.w	r9, #2
			GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	4863      	ldr	r0, [pc, #396]	@ (80016ec <main+0x248>)
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	9408      	str	r4, [sp, #32]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	a906      	add	r1, sp, #24
			GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001562:	f04f 0803 	mov.w	r8, #3
 8001566:	e9cd 8309 	strd	r8, r3, [sp, #36]	@ 0x24
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	e9cd b906 	strd	fp, r9, [sp, #24]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f000 ffdd 	bl	800252c <HAL_GPIO_Init>
			__HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	9400      	str	r4, [sp, #0]
 8001574:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001576:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800157a:	632b      	str	r3, [r5, #48]	@ 0x30
 800157c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800157e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	9b00      	ldr	r3, [sp, #0]
			__HAL_RCC_DMA2_CLK_ENABLE();
 8001586:	9401      	str	r4, [sp, #4]
 8001588:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800158a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800158e:	632b      	str	r3, [r5, #48]	@ 0x30
 8001590:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
			hi2s2.Instance = SPI2;
 8001592:	4d57      	ldr	r5, [pc, #348]	@ (80016f0 <main+0x24c>)
			__HAL_RCC_DMA2_CLK_ENABLE();
 8001594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
			HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001598:	4622      	mov	r2, r4
 800159a:	4621      	mov	r1, r4
			__HAL_RCC_DMA2_CLK_ENABLE();
 800159c:	9301      	str	r3, [sp, #4]
			HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800159e:	200f      	movs	r0, #15
			__HAL_RCC_DMA2_CLK_ENABLE();
 80015a0:	9b01      	ldr	r3, [sp, #4]
			HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80015a2:	f000 fd5b 	bl	800205c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 fd94 	bl	80020d4 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80015ac:	4622      	mov	r2, r4
 80015ae:	4621      	mov	r1, r4
 80015b0:	203a      	movs	r0, #58	@ 0x3a
 80015b2:	f000 fd53 	bl	800205c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015b6:	203a      	movs	r0, #58	@ 0x3a
 80015b8:	f000 fd8c 	bl	80020d4 <HAL_NVIC_EnableIRQ>
			hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80015bc:	4a4d      	ldr	r2, [pc, #308]	@ (80016f4 <main+0x250>)
			hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015be:	612c      	str	r4, [r5, #16]
			hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80015c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c4:	e9c5 2300 	strd	r2, r3, [r5]
			if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80015c8:	4628      	mov	r0, r5
			hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80015ca:	f64a 4344 	movw	r3, #44100	@ 0xac44
			hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80015ce:	e9c5 4602 	strd	r4, r6, [r5, #8]
			hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80015d2:	e9c5 4406 	strd	r4, r4, [r5, #24]
			hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015d6:	622c      	str	r4, [r5, #32]
			hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80015d8:	616b      	str	r3, [r5, #20]
			if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80015da:	f001 f969 	bl	80028b0 <HAL_I2S_Init>
 80015de:	b108      	cbz	r0, 80015e4 <main+0x140>
 80015e0:	b672      	cpsid	i
			while (1) {
 80015e2:	e7fe      	b.n	80015e2 <main+0x13e>
			hadc1.Instance = ADC1;
 80015e4:	4c44      	ldr	r4, [pc, #272]	@ (80016f8 <main+0x254>)
			hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80015e6:	f8df e13c 	ldr.w	lr, [pc, #316]	@ 8001724 <main+0x280>
			hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ea:	4a44      	ldr	r2, [pc, #272]	@ (80016fc <main+0x258>)
			hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ec:	60a0      	str	r0, [r4, #8]
			hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80015ee:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
			ADC_ChannelConfTypeDef sConfig = { 0 };
 80015f2:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80015f6:	e9cd 0008 	strd	r0, r0, [sp, #32]
			hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80015fa:	e9c4 e300 	strd	lr, r3, [r4]
			hadc1.Init.ScanConvMode = DISABLE;
 80015fe:	6120      	str	r0, [r4, #16]
			hadc1.Init.ContinuousConvMode = DISABLE;
 8001600:	7620      	strb	r0, [r4, #24]
			hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001602:	f884 0020 	strb.w	r0, [r4, #32]
			hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001606:	60e0      	str	r0, [r4, #12]
			hadc1.Init.DMAContinuousRequests = DISABLE;
 8001608:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
			hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160c:	2300      	movs	r3, #0
			if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800160e:	4620      	mov	r0, r4
			hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001610:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
			hadc1.Init.NbrOfConversion = 1;
 8001614:	61e6      	str	r6, [r4, #28]
			hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	6166      	str	r6, [r4, #20]
			if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001618:	f000 faca 	bl	8001bb0 <HAL_ADC_Init>
 800161c:	b108      	cbz	r0, 8001622 <main+0x17e>
 800161e:	b672      	cpsid	i
			while (1) {
 8001620:	e7fe      	b.n	8001620 <main+0x17c>
			sConfig.Channel = ADC_CHANNEL_9;
 8001622:	2301      	movs	r3, #1
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001624:	9008      	str	r0, [sp, #32]
			sConfig.Channel = ADC_CHANNEL_9;
 8001626:	2209      	movs	r2, #9
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001628:	a906      	add	r1, sp, #24
 800162a:	4620      	mov	r0, r4
			sConfig.Channel = ADC_CHANNEL_9;
 800162c:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001630:	f000 fc4c 	bl	8001ecc <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	b108      	cbz	r0, 800163c <main+0x198>
 8001638:	b672      	cpsid	i
			while (1) {
 800163a:	e7fe      	b.n	800163a <main+0x196>
			hi2c1.Instance = I2C1;
 800163c:	4830      	ldr	r0, [pc, #192]	@ (8001700 <main+0x25c>)
			hi2c1.Init.ClockSpeed = 100000;
 800163e:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8001728 <main+0x284>
			hi2c1.Init.OwnAddress1 = 0;
 8001642:	e9c0 3302 	strd	r3, r3, [r0, #8]
			hi2c1.Init.OwnAddress2 = 0;
 8001646:	e9c0 3305 	strd	r3, r3, [r0, #20]
			hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	e9c0 3307 	strd	r3, r3, [r0, #28]
			hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <main+0x260>)
 8001650:	e9c0 c300 	strd	ip, r3, [r0]
			hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001658:	6103      	str	r3, [r0, #16]
			if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800165a:	f001 f861 	bl	8002720 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	b980      	cbnz	r0, 8001684 <main+0x1e0>
			huart2.Instance = USART2;
 8001662:	4829      	ldr	r0, [pc, #164]	@ (8001708 <main+0x264>)
			huart2.Init.BaudRate = 2000000;
 8001664:	4929      	ldr	r1, [pc, #164]	@ (800170c <main+0x268>)
			huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	6103      	str	r3, [r0, #16]
			huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	e9c0 3302 	strd	r3, r3, [r0, #8]
			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	e9c0 3306 	strd	r3, r3, [r0, #24]
			huart2.Init.BaudRate = 2000000;
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <main+0x26c>)
			huart2.Init.Mode = UART_MODE_TX_RX;
 8001672:	f8c0 b014 	str.w	fp, [r0, #20]
			huart2.Init.BaudRate = 2000000;
 8001676:	e9c0 1300 	strd	r1, r3, [r0]
			if (HAL_UART_Init(&huart2) != HAL_OK) {
 800167a:	f001 ffb1 	bl	80035e0 <HAL_UART_Init>
 800167e:	b118      	cbz	r0, 8001688 <main+0x1e4>
 8001680:	b672      	cpsid	i
			while (1) {
 8001682:	e7fe      	b.n	8001682 <main+0x1de>
 8001684:	b672      	cpsid	i
 8001686:	e7fe      	b.n	8001686 <main+0x1e2>
			huart1.Instance = USART1;
 8001688:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 800172c <main+0x288>
			huart1.Init.BaudRate = 31250;
 800168c:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <main+0x270>)
			huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	f8cb 0010 	str.w	r0, [fp, #16]
			huart1.Init.StopBits = UART_STOPBITS_1;
 8001692:	e9cb 0002 	strd	r0, r0, [fp, #8]
			huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001696:	e9cb 0006 	strd	r0, r0, [fp, #24]
			huart1.Init.BaudRate = 31250;
 800169a:	f647 2312 	movw	r3, #31250	@ 0x7a12
			if (HAL_UART_Init(&huart1) != HAL_OK) {
 800169e:	4658      	mov	r0, fp
			huart1.Init.BaudRate = 31250;
 80016a0:	e9cb 2300 	strd	r2, r3, [fp]
			huart1.Init.Mode = UART_MODE_RX;
 80016a4:	f8cb a014 	str.w	sl, [fp, #20]
			if (HAL_UART_Init(&huart1) != HAL_OK) {
 80016a8:	f001 ff9a 	bl	80035e0 <HAL_UART_Init>
 80016ac:	b108      	cbz	r0, 80016b2 <main+0x20e>
 80016ae:	b672      	cpsid	i
			while (1) {
 80016b0:	e7fe      	b.n	80016b0 <main+0x20c>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) dma_out, FULL_BUFFER_SIZE);
 80016b2:	4919      	ldr	r1, [pc, #100]	@ (8001718 <main+0x274>)
 80016b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016b8:	4628      	mov	r0, r5
 80016ba:	f001 f9a5 	bl	8002a08 <HAL_I2S_Transmit_DMA>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_buf, ADC_BUFFER_SIZE);
 80016be:	4917      	ldr	r1, [pc, #92]	@ (800171c <main+0x278>)
 80016c0:	464a      	mov	r2, r9
 80016c2:	4620      	mov	r0, r4
 80016c4:	f000 fb20 	bl	8001d08 <HAL_ADC_Start_DMA>
			HAL_UART_Receive_DMA(&huart1, rxBuff, 3);
 80016c8:	4915      	ldr	r1, [pc, #84]	@ (8001720 <main+0x27c>)
 80016ca:	4642      	mov	r2, r8
 80016cc:	4658      	mov	r0, fp
 80016ce:	f002 fb3d 	bl	8003d4c <HAL_UART_Receive_DMA>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);  //LED za debug
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <main+0x240>)
 80016d4:	4632      	mov	r2, r6
 80016d6:	4639      	mov	r1, r7
 80016d8:	f001 f81e 	bl	8002718 <HAL_GPIO_WritePin>
			while (1) {
 80016dc:	e7fe      	b.n	80016dc <main+0x238>
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020000 	.word	0x40020000
 80016f0:	20001b30 	.word	0x20001b30
 80016f4:	40003800 	.word	0x40003800
 80016f8:	20001bd0 	.word	0x20001bd0
 80016fc:	0f000001 	.word	0x0f000001
 8001700:	20001b78 	.word	0x20001b78
 8001704:	000186a0 	.word	0x000186a0
 8001708:	20001a40 	.word	0x20001a40
 800170c:	40004400 	.word	0x40004400
 8001710:	001e8480 	.word	0x001e8480
 8001714:	40011000 	.word	0x40011000
 8001718:	200009e0 	.word	0x200009e0
 800171c:	200009dc 	.word	0x200009dc
 8001720:	200009d8 	.word	0x200009d8
 8001724:	40012000 	.word	0x40012000
 8001728:	40005400 	.word	0x40005400
 800172c:	20001a88 	.word	0x20001a88

08001730 <Error_Handler>:
 8001730:	b672      	cpsid	i
			while (1) {
 8001732:	e7fe      	b.n	8001732 <Error_Handler+0x2>

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_MspInit+0x34>)
 8001738:	2100      	movs	r1, #0
 800173a:	9100      	str	r1, [sp, #0]
 800173c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800173e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001742:	645a      	str	r2, [r3, #68]	@ 0x44
 8001744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001746:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	9101      	str	r1, [sp, #4]
 8001750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001752:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001756:	641a      	str	r2, [r3, #64]	@ 0x40
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	b002      	add	sp, #8
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800176c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_ADC_MspInit+0x84>)
 8001770:	6802      	ldr	r2, [r0, #0]
{
 8001772:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001776:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800177c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001780:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001784:	b00a      	add	sp, #40	@ 0x28
 8001786:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001788:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800178c:	9401      	str	r4, [sp, #4]
 800178e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	4818      	ldr	r0, [pc, #96]	@ (80017f4 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001796:	645a      	str	r2, [r3, #68]	@ 0x44
 8001798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800179a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	9402      	str	r4, [sp, #8]
 80017a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ae:	f002 0201 	and.w	r2, r2, #1
 80017b2:	9202      	str	r2, [sp, #8]
 80017b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	9403      	str	r4, [sp, #12]
 80017b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ba:	f042 0202 	orr.w	r2, r2, #2
 80017be:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017ca:	22c2      	movs	r2, #194	@ 0xc2
 80017cc:	2303      	movs	r3, #3
 80017ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f000 feaa 	bl	800252c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d8:	2203      	movs	r2, #3
 80017da:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f000 fea1 	bl	800252c <HAL_GPIO_Init>
}
 80017ea:	b00a      	add	sp, #40	@ 0x28
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400

080017fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_I2C_MspInit+0x64>)
 8001800:	6802      	ldr	r2, [r0, #0]
{
 8001802:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8001806:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800180c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001810:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8001812:	d001      	beq.n	8001818 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001814:	b009      	add	sp, #36	@ 0x24
 8001816:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4d12      	ldr	r5, [pc, #72]	@ (8001864 <HAL_I2C_MspInit+0x68>)
 800181a:	9400      	str	r4, [sp, #0]
 800181c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	4812      	ldr	r0, [pc, #72]	@ (8001868 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	632b      	str	r3, [r5, #48]	@ 0x30
 8001826:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800182e:	22c0      	movs	r2, #192	@ 0xc0
 8001830:	2312      	movs	r3, #18
 8001832:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2304      	movs	r3, #4
 800183e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f000 fe73 	bl	800252c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001846:	9401      	str	r4, [sp, #4]
 8001848:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800184a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800184e:	642b      	str	r3, [r5, #64]	@ 0x40
 8001850:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	9b01      	ldr	r3, [sp, #4]
}
 800185a:	b009      	add	sp, #36	@ 0x24
 800185c:	bd30      	pop	{r4, r5, pc}
 800185e:	bf00      	nop
 8001860:	40005400 	.word	0x40005400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800186c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hi2s->Instance==SPI2)
 800186e:	4a32      	ldr	r2, [pc, #200]	@ (8001938 <HAL_I2S_MspInit+0xcc>)
 8001870:	6801      	ldr	r1, [r0, #0]
{
 8001872:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	2300      	movs	r3, #0
  if(hi2s->Instance==SPI2)
 8001876:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800187c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI2)
 8001886:	d001      	beq.n	800188c <HAL_I2S_MspInit+0x20>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001888:	b00e      	add	sp, #56	@ 0x38
 800188a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800188c:	2201      	movs	r2, #1
 800188e:	2319      	movs	r3, #25
 8001890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001894:	4604      	mov	r4, r0
 8001896:	22d6      	movs	r2, #214	@ 0xd6
 8001898:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800189c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f001 fdc8 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d141      	bne.n	800192c <HAL_I2S_MspInit+0xc0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_I2S_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	4825      	ldr	r0, [pc, #148]	@ (8001940 <HAL_I2S_MspInit+0xd4>)
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80018ac:	4d25      	ldr	r5, [pc, #148]	@ (8001944 <HAL_I2S_MspInit+0xd8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ae:	2600      	movs	r6, #0
 80018b0:	9600      	str	r6, [sp, #0]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018bc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	9601      	str	r6, [sp, #4]
 80018c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018c8:	f042 0202 	orr.w	r2, r2, #2
 80018cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 80018d6:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 80018da:	2302      	movs	r3, #2
 80018dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018e0:	2200      	movs	r2, #0
 80018e2:	2300      	movs	r3, #0
 80018e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ea:	2305      	movs	r3, #5
 80018ec:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f000 fe1c 	bl	800252c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <HAL_I2S_MspInit+0xdc>)
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80018f6:	2340      	movs	r3, #64	@ 0x40
 80018f8:	e9c5 2600 	strd	r2, r6, [r5]
 80018fc:	60ab      	str	r3, [r5, #8]
 80018fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001906:	e9c5 6203 	strd	r6, r2, [r5, #12]
 800190a:	616b      	str	r3, [r5, #20]
 800190c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001910:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001914:	4628      	mov	r0, r5
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001916:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191a:	e9c5 6608 	strd	r6, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800191e:	f000 fc01 	bl	8002124 <HAL_DMA_Init>
 8001922:	b930      	cbnz	r0, 8001932 <HAL_I2S_MspInit+0xc6>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001924:	63a5      	str	r5, [r4, #56]	@ 0x38
 8001926:	63ac      	str	r4, [r5, #56]	@ 0x38
}
 8001928:	b00e      	add	sp, #56	@ 0x38
 800192a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800192c:	f7ff ff00 	bl	8001730 <Error_Handler>
 8001930:	e7ba      	b.n	80018a8 <HAL_I2S_MspInit+0x3c>
      Error_Handler();
 8001932:	f7ff fefd 	bl	8001730 <Error_Handler>
 8001936:	e7f5      	b.n	8001924 <HAL_I2S_MspInit+0xb8>
 8001938:	40003800 	.word	0x40003800
 800193c:	40023800 	.word	0x40023800
 8001940:	40020400 	.word	0x40020400
 8001944:	20001ad0 	.word	0x20001ad0
 8001948:	40026070 	.word	0x40026070

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800194e:	6803      	ldr	r3, [r0, #0]
 8001950:	4a3d      	ldr	r2, [pc, #244]	@ (8001a48 <HAL_UART_MspInit+0xfc>)
{
 8001952:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001956:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800195c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001960:	9408      	str	r4, [sp, #32]
  if(huart->Instance==USART1)
 8001962:	d004      	beq.n	800196e <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001964:	4a39      	ldr	r2, [pc, #228]	@ (8001a4c <HAL_UART_MspInit+0x100>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d047      	beq.n	80019fa <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196a:	b00a      	add	sp, #40	@ 0x28
 800196c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800196e:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <HAL_UART_MspInit+0x104>)
 8001970:	9400      	str	r4, [sp, #0]
 8001972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001974:	4e37      	ldr	r6, [pc, #220]	@ (8001a54 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001976:	f042 0210 	orr.w	r2, r2, #16
 800197a:	645a      	str	r2, [r3, #68]	@ 0x44
 800197c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800197e:	f002 0210 	and.w	r2, r2, #16
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	9401      	str	r4, [sp, #4]
 8001988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001998:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800199c:	2302      	movs	r3, #2
 800199e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	9307      	str	r3, [sp, #28]
 80019a6:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	482b      	ldr	r0, [pc, #172]	@ (8001a58 <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f000 fdbb 	bl	800252c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80019b6:	4a29      	ldr	r2, [pc, #164]	@ (8001a5c <HAL_UART_MspInit+0x110>)
 80019b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80019bc:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019c0:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ce:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019d2:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d6:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019da:	f000 fba3 	bl	8002124 <HAL_DMA_Init>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d12e      	bne.n	8001a40 <HAL_UART_MspInit+0xf4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019e6:	63ee      	str	r6, [r5, #60]	@ 0x3c
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019e8:	2025      	movs	r0, #37	@ 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019ea:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ec:	f000 fb36 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019f0:	2025      	movs	r0, #37	@ 0x25
 80019f2:	f000 fb6f 	bl	80020d4 <HAL_NVIC_EnableIRQ>
}
 80019f6:	b00a      	add	sp, #40	@ 0x28
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_UART_MspInit+0x104>)
 80019fc:	9402      	str	r4, [sp, #8]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	4815      	ldr	r0, [pc, #84]	@ (8001a58 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a0a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001a0e:	9202      	str	r2, [sp, #8]
 8001a10:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	9403      	str	r4, [sp, #12]
 8001a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2203      	movs	r2, #3
 8001a26:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a2a:	240c      	movs	r4, #12
 8001a2c:	2502      	movs	r5, #2
 8001a2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f000 fd78 	bl	800252c <HAL_GPIO_Init>
}
 8001a3c:	b00a      	add	sp, #40	@ 0x28
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001a40:	f7ff fe76 	bl	8001730 <Error_Handler>
 8001a44:	e7cd      	b.n	80019e2 <HAL_UART_MspInit+0x96>
 8001a46:	bf00      	nop
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	200019e0 	.word	0x200019e0
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40026440 	.word	0x40026440

08001a60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler>
 8001a62:	bf00      	nop

08001a64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <HardFault_Handler>
 8001a66:	bf00      	nop

08001a68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler>
 8001a6a:	bf00      	nop

08001a6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <BusFault_Handler>
 8001a6e:	bf00      	nop

08001a70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler>
 8001a72:	bf00      	nop

08001a74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a80:	f000 b884 	b.w	8001b8c <HAL_IncTick>

08001a84 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a84:	4801      	ldr	r0, [pc, #4]	@ (8001a8c <DMA1_Stream4_IRQHandler+0x8>)
 8001a86:	f000 bc7b 	b.w	8002380 <HAL_DMA_IRQHandler>
 8001a8a:	bf00      	nop
 8001a8c:	20001ad0 	.word	0x20001ad0

08001a90 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a90:	4801      	ldr	r0, [pc, #4]	@ (8001a98 <USART1_IRQHandler+0x8>)
 8001a92:	f001 bf61 	b.w	8003958 <HAL_UART_IRQHandler>
 8001a96:	bf00      	nop
 8001a98:	20001a88 	.word	0x20001a88

08001a9c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a9c:	4801      	ldr	r0, [pc, #4]	@ (8001aa4 <DMA2_Stream2_IRQHandler+0x8>)
 8001a9e:	f000 bc6f 	b.w	8002380 <HAL_DMA_IRQHandler>
 8001aa2:	bf00      	nop
 8001aa4:	200019e0 	.word	0x200019e0

08001aa8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4a03      	ldr	r2, [pc, #12]	@ (8001ab8 <SystemInit+0x10>)
 8001aaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001aae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac0:	f7ff fff2 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	@ (8001afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f002 f947 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aee:	f7ff fcd9 	bl	80014a4 <main>
  bx  lr    
 8001af2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b00:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 8001b04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b08:	20001d54 	.word	0x20001d54

08001b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC_IRQHandler>
	...

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_InitTick+0x3c>)
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_InitTick+0x40>)
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
{
 8001b1a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b20:	fbb0 f0f2 	udiv	r0, r0, r2
 8001b24:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b28:	f000 fae2 	bl	80020f0 <HAL_SYSTICK_Config>
 8001b2c:	b908      	cbnz	r0, 8001b32 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	2d0f      	cmp	r5, #15
 8001b30:	d901      	bls.n	8001b36 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
 8001b36:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 fa8c 	bl	800205c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_InitTick+0x44>)
 8001b46:	4620      	mov	r0, r4
 8001b48:	601d      	str	r5, [r3, #0]
}
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_Init>:
{
 8001b58:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_Init+0x30>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b72:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 fa5f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	f7ff ffc8 	bl	8001b10 <HAL_InitTick>
  HAL_MspInit();
 8001b80:	f7ff fdd8 	bl	8001734 <HAL_MspInit>
}
 8001b84:	2000      	movs	r0, #0
 8001b86:	bd08      	pop	{r3, pc}
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b8c:	4a03      	ldr	r2, [pc, #12]	@ (8001b9c <HAL_IncTick+0x10>)
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <HAL_IncTick+0x14>)
 8001b90:	6811      	ldr	r1, [r2, #0]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	440b      	add	r3, r1
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20001c18 	.word	0x20001c18
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ba4:	4b01      	ldr	r3, [pc, #4]	@ (8001bac <HAL_GetTick+0x8>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20001c18 	.word	0x20001c18

08001bb0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	f000 809e 	beq.w	8001cf2 <HAL_ADC_Init+0x142>
{
 8001bb6:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001bba:	4604      	mov	r4, r0
 8001bbc:	b13d      	cbz	r5, 8001bce <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bc0:	06db      	lsls	r3, r3, #27
 8001bc2:	d50c      	bpl.n	8001bde <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8001bca:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001bcc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001bce:	f7ff fdcd 	bl	800176c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd2:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001bd6:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bda:	06db      	lsls	r3, r3, #27
 8001bdc:	d4f2      	bmi.n	8001bc4 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001be0:	4a47      	ldr	r2, [pc, #284]	@ (8001d00 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be6:	f023 0302 	bic.w	r3, r3, #2
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bf0:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bf2:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bf4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001bf8:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bfa:	6851      	ldr	r1, [r2, #4]
 8001bfc:	6860      	ldr	r0, [r4, #4]
 8001bfe:	4301      	orrs	r1, r0
 8001c00:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c02:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c04:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c06:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c16:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c18:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c1a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c1e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c26:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c28:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4302      	orrs	r2, r0
 8001c34:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c36:	4a33      	ldr	r2, [pc, #204]	@ (8001d04 <HAL_ADC_Init+0x154>)
 8001c38:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c3a:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3c:	d051      	beq.n	8001ce2 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c42:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	4302      	orrs	r2, r0
 8001c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	f022 0202 	bic.w	r2, r2, #2
 8001c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	7e21      	ldrb	r1, [r4, #24]
 8001c66:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001c6a:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c6c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d040      	beq.n	8001cf6 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c74:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c7c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c84:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	3901      	subs	r1, #1
 8001c8a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001c8e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c92:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c94:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9c:	3901      	subs	r1, #1
 8001c9e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ca4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca6:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ca8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8001cb4:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8001cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc2:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc6:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001cca:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001ccc:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001cce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cd0:	f023 0303 	bic.w	r3, r3, #3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001ce0:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ce6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e7b3      	b.n	8001c5a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
}
 8001cf4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	e7c7      	b.n	8001c90 <HAL_ADC_Init+0xe0>
 8001d00:	40012300 	.word	0x40012300
 8001d04:	0f000001 	.word	0x0f000001

08001d08 <HAL_ADC_Start_DMA>:
{
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001d0c:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8001d10:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001d12:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001d14:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8001d16:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001d18:	d07b      	beq.n	8001e12 <HAL_ADC_Start_DMA+0x10a>
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d1a:	682e      	ldr	r6, [r5, #0]
 8001d1c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d24:	68b2      	ldr	r2, [r6, #8]
 8001d26:	07d2      	lsls	r2, r2, #31
 8001d28:	d414      	bmi.n	8001d54 <HAL_ADC_Start_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 8001d2a:	68b2      	ldr	r2, [r6, #8]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d32:	4a39      	ldr	r2, [pc, #228]	@ (8001e18 <HAL_ADC_Start_DMA+0x110>)
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	4a39      	ldr	r2, [pc, #228]	@ (8001e1c <HAL_ADC_Start_DMA+0x114>)
 8001d38:	fba2 2000 	umull	r2, r0, r2, r0
 8001d3c:	0c80      	lsrs	r0, r0, #18
 8001d3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001d42:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001d44:	9a01      	ldr	r2, [sp, #4]
 8001d46:	b12a      	cbz	r2, 8001d54 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8001d48:	9c01      	ldr	r4, [sp, #4]
 8001d4a:	3c01      	subs	r4, #1
 8001d4c:	9401      	str	r4, [sp, #4]
    while (counter != 0U)
 8001d4e:	9801      	ldr	r0, [sp, #4]
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d1f9      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x40>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d54:	68b2      	ldr	r2, [r6, #8]
 8001d56:	05d4      	lsls	r4, r2, #23
 8001d58:	d503      	bpl.n	8001d62 <HAL_ADC_Start_DMA+0x5a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d5a:	68b2      	ldr	r2, [r6, #8]
 8001d5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d60:	60b2      	str	r2, [r6, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d62:	68b2      	ldr	r2, [r6, #8]
 8001d64:	07d0      	lsls	r0, r2, #31
 8001d66:	d540      	bpl.n	8001dea <HAL_ADC_Start_DMA+0xe2>
    ADC_STATE_CLR_SET(hadc->State,
 8001d68:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8001d6a:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8001d6e:	f020 0001 	bic.w	r0, r0, #1
 8001d72:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001d76:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d78:	6872      	ldr	r2, [r6, #4]
 8001d7a:	0552      	lsls	r2, r2, #21
 8001d7c:	d505      	bpl.n	8001d8a <HAL_ADC_Start_DMA+0x82>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d7e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001d80:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001d84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d88:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d8c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d92:	bf1c      	itt	ne
 8001d94:	6c6a      	ldrne	r2, [r5, #68]	@ 0x44
 8001d96:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001d9a:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001da2:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001da4:	491e      	ldr	r1, [pc, #120]	@ (8001e20 <HAL_ADC_Start_DMA+0x118>)
 8001da6:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da8:	491e      	ldr	r1, [pc, #120]	@ (8001e24 <HAL_ADC_Start_DMA+0x11c>)
 8001daa:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dac:	491e      	ldr	r1, [pc, #120]	@ (8001e28 <HAL_ADC_Start_DMA+0x120>)
 8001dae:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001db0:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8001db4:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db6:	6871      	ldr	r1, [r6, #4]
 8001db8:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8001dbc:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dbe:	68b1      	ldr	r1, [r6, #8]
 8001dc0:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001dc4:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dc6:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8001dca:	f000 fa41 	bl	8002250 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dce:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_ADC_Start_DMA+0x124>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	06db      	lsls	r3, r3, #27
 8001dd4:	d114      	bne.n	8001e00 <HAL_ADC_Start_DMA+0xf8>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dd6:	682b      	ldr	r3, [r5, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001dde:	d10c      	bne.n	8001dfa <HAL_ADC_Start_DMA+0xf2>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e007      	b.n	8001dfa <HAL_ADC_Start_DMA+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8001dfa:	2000      	movs	r0, #0
}
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <HAL_ADC_Start_DMA+0x128>)
 8001e02:	682b      	ldr	r3, [r5, #0]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d1f8      	bne.n	8001dfa <HAL_ADC_Start_DMA+0xf2>
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001e0e:	d1f4      	bne.n	8001dfa <HAL_ADC_Start_DMA+0xf2>
 8001e10:	e7e6      	b.n	8001de0 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 8001e12:	2002      	movs	r0, #2
}
 8001e14:	b002      	add	sp, #8
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	431bde83 	.word	0x431bde83
 8001e20:	08001e61 	.word	0x08001e61
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001e49 	.word	0x08001e49
 8001e2c:	40012300 	.word	0x40012300
 8001e30:	40012000 	.word	0x40012000

08001e34 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e38:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e3a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001e3c:	f7ff fffa 	bl	8001e34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e40:	bd08      	pop	{r3, pc}
 8001e42:	bf00      	nop

08001e44 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e48:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001e4a:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e4c:	2340      	movs	r3, #64	@ 0x40
 8001e4e:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e50:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e58:	f7ff fff4 	bl	8001e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e5c:	bd08      	pop	{r3, pc}
 8001e5e:	bf00      	nop

08001e60 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e60:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e64:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001e68:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e6c:	d123      	bne.n	8001eb6 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e72:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e74:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e76:	688a      	ldr	r2, [r1, #8]
 8001e78:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001e7c:	d117      	bne.n	8001eae <ADC_DMAConvCplt+0x4e>
 8001e7e:	7e1a      	ldrb	r2, [r3, #24]
 8001e80:	b9aa      	cbnz	r2, 8001eae <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e82:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e84:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001e88:	d002      	beq.n	8001e90 <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e8a:	688a      	ldr	r2, [r1, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e8c:	0550      	lsls	r0, r2, #21
 8001e8e:	d40e      	bmi.n	8001eae <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e90:	684a      	ldr	r2, [r1, #4]
 8001e92:	f022 0220 	bic.w	r2, r2, #32
 8001e96:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea2:	04d1      	lsls	r1, r2, #19
 8001ea4:	d403      	bmi.n	8001eae <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8e8 	bl	8001084 <HAL_ADC_ConvCpltCallback>
}
 8001eb4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001eb6:	06d2      	lsls	r2, r2, #27
 8001eb8:	d404      	bmi.n	8001ec4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ffbd 	bl	8001e44 <HAL_ADC_ErrorCallback>
}
 8001eca:	bd10      	pop	{r4, pc}

08001ecc <HAL_ADC_ConfigChannel>:
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001ece:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8001ed6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001ede:	f000 809e 	beq.w	800201e <HAL_ADC_ConfigChannel+0x152>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eea:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eec:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eee:	2d09      	cmp	r5, #9
 8001ef0:	b2a8      	uxth	r0, r5
 8001ef2:	d828      	bhi.n	8001f46 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef4:	691e      	ldr	r6, [r3, #16]
 8001ef6:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001efa:	f04f 0c07 	mov.w	ip, #7
 8001efe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f02:	ea26 060c 	bic.w	r6, r6, ip
 8001f06:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f08:	691e      	ldr	r6, [r3, #16]
 8001f0a:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f0e:	4334      	orrs	r4, r6
 8001f10:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8001f12:	684c      	ldr	r4, [r1, #4]
 8001f14:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f16:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8001f1a:	d82a      	bhi.n	8001f72 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f1c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001f1e:	3905      	subs	r1, #5
 8001f20:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f24:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f26:	fa0c f101 	lsl.w	r1, ip, r1
 8001f2a:	ea24 0101 	bic.w	r1, r4, r1
 8001f2e:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f32:	4308      	orrs	r0, r1
 8001f34:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f36:	493b      	ldr	r1, [pc, #236]	@ (8002024 <HAL_ADC_ConfigChannel+0x158>)
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d02b      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8001f42:	b002      	add	sp, #8
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f46:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8001f4a:	68de      	ldr	r6, [r3, #12]
 8001f4c:	f1ac 0c1e 	sub.w	ip, ip, #30
 8001f50:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f54:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f58:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001f5c:	ea26 060c 	bic.w	r6, r6, ip
 8001f60:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f62:	68de      	ldr	r6, [r3, #12]
 8001f64:	4334      	orrs	r4, r6
 8001f66:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8001f68:	684c      	ldr	r4, [r1, #4]
 8001f6a:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f6c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8001f70:	d9d4      	bls.n	8001f1c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001f72:	2c0c      	cmp	r4, #12
 8001f74:	d81f      	bhi.n	8001fb6 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f76:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001f78:	3923      	subs	r1, #35	@ 0x23
 8001f7a:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f7c:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f7e:	fa06 f101 	lsl.w	r1, r6, r1
 8001f82:	ea24 0101 	bic.w	r1, r4, r1
 8001f86:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f8a:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f8c:	4925      	ldr	r1, [pc, #148]	@ (8002024 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f8e:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f90:	428b      	cmp	r3, r1
 8001f92:	d1d3      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x70>
 8001f94:	2d12      	cmp	r5, #18
 8001f96:	d01b      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <HAL_ADC_ConfigChannel+0x15c>)
 8001f9a:	429d      	cmp	r5, r3
 8001f9c:	d022      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x118>
 8001f9e:	2d11      	cmp	r5, #17
 8001fa0:	d1cc      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fa2:	4b22      	ldr	r3, [pc, #136]	@ (800202c <HAL_ADC_ConfigChannel+0x160>)
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8001faa:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001fb2:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb4:	e7c2      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001fb8:	3941      	subs	r1, #65	@ 0x41
 8001fba:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fbc:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fbe:	fa06 f101 	lsl.w	r1, r6, r1
 8001fc2:	ea24 0101 	bic.w	r1, r4, r1
 8001fc6:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8001fce:	e7b2      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	@ (800202c <HAL_ADC_ConfigChannel+0x160>)
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8001fd8:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001fe0:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe2:	e7ab      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe6:	4c12      	ldr	r4, [pc, #72]	@ (8002030 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fe8:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fea:	4812      	ldr	r0, [pc, #72]	@ (8002034 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fec:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8001ff0:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001ff8:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	fba0 0303 	umull	r0, r3, r0, r3
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d095      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8002010:	9b01      	ldr	r3, [sp, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8002016:	9b01      	ldr	r3, [sp, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f9      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x144>
 800201c:	e78e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800201e:	2002      	movs	r0, #2
}
 8002020:	b002      	add	sp, #8
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	40012000 	.word	0x40012000
 8002028:	10000012 	.word	0x10000012
 800202c:	40012300 	.word	0x40012300
 8002030:	20000000 	.word	0x20000000
 8002034:	431bde83 	.word	0x431bde83

08002038 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4907      	ldr	r1, [pc, #28]	@ (8002058 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800203a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002042:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800204e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002052:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_NVIC_SetPriority+0x70>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002064:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002066:	f1c3 0e07 	rsb	lr, r3, #7
 800206a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002072:	bf28      	it	cs
 8002074:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002078:	f1bc 0f06 	cmp.w	ip, #6
 800207c:	d91c      	bls.n	80020b8 <HAL_NVIC_SetPriority+0x5c>
 800207e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	fa03 f30c 	lsl.w	r3, r3, ip
 800208a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	fa03 f30e 	lsl.w	r3, r3, lr
 8002096:	ea21 0303 	bic.w	r3, r1, r3
 800209a:	fa03 f30c 	lsl.w	r3, r3, ip
 800209e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80020a2:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80020a6:	db0a      	blt.n	80020be <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80020ac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80020b0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	4694      	mov	ip, r2
 80020bc:	e7e7      	b.n	800208e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_NVIC_SetPriority+0x74>)
 80020c0:	f000 000f 	and.w	r0, r0, #15
 80020c4:	4402      	add	r2, r0
 80020c6:	7613      	strb	r3, [r2, #24]
 80020c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	e000ecfc 	.word	0xe000ecfc

080020d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020d4:	2800      	cmp	r0, #0
 80020d6:	db07      	blt.n	80020e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_NVIC_EnableIRQ+0x18>)
 80020da:	0941      	lsrs	r1, r0, #5
 80020dc:	2301      	movs	r3, #1
 80020de:	f000 001f 	and.w	r0, r0, #31
 80020e2:	4083      	lsls	r3, r0
 80020e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	3801      	subs	r0, #1
 80020f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80020f6:	d301      	bcc.n	80020fc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80020fa:	4770      	bx	lr
{
 80020fc:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	4c07      	ldr	r4, [pc, #28]	@ (8002120 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002104:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800210a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002110:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002112:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	619a      	str	r2, [r3, #24]
}
 8002116:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	6119      	str	r1, [r3, #16]
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff fd3c 	bl	8001ba4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800212c:	2c00      	cmp	r4, #0
 800212e:	d06f      	beq.n	8002210 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002130:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002132:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002134:	2102      	movs	r1, #2
 8002136:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800213a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	4605      	mov	r5, r0
 8002146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002148:	e005      	b.n	8002156 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214a:	f7ff fd2b 	bl	8001ba4 <HAL_GetTick>
 800214e:	1b43      	subs	r3, r0, r5
 8002150:	2b05      	cmp	r3, #5
 8002152:	d839      	bhi.n	80021c8 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	07d1      	lsls	r1, r2, #31
 800215a:	d4f6      	bmi.n	800214a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002160:	68e1      	ldr	r1, [r4, #12]
 8002162:	4302      	orrs	r2, r0
 8002164:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	432a      	orrs	r2, r5
 800216e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002170:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8002172:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002174:	4302      	orrs	r2, r0
 8002176:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002178:	4932      	ldr	r1, [pc, #200]	@ (8002244 <HAL_DMA_Init+0x120>)
 800217a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800217c:	6a25      	ldr	r5, [r4, #32]
 800217e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002180:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002182:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002184:	2904      	cmp	r1, #4
 8002186:	d026      	beq.n	80021d6 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002188:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800218a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800218c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002190:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002192:	b2d8      	uxtb	r0, r3
 8002194:	4a2c      	ldr	r2, [pc, #176]	@ (8002248 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8002196:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002198:	3810      	subs	r0, #16
 800219a:	fba2 5200 	umull	r5, r2, r2, r0
 800219e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a0:	492a      	ldr	r1, [pc, #168]	@ (800224c <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a6:	5c89      	ldrb	r1, [r1, r2]
 80021a8:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021aa:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80021ae:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b0:	bf88      	it	hi
 80021b2:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b4:	223f      	movs	r2, #63	@ 0x3f
 80021b6:	408a      	lsls	r2, r1
 80021b8:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ba:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80021be:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80021c2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ca:	2220      	movs	r2, #32
 80021cc:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 80021d2:	4618      	mov	r0, r3
}
 80021d4:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d6:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 80021da:	4329      	orrs	r1, r5
 80021dc:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 80021de:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80021e0:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80021e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e4:	f021 0107 	bic.w	r1, r1, #7
 80021e8:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80021ea:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021ee:	2d00      	cmp	r5, #0
 80021f0:	d0cf      	beq.n	8002192 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021f2:	b178      	cbz	r0, 8002214 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021f4:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80021f8:	d016      	beq.n	8002228 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021fa:	2a02      	cmp	r2, #2
 80021fc:	d903      	bls.n	8002206 <HAL_DMA_Init+0xe2>
 80021fe:	2a03      	cmp	r2, #3
 8002200:	d1c7      	bne.n	8002192 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002202:	01ea      	lsls	r2, r5, #7
 8002204:	d5c5      	bpl.n	8002192 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002206:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002208:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800220a:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800220c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8002210:	2001      	movs	r0, #1
}
 8002212:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002214:	2a01      	cmp	r2, #1
 8002216:	d003      	beq.n	8002220 <HAL_DMA_Init+0xfc>
 8002218:	f032 0202 	bics.w	r2, r2, #2
 800221c:	d1b9      	bne.n	8002192 <HAL_DMA_Init+0x6e>
 800221e:	e7f0      	b.n	8002202 <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002220:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8002224:	d1b5      	bne.n	8002192 <HAL_DMA_Init+0x6e>
 8002226:	e7ee      	b.n	8002206 <HAL_DMA_Init+0xe2>
    switch (tmp)
 8002228:	2a03      	cmp	r2, #3
 800222a:	d8b2      	bhi.n	8002192 <HAL_DMA_Init+0x6e>
 800222c:	a001      	add	r0, pc, #4	@ (adr r0, 8002234 <HAL_DMA_Init+0x110>)
 800222e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002207 	.word	0x08002207
 8002238:	08002203 	.word	0x08002203
 800223c:	08002207 	.word	0x08002207
 8002240:	08002221 	.word	0x08002221
 8002244:	f010803f 	.word	0xf010803f
 8002248:	aaaaaaab 	.word	0xaaaaaaab
 800224c:	080052a0 	.word	0x080052a0

08002250 <HAL_DMA_Start_IT>:
{
 8002250:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8002252:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002258:	2c01      	cmp	r4, #1
 800225a:	d00a      	beq.n	8002272 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 800225c:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 8002260:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002264:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8002266:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800226a:	d005      	beq.n	8002278 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800226c:	2300      	movs	r3, #0
 800226e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8002272:	2002      	movs	r0, #2
}
 8002274:	bc70      	pop	{r4, r5, r6}
 8002276:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002278:	2602      	movs	r6, #2
 800227a:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	2600      	movs	r6, #0
 8002282:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002284:	6826      	ldr	r6, [r4, #0]
 8002286:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 800228a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800228c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800228e:	6883      	ldr	r3, [r0, #8]
 8002290:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 8002292:	bf0e      	itee	eq
 8002294:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002296:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002298:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800229c:	bf08      	it	eq
 800229e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a0:	233f      	movs	r3, #63	@ 0x3f
 80022a2:	4093      	lsls	r3, r2
 80022a4:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022a6:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80022a8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022aa:	f043 0316 	orr.w	r3, r3, #22
 80022ae:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80022b0:	b11a      	cbz	r2, 80022ba <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80022c2:	6023      	str	r3, [r4, #0]
}
 80022c4:	bc70      	pop	{r4, r5, r6}
 80022c6:	4770      	bx	lr

080022c8 <HAL_DMA_Abort>:
{
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022cc:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80022ce:	f7ff fc69 	bl	8001ba4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d2:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d006      	beq.n	80022e8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80022de:	2300      	movs	r3, #0
 80022e0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
}
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f022 0216 	bic.w	r2, r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022fc:	4605      	mov	r5, r0
 80022fe:	b342      	cbz	r2, 8002352 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f022 0208 	bic.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	e005      	b.n	800231e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002312:	f7ff fc47 	bl	8001ba4 <HAL_GetTick>
 8002316:	1b43      	subs	r3, r0, r5
 8002318:	2b05      	cmp	r3, #5
 800231a:	d810      	bhi.n	800233e <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f013 0301 	ands.w	r3, r3, #1
 8002324:	d1f5      	bne.n	8002312 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002326:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002328:	223f      	movs	r2, #63	@ 0x3f
 800232a:	408a      	lsls	r2, r1
  return HAL_OK;
 800232c:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 800232e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002330:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002332:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002334:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002338:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800233c:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233e:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	2220      	movs	r2, #32
 8002342:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002344:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002346:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800234a:	2300      	movs	r3, #0
 800234c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002350:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002352:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002354:	2a00      	cmp	r2, #0
 8002356:	d1d3      	bne.n	8002300 <HAL_DMA_Abort+0x38>
 8002358:	e7d6      	b.n	8002308 <HAL_DMA_Abort+0x40>
 800235a:	bf00      	nop

0800235c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002360:	2b02      	cmp	r3, #2
 8002362:	d003      	beq.n	800236c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
 800236a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800236c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	2305      	movs	r3, #5
 8002370:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 800237a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800237c:	6013      	str	r3, [r2, #0]
}
 800237e:	4770      	bx	lr

08002380 <HAL_DMA_IRQHandler>:
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8002384:	4a67      	ldr	r2, [pc, #412]	@ (8002524 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002388:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800238e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8002390:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002392:	2208      	movs	r2, #8
 8002394:	409a      	lsls	r2, r3
 8002396:	422a      	tst	r2, r5
{
 8002398:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800239a:	d003      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800239c:	6801      	ldr	r1, [r0, #0]
 800239e:	6808      	ldr	r0, [r1, #0]
 80023a0:	0740      	lsls	r0, r0, #29
 80023a2:	d478      	bmi.n	8002496 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	422a      	tst	r2, r5
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023ac:	6821      	ldr	r1, [r4, #0]
 80023ae:	6949      	ldr	r1, [r1, #20]
 80023b0:	0608      	lsls	r0, r1, #24
 80023b2:	d46a      	bmi.n	800248a <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b4:	2204      	movs	r2, #4
 80023b6:	409a      	lsls	r2, r3
 80023b8:	422a      	tst	r2, r5
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023bc:	6821      	ldr	r1, [r4, #0]
 80023be:	6809      	ldr	r1, [r1, #0]
 80023c0:	0789      	lsls	r1, r1, #30
 80023c2:	d45c      	bmi.n	800247e <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023c4:	2210      	movs	r2, #16
 80023c6:	409a      	lsls	r2, r3
 80023c8:	422a      	tst	r2, r5
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023cc:	6821      	ldr	r1, [r4, #0]
 80023ce:	6808      	ldr	r0, [r1, #0]
 80023d0:	0700      	lsls	r0, r0, #28
 80023d2:	d441      	bmi.n	8002458 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	2220      	movs	r2, #32
 80023d6:	409a      	lsls	r2, r3
 80023d8:	422a      	tst	r2, r5
 80023da:	d014      	beq.n	8002406 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023dc:	6821      	ldr	r1, [r4, #0]
 80023de:	6808      	ldr	r0, [r1, #0]
 80023e0:	06c0      	lsls	r0, r0, #27
 80023e2:	d510      	bpl.n	8002406 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023e4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023e6:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 80023ea:	2a05      	cmp	r2, #5
 80023ec:	d063      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ee:	680b      	ldr	r3, [r1, #0]
 80023f0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f6:	d07e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f8:	0319      	lsls	r1, r3, #12
 80023fa:	f140 8089 	bpl.w	8002510 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80023fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002400:	b10b      	cbz	r3, 8002406 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8002402:	4620      	mov	r0, r4
 8002404:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002406:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002408:	b323      	cbz	r3, 8002454 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800240c:	07da      	lsls	r2, r3, #31
 800240e:	d51a      	bpl.n	8002446 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8002410:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002412:	4945      	ldr	r1, [pc, #276]	@ (8002528 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002414:	2305      	movs	r3, #5
 8002416:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800241a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800241c:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8002420:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002424:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e002      	b.n	8002430 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	07db      	lsls	r3, r3, #31
 800242e:	d504      	bpl.n	800243a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8002430:	9b01      	ldr	r3, [sp, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	42b3      	cmp	r3, r6
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	d9f7      	bls.n	800242a <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 800243a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800243c:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800243e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002442:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002446:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002448:	b123      	cbz	r3, 8002454 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800244a:	4620      	mov	r0, r4
}
 800244c:	b003      	add	sp, #12
 800244e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002452:	4718      	bx	r3
}
 8002454:	b003      	add	sp, #12
 8002456:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002458:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245a:	680a      	ldr	r2, [r1, #0]
 800245c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002460:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002462:	d122      	bne.n	80024aa <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002464:	05d2      	lsls	r2, r2, #23
 8002466:	d403      	bmi.n	8002470 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002468:	680a      	ldr	r2, [r1, #0]
 800246a:	f022 0208 	bic.w	r2, r2, #8
 800246e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002470:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002472:	2a00      	cmp	r2, #0
 8002474:	d0ae      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002476:	4620      	mov	r0, r4
 8002478:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800247c:	e7aa      	b.n	80023d4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800247e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002482:	f042 0204 	orr.w	r2, r2, #4
 8002486:	6562      	str	r2, [r4, #84]	@ 0x54
 8002488:	e79c      	b.n	80023c4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800248a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800248c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800248e:	f042 0202 	orr.w	r2, r2, #2
 8002492:	6562      	str	r2, [r4, #84]	@ 0x54
 8002494:	e78e      	b.n	80023b4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002496:	6808      	ldr	r0, [r1, #0]
 8002498:	f020 0004 	bic.w	r0, r0, #4
 800249c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800249e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	6562      	str	r2, [r4, #84]	@ 0x54
 80024a8:	e77c      	b.n	80023a4 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024aa:	0311      	lsls	r1, r2, #12
 80024ac:	d5e0      	bpl.n	8002470 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ae:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d1e0      	bne.n	8002476 <HAL_DMA_IRQHandler+0xf6>
 80024b4:	e78e      	b.n	80023d4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b6:	680a      	ldr	r2, [r1, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024be:	694a      	ldr	r2, [r1, #20]
 80024c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80024c8:	b33a      	cbz	r2, 800251a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ca:	680a      	ldr	r2, [r1, #0]
 80024cc:	f022 0208 	bic.w	r2, r2, #8
 80024d0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d2:	223f      	movs	r2, #63	@ 0x3f
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80024d8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024da:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80024dc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80024de:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80024e0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80024e4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d0b3      	beq.n	8002454 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80024ec:	4620      	mov	r0, r4
}
 80024ee:	b003      	add	sp, #12
 80024f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80024f4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 80024fa:	d180      	bne.n	80023fe <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024fc:	680a      	ldr	r2, [r1, #0]
 80024fe:	f022 0210 	bic.w	r2, r2, #16
 8002502:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002504:	2201      	movs	r2, #1
 8002506:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800250a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800250e:	e776      	b.n	80023fe <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8002510:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002512:	2b00      	cmp	r3, #0
 8002514:	f47f af75 	bne.w	8002402 <HAL_DMA_IRQHandler+0x82>
 8002518:	e775      	b.n	8002406 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800251c:	2a00      	cmp	r2, #0
 800251e:	d1d4      	bne.n	80024ca <HAL_DMA_IRQHandler+0x14a>
 8002520:	e7d7      	b.n	80024d2 <HAL_DMA_IRQHandler+0x152>
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000
 8002528:	1b4e81b5 	.word	0x1b4e81b5

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002530:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002534:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 800270c <HAL_GPIO_Init+0x1e0>
{
 8002538:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800253a:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800253e:	4689      	mov	r9, r1
 8002540:	e003      	b.n	800254a <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	3301      	adds	r3, #1
 8002544:	2b10      	cmp	r3, #16
 8002546:	f000 8082 	beq.w	800264e <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 800254a:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8002552:	43a2      	bics	r2, r4
 8002554:	d1f5      	bne.n	8002542 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800255a:	f001 0203 	and.w	r2, r1, #3
 800255e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002562:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002564:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002566:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800256c:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002570:	d970      	bls.n	8002654 <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	2a03      	cmp	r2, #3
 8002574:	f040 80a7 	bne.w	80026c6 <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8002578:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002582:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002586:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	d0db      	beq.n	8002542 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2200      	movs	r2, #0
 800258c:	9203      	str	r2, [sp, #12]
 800258e:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8002592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002596:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 800259a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800259e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80025a2:	9203      	str	r2, [sp, #12]
 80025a4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ae:	f003 0703 	and.w	r7, r3, #3
 80025b2:	260f      	movs	r6, #15
 80025b4:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80025b8:	00bf      	lsls	r7, r7, #2
 80025ba:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	4e50      	ldr	r6, [pc, #320]	@ (8002700 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80025c0:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c8:	d018      	beq.n	80025fc <HAL_GPIO_Init+0xd0>
 80025ca:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80025ce:	42b0      	cmp	r0, r6
 80025d0:	f000 8084 	beq.w	80026dc <HAL_GPIO_Init+0x1b0>
 80025d4:	4e4b      	ldr	r6, [pc, #300]	@ (8002704 <HAL_GPIO_Init+0x1d8>)
 80025d6:	42b0      	cmp	r0, r6
 80025d8:	f000 8086 	beq.w	80026e8 <HAL_GPIO_Init+0x1bc>
 80025dc:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8002710 <HAL_GPIO_Init+0x1e4>
 80025e0:	4560      	cmp	r0, ip
 80025e2:	f000 8087 	beq.w	80026f4 <HAL_GPIO_Init+0x1c8>
 80025e6:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8002714 <HAL_GPIO_Init+0x1e8>
 80025ea:	4560      	cmp	r0, ip
 80025ec:	bf0c      	ite	eq
 80025ee:	f04f 0c04 	moveq.w	ip, #4
 80025f2:	f04f 0c07 	movne.w	ip, #7
 80025f6:	fa0c f707 	lsl.w	r7, ip, r7
 80025fa:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4a42      	ldr	r2, [pc, #264]	@ (8002708 <HAL_GPIO_Init+0x1dc>)
 8002600:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8002604:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002608:	4e3f      	ldr	r6, [pc, #252]	@ (8002708 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 800260a:	bf54      	ite	pl
 800260c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800260e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8002612:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8002614:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002616:	4e3c      	ldr	r6, [pc, #240]	@ (8002708 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002618:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800261a:	bf54      	ite	pl
 800261c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800261e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8002622:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8002624:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002626:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002628:	4e37      	ldr	r6, [pc, #220]	@ (8002708 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 800262a:	bf54      	ite	pl
 800262c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800262e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8002632:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002636:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002638:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800263c:	4932      	ldr	r1, [pc, #200]	@ (8002708 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 800263e:	bf54      	ite	pl
 8002640:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002642:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002648:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	f47f af7e 	bne.w	800254a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800264e:	b005      	add	sp, #20
 8002650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002654:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002656:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800265e:	fa07 f70c 	lsl.w	r7, r7, ip
 8002662:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002666:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002668:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266a:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8002672:	409f      	lsls	r7, r3
 8002674:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002678:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800267a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002680:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002684:	fa07 f70c 	lsl.w	r7, r7, ip
 8002688:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800268e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002690:	f47f af72 	bne.w	8002578 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8002694:	08df      	lsrs	r7, r3, #3
 8002696:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800269a:	9701      	str	r7, [sp, #4]
 800269c:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800269e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80026a2:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a4:	f003 0e07 	and.w	lr, r3, #7
 80026a8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80026ac:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ae:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b2:	fa06 fe0e 	lsl.w	lr, r6, lr
 80026b6:	9e00      	ldr	r6, [sp, #0]
 80026b8:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80026bc:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026be:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	6237      	str	r7, [r6, #32]
 80026c4:	e758      	b.n	8002578 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80026c6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c8:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026cc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80026d0:	fa07 f70c 	lsl.w	r7, r7, ip
 80026d4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80026d8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	e74d      	b.n	8002578 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026dc:	f04f 0c01 	mov.w	ip, #1
 80026e0:	fa0c f707 	lsl.w	r7, ip, r7
 80026e4:	433d      	orrs	r5, r7
 80026e6:	e789      	b.n	80025fc <HAL_GPIO_Init+0xd0>
 80026e8:	f04f 0c02 	mov.w	ip, #2
 80026ec:	fa0c f707 	lsl.w	r7, ip, r7
 80026f0:	433d      	orrs	r5, r7
 80026f2:	e783      	b.n	80025fc <HAL_GPIO_Init+0xd0>
 80026f4:	f04f 0c03 	mov.w	ip, #3
 80026f8:	fa0c f707 	lsl.w	r7, ip, r7
 80026fc:	433d      	orrs	r5, r7
 80026fe:	e77d      	b.n	80025fc <HAL_GPIO_Init+0xd0>
 8002700:	40020000 	.word	0x40020000
 8002704:	40020800 	.word	0x40020800
 8002708:	40013c00 	.word	0x40013c00
 800270c:	40023800 	.word	0x40023800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002718:	b902      	cbnz	r2, 800271c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271a:	0409      	lsls	r1, r1, #16
 800271c:	6181      	str	r1, [r0, #24]
  }
}
 800271e:	4770      	bx	lr

08002720 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002720:	2800      	cmp	r0, #0
 8002722:	f000 80b8 	beq.w	8002896 <HAL_I2C_Init+0x176>
{
 8002726:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002728:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800272c:	4604      	mov	r4, r0
 800272e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8098 	beq.w	8002868 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002738:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800274e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002758:	f000 fe4c 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800275c:	6865      	ldr	r5, [r4, #4]
 800275e:	4b4f      	ldr	r3, [pc, #316]	@ (800289c <HAL_I2C_Init+0x17c>)
 8002760:	429d      	cmp	r5, r3
 8002762:	d84f      	bhi.n	8002804 <HAL_I2C_Init+0xe4>
 8002764:	4b4e      	ldr	r3, [pc, #312]	@ (80028a0 <HAL_I2C_Init+0x180>)
 8002766:	4298      	cmp	r0, r3
 8002768:	d97c      	bls.n	8002864 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800276a:	4b4e      	ldr	r3, [pc, #312]	@ (80028a4 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800276c:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800276e:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002772:	1e43      	subs	r3, r0, #1
 8002774:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002778:	6822      	ldr	r2, [r4, #0]
 800277a:	6851      	ldr	r1, [r2, #4]
 800277c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002780:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002784:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002786:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002788:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278c:	f10c 0c01 	add.w	ip, ip, #1
 8002790:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002794:	ea41 010c 	orr.w	r1, r1, ip
 8002798:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279a:	69d1      	ldr	r1, [r2, #28]
 800279c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80027a0:	3301      	adds	r3, #1
 80027a2:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80027a6:	4203      	tst	r3, r0
 80027a8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80027ac:	d161      	bne.n	8002872 <HAL_I2C_Init+0x152>
 80027ae:	2304      	movs	r3, #4
 80027b0:	430b      	orrs	r3, r1
 80027b2:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80027b8:	6811      	ldr	r1, [r2, #0]
 80027ba:	4303      	orrs	r3, r0
 80027bc:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c4:	6891      	ldr	r1, [r2, #8]
 80027c6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80027ca:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80027ce:	4303      	orrs	r3, r0
 80027d0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80027dc:	68d1      	ldr	r1, [r2, #12]
 80027de:	4303      	orrs	r3, r0
 80027e0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80027e4:	430b      	orrs	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e8:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ea:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80027f2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fa:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

  return HAL_OK;
 8002800:	4618      	mov	r0, r3
}
 8002802:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <HAL_I2C_Init+0x188>)
 8002806:	4298      	cmp	r0, r3
 8002808:	d92c      	bls.n	8002864 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800280c:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280e:	4e27      	ldr	r6, [pc, #156]	@ (80028ac <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002810:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	6850      	ldr	r0, [r2, #4]
 8002818:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800281c:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8002820:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002822:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002826:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800282a:	fb00 f101 	mul.w	r1, r0, r1
 800282e:	fba6 6101 	umull	r6, r1, r6, r1
 8002832:	6a10      	ldr	r0, [r2, #32]
 8002834:	0989      	lsrs	r1, r1, #6
 8002836:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800283a:	3101      	adds	r1, #1
 800283c:	4301      	orrs	r1, r0
 800283e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002840:	69d1      	ldr	r1, [r2, #28]
 8002842:	68a0      	ldr	r0, [r4, #8]
 8002844:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002848:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800284c:	b9a0      	cbnz	r0, 8002878 <HAL_I2C_Init+0x158>
 800284e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002852:	fbb3 f3f5 	udiv	r3, r3, r5
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	b1cb      	cbz	r3, 8002892 <HAL_I2C_Init+0x172>
 800285e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002862:	e7a5      	b.n	80027b0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002864:	2001      	movs	r0, #1
}
 8002866:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002868:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800286c:	f7fe ffc6 	bl	80017fc <HAL_I2C_MspInit>
 8002870:	e762      	b.n	8002738 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	e79b      	b.n	80027b0 <HAL_I2C_Init+0x90>
 8002878:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800287c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002880:	fbb3 f3f5 	udiv	r3, r3, r5
 8002884:	3301      	adds	r3, #1
 8002886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288a:	b113      	cbz	r3, 8002892 <HAL_I2C_Init+0x172>
 800288c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002890:	e78e      	b.n	80027b0 <HAL_I2C_Init+0x90>
 8002892:	2301      	movs	r3, #1
 8002894:	e78c      	b.n	80027b0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002896:	2001      	movs	r0, #1
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	000186a0 	.word	0x000186a0
 80028a0:	001e847f 	.word	0x001e847f
 80028a4:	431bde83 	.word	0x431bde83
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	f000 809b 	beq.w	80029ec <HAL_I2S_Init+0x13c>
{
 80028b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80028b8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80028bc:	4604      	mov	r4, r0
 80028be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d077      	beq.n	80029b6 <HAL_I2S_Init+0x106>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028c6:	6821      	ldr	r1, [r4, #0]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028c8:	6960      	ldr	r0, [r4, #20]
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028ca:	68e5      	ldr	r5, [r4, #12]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80028cc:	2202      	movs	r2, #2
 80028ce:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028d2:	69cb      	ldr	r3, [r1, #28]
 80028d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80028d8:	f023 030f 	bic.w	r3, r3, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028dc:	4290      	cmp	r0, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028de:	61cb      	str	r3, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 80028e0:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028e2:	d028      	beq.n	8002936 <HAL_I2S_Init+0x86>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028e4:	2d00      	cmp	r5, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028e6:	68a2      	ldr	r2, [r4, #8]
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028e8:	bf15      	itete	ne
 80028ea:	2640      	movne	r6, #64	@ 0x40
 80028ec:	2620      	moveq	r6, #32
 80028ee:	2320      	movne	r3, #32
 80028f0:	2310      	moveq	r3, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028f2:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028f4:	2a20      	cmp	r2, #32
 80028f6:	bf88      	it	hi
 80028f8:	461e      	movhi	r6, r3
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028fa:	f000 fe45 	bl	8003588 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028fe:	6922      	ldr	r2, [r4, #16]
 8002900:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002904:	d05e      	beq.n	80029c4 <HAL_I2S_Init+0x114>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002906:	fbb0 f0f6 	udiv	r0, r0, r6
 800290a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800290e:	6961      	ldr	r1, [r4, #20]
 8002910:	0043      	lsls	r3, r0, #1
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002918:	4935      	ldr	r1, [pc, #212]	@ (80029f0 <HAL_I2S_Init+0x140>)
 800291a:	fba1 1303 	umull	r1, r3, r1, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800291e:	0918      	lsrs	r0, r3, #4
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002920:	1e81      	subs	r1, r0, #2
 8002922:	29fd      	cmp	r1, #253	@ 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002924:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002928:	d959      	bls.n	80029de <HAL_I2S_Init+0x12e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800292a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	6463      	str	r3, [r4, #68]	@ 0x44
    return HAL_ERROR;
 8002932:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8002934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002936:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002938:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 8002a04 <HAL_I2S_Init+0x154>
 800293c:	69a7      	ldr	r7, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800293e:	4302      	orrs	r2, r0
 8002940:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002942:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002946:	69cb      	ldr	r3, [r1, #28]
 8002948:	ea42 0600 	orr.w	r6, r2, r0
 800294c:	ea03 030c 	and.w	r3, r3, ip
 8002950:	4333      	orrs	r3, r6
 8002952:	432b      	orrs	r3, r5
 8002954:	433b      	orrs	r3, r7
 8002956:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800295a:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800295c:	6a23      	ldr	r3, [r4, #32]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d123      	bne.n	80029aa <HAL_I2S_Init+0xfa>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002962:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_I2S_Init+0x144>)
 8002964:	4e24      	ldr	r6, [pc, #144]	@ (80029f8 <HAL_I2S_Init+0x148>)
 8002966:	4299      	cmp	r1, r3
 8002968:	bf18      	it	ne
 800296a:	f04f 2640 	movne.w	r6, #1073758208	@ 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_I2S_Init+0x14c>)
 8002970:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002972:	69f3      	ldr	r3, [r6, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002974:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002978:	ea03 030c 	and.w	r3, r3, ip
 800297c:	61f3      	str	r3, [r6, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800297e:	bf18      	it	ne
 8002980:	fab2 f282 	clzne	r2, r2
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002984:	f04f 0302 	mov.w	r3, #2
 8002988:	6233      	str	r3, [r6, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800298a:	bf18      	it	ne
 800298c:	0952      	lsrne	r2, r2, #5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800298e:	69f3      	ldr	r3, [r6, #28]
                         (uint16_t)tmp                   | \
 8002990:	bf14      	ite	ne
 8002992:	0212      	lslne	r2, r2, #8
 8002994:	f44f 7280 	moveq.w	r2, #256	@ 0x100
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002998:	4328      	orrs	r0, r5
 800299a:	4302      	orrs	r2, r0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800299c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800299e:	433a      	orrs	r2, r7
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029a8:	61f3      	str	r3, [r6, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029aa:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80029ac:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029ae:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029b0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80029b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_I2S_Init+0x150>)
    hi2s->Lock = HAL_UNLOCKED;
 80029b8:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80029bc:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 80029be:	f7fe ff55 	bl	800186c <HAL_I2S_MspInit>
 80029c2:	e780      	b.n	80028c6 <HAL_I2S_Init+0x16>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80029c4:	68e5      	ldr	r5, [r4, #12]
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029c6:	6961      	ldr	r1, [r4, #20]
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80029c8:	b175      	cbz	r5, 80029e8 <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029ca:	00b6      	lsls	r6, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029cc:	fbb0 f0f6 	udiv	r0, r0, r6
 80029d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029d4:	0043      	lsls	r3, r0, #1
 80029d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029da:	3305      	adds	r3, #5
 80029dc:	e79c      	b.n	8002918 <HAL_I2S_Init+0x68>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029de:	6821      	ldr	r1, [r4, #0]
 80029e0:	68e5      	ldr	r5, [r4, #12]
 80029e2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029e6:	e7a7      	b.n	8002938 <HAL_I2S_Init+0x88>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029e8:	00f6      	lsls	r6, r6, #3
 80029ea:	e7ef      	b.n	80029cc <HAL_I2S_Init+0x11c>
    return HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
}
 80029ee:	4770      	bx	lr
 80029f0:	cccccccd 	.word	0xcccccccd
 80029f4:	40003800 	.word	0x40003800
 80029f8:	40003400 	.word	0x40003400
 80029fc:	08002c31 	.word	0x08002c31
 8002a00:	08002af9 	.word	0x08002af9
 8002a04:	fffff040 	.word	0xfffff040

08002a08 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002a08:	2900      	cmp	r1, #0
 8002a0a:	d051      	beq.n	8002ab0 <HAL_I2S_Transmit_DMA+0xa8>
 8002a0c:	2a00      	cmp	r2, #0
 8002a0e:	d04f      	beq.n	8002ab0 <HAL_I2S_Transmit_DMA+0xa8>
{
 8002a10:	b538      	push	{r3, r4, r5, lr}
  {
    return  HAL_ERROR;
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a12:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	4604      	mov	r4, r0
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	d135      	bne.n	8002a8a <HAL_I2S_Transmit_DMA+0x82>
  {
    return HAL_BUSY;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a1e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d031      	beq.n	8002a8a <HAL_I2S_Transmit_DMA+0x82>

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002a26:	2303      	movs	r3, #3
  __HAL_LOCK(hi2s);
 8002a28:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a2c:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002a2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	6463      	str	r3, [r4, #68]	@ 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a36:	69e8      	ldr	r0, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8002a38:	6261      	str	r1, [r4, #36]	@ 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a3a:	f000 0007 	and.w	r0, r0, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a3e:	2328      	movs	r3, #40	@ 0x28
 8002a40:	40c3      	lsrs	r3, r0
 8002a42:	07d8      	lsls	r0, r3, #31
 8002a44:	d423      	bmi.n	8002a8e <HAL_I2S_Transmit_DMA+0x86>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002a46:	8522      	strh	r2, [r4, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002a48:	8562      	strh	r2, [r4, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002a4a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002a4c:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <HAL_I2S_Transmit_DMA+0xac>)
 8002a4e:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_I2S_Transmit_DMA+0xb0>)
 8002a52:	63c3      	str	r3, [r0, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_I2S_Transmit_DMA+0xb4>)
 8002a56:	64c3      	str	r3, [r0, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8002a58:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a5a:	f105 020c 	add.w	r2, r5, #12
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f7ff fbf6 	bl	8002250 <HAL_DMA_Start_IT>
 8002a64:	b9c0      	cbnz	r0, 8002a98 <HAL_I2S_Transmit_DMA+0x90>
  }

  __HAL_UNLOCK(hi2s);

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002a66:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hi2s);
 8002a68:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	0791      	lsls	r1, r2, #30
 8002a70:	d403      	bmi.n	8002a7a <HAL_I2S_Transmit_DMA+0x72>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	f042 0202 	orr.w	r2, r2, #2
 8002a78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	0552      	lsls	r2, r2, #21
 8002a7e:	d403      	bmi.n	8002a88 <HAL_I2S_Transmit_DMA+0x80>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a86:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
}
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002a8a:	2002      	movs	r0, #2
}
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = (Size << 1U);
 8002a8e:	0053      	lsls	r3, r2, #1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002a94:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002a96:	e7d8      	b.n	8002a4a <HAL_I2S_Transmit_DMA+0x42>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002a9a:	2101      	movs	r1, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 8002aa0:	2200      	movs	r2, #0
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002aa2:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002aa4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8002aa8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    return  HAL_ERROR;
 8002aac:	2001      	movs	r0, #1
}
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 8002ab0:	2001      	movs	r0, #1
}
 8002ab2:	4770      	bx	lr
 8002ab4:	08002ac1 	.word	0x08002ac1
 8002ab8:	08002acd 	.word	0x08002acd
 8002abc:	08002c01 	.word	0x08002c01

08002ac0 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002ac2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002ac4:	f7fe fc42 	bl	800134c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ac8:	bd08      	pop	{r3, pc}
 8002aca:	bf00      	nop

08002acc <I2S_DMATxCplt>:
{
 8002acc:	b508      	push	{r3, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ace:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ad0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ad2:	b94b      	cbnz	r3, 8002ae8 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ad4:	6801      	ldr	r1, [r0, #0]
 8002ad6:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002ad8:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002adc:	f022 0202 	bic.w	r2, r2, #2
 8002ae0:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8002ae2:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002ae4:	f880 c041 	strb.w	ip, [r0, #65]	@ 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002ae8:	f7fe fc5e 	bl	80013a8 <HAL_I2S_TxCpltCallback>
}
 8002aec:	bd08      	pop	{r3, pc}
 8002aee:	bf00      	nop

08002af0 <HAL_I2S_RxCpltCallback>:
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <HAL_I2S_ErrorCallback>:
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002afa:	6803      	ldr	r3, [r0, #0]
{
 8002afc:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b02:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002b06:	2a04      	cmp	r2, #4
{
 8002b08:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b0a:	d005      	beq.n	8002b18 <I2S_IRQHandler+0x20>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b0c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d031      	beq.n	8002b78 <I2S_IRQHandler+0x80>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b14:	b004      	add	sp, #16
 8002b16:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b18:	9a01      	ldr	r2, [sp, #4]
 8002b1a:	07d1      	lsls	r1, r2, #31
 8002b1c:	d50f      	bpl.n	8002b3e <I2S_IRQHandler+0x46>
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	0652      	lsls	r2, r2, #25
 8002b22:	d50c      	bpl.n	8002b3e <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b24:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8002b2c:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
  hi2s->pRxBuffPtr++;
 8002b2e:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002b30:	3a01      	subs	r2, #1
 8002b32:	b292      	uxth	r2, r2
 8002b34:	8642      	strh	r2, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 8002b36:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d04a      	beq.n	8002bd4 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	0659      	lsls	r1, r3, #25
 8002b42:	d5e3      	bpl.n	8002b0c <I2S_IRQHandler+0x14>
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	0692      	lsls	r2, r2, #26
 8002b4a:	d5df      	bpl.n	8002b0c <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b4c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b4e:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b54:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b56:	9102      	str	r1, [sp, #8]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	9202      	str	r2, [sp, #8]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002b60:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b62:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002b64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8002b6e:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b70:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002b72:	f7ff ffbf 	bl	8002af4 <HAL_I2S_ErrorCallback>
 8002b76:	e7c9      	b.n	8002b0c <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	079b      	lsls	r3, r3, #30
 8002b7c:	d50f      	bpl.n	8002b9e <I2S_IRQHandler+0xa6>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	0610      	lsls	r0, r2, #24
 8002b84:	d50b      	bpl.n	8002b9e <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b86:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002b88:	f831 2b02 	ldrh.w	r2, [r1], #2
 8002b8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b8e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  hi2s->pTxBuffPtr++;
 8002b90:	6261      	str	r1, [r4, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002b92:	3a01      	subs	r2, #1
 8002b94:	b292      	uxth	r2, r2
 8002b96:	8562      	strh	r2, [r4, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 8002b98:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002b9a:	b292      	uxth	r2, r2
 8002b9c:	b322      	cbz	r2, 8002be8 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b9e:	9b01      	ldr	r3, [sp, #4]
 8002ba0:	0719      	lsls	r1, r3, #28
 8002ba2:	d5b7      	bpl.n	8002b14 <I2S_IRQHandler+0x1c>
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	0692      	lsls	r2, r2, #26
 8002baa:	d5b3      	bpl.n	8002b14 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bac:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bae:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bb4:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bb6:	9103      	str	r1, [sp, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002bbc:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bbe:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bc4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
      HAL_I2S_ErrorCallback(hi2s);
 8002bca:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bcc:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002bce:	f7ff ff91 	bl	8002af4 <HAL_I2S_ErrorCallback>
}
 8002bd2:	e79f      	b.n	8002b14 <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd4:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002bd6:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bdc:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002bde:	f880 1041 	strb.w	r1, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002be2:	f7ff ff85 	bl	8002af0 <HAL_I2S_RxCpltCallback>
 8002be6:	e7aa      	b.n	8002b3e <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002be8:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002bea:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bf0:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8002bf2:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8002bf4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002bf8:	f7fe fbd6 	bl	80013a8 <HAL_I2S_TxCpltCallback>
 8002bfc:	e7cf      	b.n	8002b9e <I2S_IRQHandler+0xa6>
 8002bfe:	bf00      	nop

08002c00 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c00:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c02:	6801      	ldr	r1, [r0, #0]
{
 8002c04:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c06:	684b      	ldr	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8002c08:	2200      	movs	r2, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8002c0a:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8002c14:	8542      	strh	r2, [r0, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002c16:	8642      	strh	r2, [r0, #50]	@ 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8002c18:	f880 c041 	strb.w	ip, [r0, #65]	@ 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c1c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002c1e:	f043 0308 	orr.w	r3, r3, #8
 8002c22:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002c24:	f7ff ff66 	bl	8002af4 <HAL_I2S_ErrorCallback>
}
 8002c28:	bd08      	pop	{r3, pc}
 8002c2a:	bf00      	nop

08002c2c <HAL_I2SEx_TxRxCpltCallback>:
/**
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop

08002c30 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002c30:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c32:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c34:	4a93      	ldr	r2, [pc, #588]	@ (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c36:	688b      	ldr	r3, [r1, #8]
{
 8002c38:	b086      	sub	sp, #24
 8002c3a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c3c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c3e:	4b92      	ldr	r3, [pc, #584]	@ (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8002c40:	4291      	cmp	r1, r2
 8002c42:	bf18      	it	ne
 8002c44:	f04f 2340 	movne.w	r3, #1073758208	@ 0x40004000
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	9201      	str	r2, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c4c:	684a      	ldr	r2, [r1, #4]
 8002c4e:	9202      	str	r2, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	9203      	str	r2, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c54:	6842      	ldr	r2, [r0, #4]
 8002c56:	f432 7200 	bics.w	r2, r2, #512	@ 0x200
 8002c5a:	d078      	beq.n	8002d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x11e>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002c5c:	9a01      	ldr	r2, [sp, #4]
 8002c5e:	0792      	lsls	r2, r2, #30
 8002c60:	d51a      	bpl.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8002c62:	9a03      	ldr	r2, [sp, #12]
 8002c64:	0611      	lsls	r1, r2, #24
 8002c66:	d517      	bpl.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c68:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002c6a:	1c91      	adds	r1, r2, #2
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	6241      	str	r1, [r0, #36]	@ 0x24
 8002c70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c72:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8002c74:	3a01      	subs	r2, #1
 8002c76:	b292      	uxth	r2, r2
 8002c78:	8542      	strh	r2, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c7a:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	b95a      	cbnz	r2, 8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c86:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c88:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b923      	cbnz	r3, 8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c94:	f7ff ffca 	bl	8002c2c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c98:	9b00      	ldr	r3, [sp, #0]
 8002c9a:	07da      	lsls	r2, r3, #31
 8002c9c:	d51c      	bpl.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8002c9e:	9b02      	ldr	r3, [sp, #8]
 8002ca0:	065b      	lsls	r3, r3, #25
 8002ca2:	d519      	bpl.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002ca4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002ca6:	6822      	ldr	r2, [r4, #0]
 8002ca8:	1c98      	adds	r0, r3, #2
 8002caa:	68d1      	ldr	r1, [r2, #12]
 8002cac:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002cae:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002cb0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8663      	strh	r3, [r4, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002cb8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b963      	cbnz	r3, 8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cbe:	6853      	ldr	r3, [r2, #4]
 8002cc0:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002cc4:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8002cc6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b92b      	cbnz	r3, 8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff ffaa 	bl	8002c2c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cd8:	9b00      	ldr	r3, [sp, #0]
 8002cda:	0658      	lsls	r0, r3, #25
 8002cdc:	d51b      	bpl.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	0699      	lsls	r1, r3, #26
 8002ce2:	d518      	bpl.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce4:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ce6:	4867      	ldr	r0, [pc, #412]	@ (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce8:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cea:	4b67      	ldr	r3, [pc, #412]	@ (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cec:	f021 0160 	bic.w	r1, r1, #96	@ 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf0:	4282      	cmp	r2, r0
 8002cf2:	bf18      	it	ne
 8002cf4:	f04f 2340 	movne.w	r3, #1073758208	@ 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cf8:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cfa:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfc:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cfe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d02:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002d04:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8002d0e:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d10:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002d12:	f7ff feef 	bl	8002af4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d16:	9b01      	ldr	r3, [sp, #4]
 8002d18:	071a      	lsls	r2, r3, #28
 8002d1a:	d571      	bpl.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8002d1c:	9b03      	ldr	r3, [sp, #12]
 8002d1e:	069b      	lsls	r3, r3, #26
 8002d20:	d56e      	bpl.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	4957      	ldr	r1, [pc, #348]	@ (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002d26:	4b58      	ldr	r3, [pc, #352]	@ (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8002d28:	428a      	cmp	r2, r1
 8002d2a:	bf18      	it	ne
 8002d2c:	f04f 2340 	movne.w	r3, #1073758208	@ 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8002d30:	f04f 0c01 	mov.w	ip, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
 8002d3a:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d3c:	6853      	ldr	r3, [r2, #4]
 8002d3e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002d42:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002d44:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d48:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	e050      	b.n	8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d4e:	9b00      	ldr	r3, [sp, #0]
 8002d50:	079a      	lsls	r2, r3, #30
 8002d52:	d502      	bpl.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
 8002d54:	9b02      	ldr	r3, [sp, #8]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	d454      	bmi.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d5a:	9b01      	ldr	r3, [sp, #4]
 8002d5c:	07d8      	lsls	r0, r3, #31
 8002d5e:	d502      	bpl.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8002d60:	9b03      	ldr	r3, [sp, #12]
 8002d62:	0659      	lsls	r1, r3, #25
 8002d64:	d469      	bmi.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x20a>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d66:	9b01      	ldr	r3, [sp, #4]
 8002d68:	065a      	lsls	r2, r3, #25
 8002d6a:	d522      	bpl.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x182>
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	069b      	lsls	r3, r3, #26
 8002d70:	d51f      	bpl.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x182>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	4943      	ldr	r1, [pc, #268]	@ (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002d76:	4a44      	ldr	r2, [pc, #272]	@ (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	bf18      	it	ne
 8002d7c:	f04f 2240 	movne.w	r2, #1073758208	@ 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d80:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d82:	6851      	ldr	r1, [r2, #4]
 8002d84:	f021 0160 	bic.w	r1, r1, #96	@ 0x60
 8002d88:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d90:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d92:	9004      	str	r0, [sp, #16]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	9204      	str	r2, [sp, #16]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002d9c:	2101      	movs	r1, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d9e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002da0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002da4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002da6:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8002daa:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dac:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002dae:	f7ff fea1 	bl	8002af4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002db2:	9b00      	ldr	r3, [sp, #0]
 8002db4:	0718      	lsls	r0, r3, #28
 8002db6:	d523      	bpl.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8002db8:	9b02      	ldr	r3, [sp, #8]
 8002dba:	0699      	lsls	r1, r3, #26
 8002dbc:	d520      	bpl.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dbe:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc0:	4830      	ldr	r0, [pc, #192]	@ (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc2:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc4:	4a30      	ldr	r2, [pc, #192]	@ (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc6:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dca:	4283      	cmp	r3, r0
 8002dcc:	bf18      	it	ne
 8002dce:	f04f 2240 	movne.w	r2, #1073758208	@ 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd2:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd4:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002dd6:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd8:	f021 0160 	bic.w	r1, r1, #96	@ 0x60
 8002ddc:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002dde:	9005      	str	r0, [sp, #20]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002de4:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002de6:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002de8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002dee:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8002df6:	b006      	add	sp, #24
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8002dfc:	f7ff be7a 	b.w	8002af4 <HAL_I2S_ErrorCallback>
}
 8002e00:	b006      	add	sp, #24
 8002e02:	bd10      	pop	{r4, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e04:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	6242      	str	r2, [r0, #36]	@ 0x24
 8002e0c:	60cb      	str	r3, [r1, #12]
  hi2s->TxXferCount--;
 8002e0e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 8002e16:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d19d      	bne.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e1e:	684b      	ldr	r3, [r1, #4]
 8002e20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e24:	604b      	str	r3, [r1, #4]
    if (hi2s->RxXferCount == 0U)
 8002e26:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d195      	bne.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
      hi2s->State = HAL_I2S_STATE_READY;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e34:	f7ff fefa 	bl	8002c2c <HAL_I2SEx_TxRxCpltCallback>
 8002e38:	e78f      	b.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	4911      	ldr	r1, [pc, #68]	@ (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	@ (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8002e40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002e42:	4288      	cmp	r0, r1
 8002e44:	bf18      	it	ne
 8002e46:	f04f 2240 	movne.w	r2, #1073758208	@ 0x40004000
 8002e4a:	1c98      	adds	r0, r3, #2
 8002e4c:	68d1      	ldr	r1, [r2, #12]
 8002e4e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002e50:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002e52:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8663      	strh	r3, [r4, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002e5a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d181      	bne.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e62:	6853      	ldr	r3, [r2, #4]
 8002e64:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002e68:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8002e6a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f47f af79 	bne.w	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff fed6 	bl	8002c2c <HAL_I2SEx_TxRxCpltCallback>
 8002e80:	e771      	b.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8002e82:	bf00      	nop
 8002e84:	40003800 	.word	0x40003800
 8002e88:	40003400 	.word	0x40003400

08002e8c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	f000 81d8 	beq.w	8003242 <HAL_RCC_OscConfig+0x3b6>
{
 8002e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	6803      	ldr	r3, [r0, #0]
 8002e98:	07dd      	lsls	r5, r3, #31
{
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	d52f      	bpl.n	8002f00 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ea0:	499d      	ldr	r1, [pc, #628]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8002ea2:	688a      	ldr	r2, [r1, #8]
 8002ea4:	f002 020c 	and.w	r2, r2, #12
 8002ea8:	2a04      	cmp	r2, #4
 8002eaa:	f000 80ec 	beq.w	8003086 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	688a      	ldr	r2, [r1, #8]
 8002eb0:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eb4:	2a08      	cmp	r2, #8
 8002eb6:	f000 80e2 	beq.w	800307e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eba:	6863      	ldr	r3, [r4, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec0:	f000 80eb 	beq.w	800309a <HAL_RCC_OscConfig+0x20e>
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec8:	f000 8173 	beq.w	80031b2 <HAL_RCC_OscConfig+0x326>
 8002ecc:	4d92      	ldr	r5, [pc, #584]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8002ece:	682a      	ldr	r2, [r5, #0]
 8002ed0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ed4:	602a      	str	r2, [r5, #0]
 8002ed6:	682a      	ldr	r2, [r5, #0]
 8002ed8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002edc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80e0 	bne.w	80030a4 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fe5e 	bl	8001ba4 <HAL_GetTick>
 8002ee8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fe5a 	bl	8001ba4 <HAL_GetTick>
 8002ef0:	1b80      	subs	r0, r0, r6
 8002ef2:	2864      	cmp	r0, #100	@ 0x64
 8002ef4:	f200 8100 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	039f      	lsls	r7, r3, #14
 8002efc:	d4f6      	bmi.n	8002eec <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	079d      	lsls	r5, r3, #30
 8002f02:	d528      	bpl.n	8002f56 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f04:	4a84      	ldr	r2, [pc, #528]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8002f06:	6891      	ldr	r1, [r2, #8]
 8002f08:	f011 0f0c 	tst.w	r1, #12
 8002f0c:	f000 809b 	beq.w	8003046 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f10:	6891      	ldr	r1, [r2, #8]
 8002f12:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f16:	2908      	cmp	r1, #8
 8002f18:	f000 8091 	beq.w	800303e <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f1c:	68e3      	ldr	r3, [r4, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 810c 	beq.w	800313c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f24:	4b7d      	ldr	r3, [pc, #500]	@ (800311c <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4e7c      	ldr	r6, [pc, #496]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fe3a 	bl	8001ba4 <HAL_GetTick>
 8002f30:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe fe36 	bl	8001ba4 <HAL_GetTick>
 8002f38:	1b40      	subs	r0, r0, r5
 8002f3a:	2802      	cmp	r0, #2
 8002f3c:	f200 80dc 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	6833      	ldr	r3, [r6, #0]
 8002f42:	079f      	lsls	r7, r3, #30
 8002f44:	d5f6      	bpl.n	8002f34 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	6833      	ldr	r3, [r6, #0]
 8002f48:	6922      	ldr	r2, [r4, #16]
 8002f4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002f4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002f52:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	071a      	lsls	r2, r3, #28
 8002f58:	d45c      	bmi.n	8003014 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5a:	075d      	lsls	r5, r3, #29
 8002f5c:	d53a      	bpl.n	8002fd4 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8002f60:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002f62:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	f040 8088 	bne.w	800307a <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f74:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f7e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4e67      	ldr	r6, [pc, #412]	@ (8003120 <HAL_RCC_OscConfig+0x294>)
 8002f82:	6833      	ldr	r3, [r6, #0]
 8002f84:	05d8      	lsls	r0, r3, #23
 8002f86:	f140 80a7 	bpl.w	80030d8 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f000 80b7 	beq.w	8003100 <HAL_RCC_OscConfig+0x274>
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	f000 811d 	beq.w	80031d2 <HAL_RCC_OscConfig+0x346>
 8002f98:	4e5f      	ldr	r6, [pc, #380]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8002f9a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	6732      	str	r2, [r6, #112]	@ 0x70
 8002fa2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002fa4:	f022 0204 	bic.w	r2, r2, #4
 8002fa8:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 80ad 	bne.w	800310a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fdf8 	bl	8001ba4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002fb8:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fdf2 	bl	8001ba4 <HAL_GetTick>
 8002fc0:	1bc0      	subs	r0, r0, r7
 8002fc2:	4540      	cmp	r0, r8
 8002fc4:	f200 8098 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002fca:	079b      	lsls	r3, r3, #30
 8002fcc:	d4f6      	bmi.n	8002fbc <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fce:	2d00      	cmp	r5, #0
 8002fd0:	f040 80f9 	bne.w	80031c6 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd4:	69a3      	ldr	r3, [r4, #24]
 8002fd6:	b1cb      	cbz	r3, 800300c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd8:	4d4f      	ldr	r5, [pc, #316]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8002fda:	68aa      	ldr	r2, [r5, #8]
 8002fdc:	f002 020c 	and.w	r2, r2, #12
 8002fe0:	2a08      	cmp	r2, #8
 8002fe2:	f000 80bc 	beq.w	800315e <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe6:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800311c <HAL_RCC_OscConfig+0x290>)
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff0:	f000 80f9 	beq.w	80031e6 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fdd6 	bl	8001ba4 <HAL_GetTick>
 8002ff8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e004      	b.n	8003006 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fdd2 	bl	8001ba4 <HAL_GetTick>
 8003000:	1b00      	subs	r0, r0, r4
 8003002:	2802      	cmp	r0, #2
 8003004:	d878      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	d4f7      	bmi.n	8002ffc <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800300c:	2000      	movs	r0, #0
}
 800300e:	b002      	add	sp, #8
 8003010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003014:	6963      	ldr	r3, [r4, #20]
 8003016:	b1fb      	cbz	r3, 8003058 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8003018:	4b40      	ldr	r3, [pc, #256]	@ (800311c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	4e3f      	ldr	r6, [pc, #252]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 800301c:	2201      	movs	r2, #1
 800301e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003022:	f7fe fdbf 	bl	8001ba4 <HAL_GetTick>
 8003026:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003028:	e004      	b.n	8003034 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe fdbb 	bl	8001ba4 <HAL_GetTick>
 800302e:	1b40      	subs	r0, r0, r5
 8003030:	2802      	cmp	r0, #2
 8003032:	d861      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003034:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003036:	079b      	lsls	r3, r3, #30
 8003038:	d5f7      	bpl.n	800302a <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	e78d      	b.n	8002f5a <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	6852      	ldr	r2, [r2, #4]
 8003040:	0251      	lsls	r1, r2, #9
 8003042:	f53f af6b 	bmi.w	8002f1c <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	4a34      	ldr	r2, [pc, #208]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	0792      	lsls	r2, r2, #30
 800304c:	d538      	bpl.n	80030c0 <HAL_RCC_OscConfig+0x234>
 800304e:	68e2      	ldr	r2, [r4, #12]
 8003050:	2a01      	cmp	r2, #1
 8003052:	d035      	beq.n	80030c0 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8003054:	2001      	movs	r0, #1
 8003056:	e7da      	b.n	800300e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8003058:	4a30      	ldr	r2, [pc, #192]	@ (800311c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305a:	4e2f      	ldr	r6, [pc, #188]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 800305c:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003060:	f7fe fda0 	bl	8001ba4 <HAL_GetTick>
 8003064:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003066:	e004      	b.n	8003072 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe fd9c 	bl	8001ba4 <HAL_GetTick>
 800306c:	1b40      	subs	r0, r0, r5
 800306e:	2802      	cmp	r0, #2
 8003070:	d842      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003072:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003074:	079f      	lsls	r7, r3, #30
 8003076:	d4f7      	bmi.n	8003068 <HAL_RCC_OscConfig+0x1dc>
 8003078:	e7df      	b.n	800303a <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2500      	movs	r5, #0
 800307c:	e780      	b.n	8002f80 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	684a      	ldr	r2, [r1, #4]
 8003080:	0251      	lsls	r1, r2, #9
 8003082:	f57f af1a 	bpl.w	8002eba <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4a24      	ldr	r2, [pc, #144]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	0392      	lsls	r2, r2, #14
 800308c:	f57f af38 	bpl.w	8002f00 <HAL_RCC_OscConfig+0x74>
 8003090:	6862      	ldr	r2, [r4, #4]
 8003092:	2a00      	cmp	r2, #0
 8003094:	f47f af34 	bne.w	8002f00 <HAL_RCC_OscConfig+0x74>
 8003098:	e7dc      	b.n	8003054 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309a:	4a1f      	ldr	r2, [pc, #124]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030a4:	f7fe fd7e 	bl	8001ba4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a8:	4e1b      	ldr	r6, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80030aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ac:	e004      	b.n	80030b8 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ae:	f7fe fd79 	bl	8001ba4 <HAL_GetTick>
 80030b2:	1b40      	subs	r0, r0, r5
 80030b4:	2864      	cmp	r0, #100	@ 0x64
 80030b6:	d81f      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b8:	6833      	ldr	r3, [r6, #0]
 80030ba:	039b      	lsls	r3, r3, #14
 80030bc:	d5f7      	bpl.n	80030ae <HAL_RCC_OscConfig+0x222>
 80030be:	e71e      	b.n	8002efe <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4915      	ldr	r1, [pc, #84]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 80030c2:	6920      	ldr	r0, [r4, #16]
 80030c4:	680a      	ldr	r2, [r1, #0]
 80030c6:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80030ca:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80030ce:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d0:	071a      	lsls	r2, r3, #28
 80030d2:	f57f af42 	bpl.w	8002f5a <HAL_RCC_OscConfig+0xce>
 80030d6:	e79d      	b.n	8003014 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d8:	6833      	ldr	r3, [r6, #0]
 80030da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030de:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80030e0:	f7fe fd60 	bl	8001ba4 <HAL_GetTick>
 80030e4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	6833      	ldr	r3, [r6, #0]
 80030e8:	05d9      	lsls	r1, r3, #23
 80030ea:	f53f af4e 	bmi.w	8002f8a <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7fe fd59 	bl	8001ba4 <HAL_GetTick>
 80030f2:	1bc0      	subs	r0, r0, r7
 80030f4:	2802      	cmp	r0, #2
 80030f6:	d9f6      	bls.n	80030e6 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80030f8:	2003      	movs	r0, #3
}
 80030fa:	b002      	add	sp, #8
 80030fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003100:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
 8003102:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800310a:	f7fe fd4b 	bl	8001ba4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	4f02      	ldr	r7, [pc, #8]	@ (8003118 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003110:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x2a2>
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe fd3e 	bl	8001ba4 <HAL_GetTick>
 8003128:	1b80      	subs	r0, r0, r6
 800312a:	4540      	cmp	r0, r8
 800312c:	d8e4      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003130:	079a      	lsls	r2, r3, #30
 8003132:	d5f7      	bpl.n	8003124 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8003134:	2d00      	cmp	r5, #0
 8003136:	f43f af4d 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x148>
 800313a:	e044      	b.n	80031c6 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 800313c:	4a42      	ldr	r2, [pc, #264]	@ (8003248 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	4e43      	ldr	r6, [pc, #268]	@ (800324c <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8003140:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003142:	f7fe fd2f 	bl	8001ba4 <HAL_GetTick>
 8003146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003148:	e004      	b.n	8003154 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe fd2b 	bl	8001ba4 <HAL_GetTick>
 800314e:	1b40      	subs	r0, r0, r5
 8003150:	2802      	cmp	r0, #2
 8003152:	d8d1      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003154:	6833      	ldr	r3, [r6, #0]
 8003156:	0799      	lsls	r1, r3, #30
 8003158:	d4f7      	bmi.n	800314a <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	e6fb      	b.n	8002f56 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315e:	2b01      	cmp	r3, #1
 8003160:	f43f af78 	beq.w	8003054 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8003164:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003166:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003168:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	4291      	cmp	r1, r2
 800316e:	f47f af71 	bne.w	8003054 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	4291      	cmp	r1, r2
 800317a:	f47f af6b 	bne.w	8003054 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003180:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003184:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003186:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800318a:	f47f af63 	bne.w	8003054 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003190:	0852      	lsrs	r2, r2, #1
 8003192:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003196:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003198:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800319c:	f47f af5a 	bne.w	8003054 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80031a2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80031aa:	bf14      	ite	ne
 80031ac:	2001      	movne	r0, #1
 80031ae:	2000      	moveq	r0, #0
 80031b0:	e72d      	b.n	800300e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b2:	4b26      	ldr	r3, [pc, #152]	@ (800324c <HAL_RCC_OscConfig+0x3c0>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80031c2:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c4:	e76e      	b.n	80030a4 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_RCC_OscConfig+0x3c0>)
 80031c8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d0:	e700      	b.n	8002fd4 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d2:	4b1e      	ldr	r3, [pc, #120]	@ (800324c <HAL_RCC_OscConfig+0x3c0>)
 80031d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031d6:	f042 0204 	orr.w	r2, r2, #4
 80031da:	671a      	str	r2, [r3, #112]	@ 0x70
 80031dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e4:	e791      	b.n	800310a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80031e6:	f7fe fcdd 	bl	8001ba4 <HAL_GetTick>
 80031ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ec:	e005      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fcd9 	bl	8001ba4 <HAL_GetTick>
 80031f2:	1b80      	subs	r0, r0, r6
 80031f4:	2802      	cmp	r0, #2
 80031f6:	f63f af7f 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	682b      	ldr	r3, [r5, #0]
 80031fc:	0199      	lsls	r1, r3, #6
 80031fe:	d4f6      	bmi.n	80031ee <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003200:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003204:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003206:	430b      	orrs	r3, r1
 8003208:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800320c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8003210:	0852      	lsrs	r2, r2, #1
 8003212:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003216:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003218:	490b      	ldr	r1, [pc, #44]	@ (8003248 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800321e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003220:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003222:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003224:	f7fe fcbe 	bl	8001ba4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003228:	4d08      	ldr	r5, [pc, #32]	@ (800324c <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 800322a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322c:	e005      	b.n	800323a <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe fcb9 	bl	8001ba4 <HAL_GetTick>
 8003232:	1b00      	subs	r0, r0, r4
 8003234:	2802      	cmp	r0, #2
 8003236:	f63f af5f 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	682b      	ldr	r3, [r5, #0]
 800323c:	019a      	lsls	r2, r3, #6
 800323e:	d5f6      	bpl.n	800322e <HAL_RCC_OscConfig+0x3a2>
 8003240:	e6e4      	b.n	800300c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8003242:	2001      	movs	r0, #1
}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	42470000 	.word	0x42470000
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003252:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003254:	688b      	ldr	r3, [r1, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d01b      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x46>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d117      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003262:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003264:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003266:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003268:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003270:	d113      	bne.n	800329a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	480f      	ldr	r0, [pc, #60]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8003274:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003278:	fba1 0100 	umull	r0, r1, r1, r0
 800327c:	f7fd fc9a 	bl	8000bb4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x5c>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003288:	3301      	adds	r3, #1
 800328a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800328c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003290:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003292:	4807      	ldr	r0, [pc, #28]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003294:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003296:	4807      	ldr	r0, [pc, #28]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003298:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4806      	ldr	r0, [pc, #24]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x64>)
 800329c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80032a0:	2300      	movs	r3, #0
 80032a2:	fba1 0100 	umull	r0, r1, r1, r0
 80032a6:	f7fd fc85 	bl	8000bb4 <__aeabi_uldivmod>
 80032aa:	e7e9      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x30>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	017d7840 	.word	0x017d7840

080032b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80032b8:	2800      	cmp	r0, #0
 80032ba:	f000 8087 	beq.w	80033cc <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032be:	4a48      	ldr	r2, [pc, #288]	@ (80033e0 <HAL_RCC_ClockConfig+0x128>)
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	428b      	cmp	r3, r1
{
 80032c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032cc:	460d      	mov	r5, r1
 80032ce:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d0:	d209      	bcs.n	80032e6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	b2cb      	uxtb	r3, r1
 80032d4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	428b      	cmp	r3, r1
 80032de:	d002      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
}
 80032e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	0798      	lsls	r0, r3, #30
 80032ea:	d514      	bpl.n	8003316 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	0759      	lsls	r1, r3, #29
 80032ee:	d504      	bpl.n	80032fa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	493c      	ldr	r1, [pc, #240]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 80032f2:	688a      	ldr	r2, [r1, #8]
 80032f4:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80032f8:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	071a      	lsls	r2, r3, #28
 80032fc:	d504      	bpl.n	8003308 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fe:	4939      	ldr	r1, [pc, #228]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 8003300:	688a      	ldr	r2, [r1, #8]
 8003302:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8003306:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4936      	ldr	r1, [pc, #216]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 800330a:	68a0      	ldr	r0, [r4, #8]
 800330c:	688a      	ldr	r2, [r1, #8]
 800330e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003312:	4302      	orrs	r2, r0
 8003314:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	07df      	lsls	r7, r3, #31
 8003318:	d521      	bpl.n	800335e <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	6862      	ldr	r2, [r4, #4]
 800331c:	2a01      	cmp	r2, #1
 800331e:	d057      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003320:	1e93      	subs	r3, r2, #2
 8003322:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003324:	4b2f      	ldr	r3, [pc, #188]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 8003326:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003328:	d94d      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	0799      	lsls	r1, r3, #30
 800332c:	d5d8      	bpl.n	80032e0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4e2d      	ldr	r6, [pc, #180]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 8003330:	68b3      	ldr	r3, [r6, #8]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	4313      	orrs	r3, r2
 8003338:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800333a:	f7fe fc33 	bl	8001ba4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003342:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003344:	e004      	b.n	8003350 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003346:	f7fe fc2d 	bl	8001ba4 <HAL_GetTick>
 800334a:	1bc0      	subs	r0, r0, r7
 800334c:	4540      	cmp	r0, r8
 800334e:	d844      	bhi.n	80033da <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003350:	68b3      	ldr	r3, [r6, #8]
 8003352:	6862      	ldr	r2, [r4, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800335c:	d1f3      	bne.n	8003346 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800335e:	4a20      	ldr	r2, [pc, #128]	@ (80033e0 <HAL_RCC_ClockConfig+0x128>)
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	42ab      	cmp	r3, r5
 8003368:	d906      	bls.n	8003378 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	b2eb      	uxtb	r3, r5
 800336c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	42ab      	cmp	r3, r5
 8003376:	d1b3      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	075a      	lsls	r2, r3, #29
 800337c:	d506      	bpl.n	800338c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337e:	4919      	ldr	r1, [pc, #100]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 8003380:	68e0      	ldr	r0, [r4, #12]
 8003382:	688a      	ldr	r2, [r1, #8]
 8003384:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8003388:	4302      	orrs	r2, r0
 800338a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	d507      	bpl.n	80033a0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 8003392:	6921      	ldr	r1, [r4, #16]
 8003394:	6893      	ldr	r3, [r2, #8]
 8003396:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800339a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800339e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a0:	f7ff ff56 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 80033a4:	4a0f      	ldr	r2, [pc, #60]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 80033a6:	4c10      	ldr	r4, [pc, #64]	@ (80033e8 <HAL_RCC_ClockConfig+0x130>)
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	4910      	ldr	r1, [pc, #64]	@ (80033ec <HAL_RCC_ClockConfig+0x134>)
 80033ac:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80033b0:	4603      	mov	r3, r0
 80033b2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 80033b4:	480e      	ldr	r0, [pc, #56]	@ (80033f0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033b6:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 80033b8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ba:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80033bc:	f7fe fba8 	bl	8001b10 <HAL_InitTick>
  return HAL_OK;
 80033c0:	2000      	movs	r0, #0
}
 80033c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	0198      	lsls	r0, r3, #6
 80033c8:	d4b1      	bmi.n	800332e <HAL_RCC_ClockConfig+0x76>
 80033ca:	e789      	b.n	80032e0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80033cc:	2001      	movs	r0, #1
}
 80033ce:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d0:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <HAL_RCC_ClockConfig+0x12c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	039e      	lsls	r6, r3, #14
 80033d6:	d4aa      	bmi.n	800332e <HAL_RCC_ClockConfig+0x76>
 80033d8:	e782      	b.n	80032e0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80033da:	2003      	movs	r0, #3
 80033dc:	e781      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2a>
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08005290 	.word	0x08005290
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000008 	.word	0x20000008

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f4:	4b04      	ldr	r3, [pc, #16]	@ (8003408 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80033f6:	4905      	ldr	r1, [pc, #20]	@ (800340c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033fc:	6808      	ldr	r0, [r1, #0]
 80033fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003402:	5cd3      	ldrb	r3, [r2, r3]
}
 8003404:	40d8      	lsrs	r0, r3
 8003406:	4770      	bx	lr
 8003408:	40023800 	.word	0x40023800
 800340c:	20000000 	.word	0x20000000
 8003410:	08005288 	.word	0x08005288

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003416:	4905      	ldr	r1, [pc, #20]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	4a05      	ldr	r2, [pc, #20]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800341c:	6808      	ldr	r0, [r1, #0]
 800341e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003422:	5cd3      	ldrb	r3, [r2, r3]
}
 8003424:	40d8      	lsrs	r0, r3
 8003426:	4770      	bx	lr
 8003428:	40023800 	.word	0x40023800
 800342c:	20000000 	.word	0x20000000
 8003430:	08005288 	.word	0x08005288

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003436:	6803      	ldr	r3, [r0, #0]
 8003438:	f013 0f05 	tst.w	r3, #5
{
 800343c:	b083      	sub	sp, #12
 800343e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003440:	d10b      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x26>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003442:	079d      	lsls	r5, r3, #30
 8003444:	d444      	bmi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003446:	071b      	lsls	r3, r3, #28
 8003448:	d402      	bmi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800344a:	2000      	movs	r0, #0
}
 800344c:	b003      	add	sp, #12
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003450:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003452:	7d22      	ldrb	r2, [r4, #20]
 8003454:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8003458:	e7f7      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x16>
    __HAL_RCC_PLLI2S_DISABLE();
 800345a:	4b48      	ldr	r3, [pc, #288]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x148>)
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800345c:	4e48      	ldr	r6, [pc, #288]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    __HAL_RCC_PLLI2S_DISABLE();
 800345e:	2200      	movs	r2, #0
 8003460:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8003462:	f7fe fb9f 	bl	8001ba4 <HAL_GetTick>
 8003466:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003468:	e004      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800346a:	f7fe fb9b 	bl	8001ba4 <HAL_GetTick>
 800346e:	1b43      	subs	r3, r0, r5
 8003470:	2b02      	cmp	r3, #2
 8003472:	d82a      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003474:	6833      	ldr	r3, [r6, #0]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	d4f7      	bmi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800347a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800347e:	6862      	ldr	r2, [r4, #4]
 8003480:	071b      	lsls	r3, r3, #28
 8003482:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003486:	4313      	orrs	r3, r2
    __HAL_RCC_PLLI2S_ENABLE();
 8003488:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x148>)
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800348a:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800348e:	2101      	movs	r1, #1
 8003490:	6691      	str	r1, [r2, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8003492:	f7fe fb87 	bl	8001ba4 <HAL_GetTick>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003496:	4e3a      	ldr	r6, [pc, #232]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    tickstart = HAL_GetTick();
 8003498:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800349a:	e004      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800349c:	f7fe fb82 	bl	8001ba4 <HAL_GetTick>
 80034a0:	1b43      	subs	r3, r0, r5
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d811      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a6:	6833      	ldr	r3, [r6, #0]
 80034a8:	011f      	lsls	r7, r3, #4
 80034aa:	d5f7      	bpl.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x68>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	e7c8      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 80034b0:	f7fe fb78 	bl	8001ba4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80034b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80034bc:	079a      	lsls	r2, r3, #30
 80034be:	d43c      	bmi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x106>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fb70 	bl	8001ba4 <HAL_GetTick>
 80034c4:	1b80      	subs	r0, r0, r6
 80034c6:	42b8      	cmp	r0, r7
 80034c8:	d9f7      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x86>
        return HAL_TIMEOUT;
 80034ca:	2003      	movs	r0, #3
}
 80034cc:	b003      	add	sp, #12
 80034ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    PWR->CR |= PWR_CR_DBP;
 80034d2:	4d2c      	ldr	r5, [pc, #176]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d4:	2200      	movs	r2, #0
 80034d6:	9201      	str	r2, [sp, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034da:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80034f2:	f7fe fb57 	bl	8001ba4 <HAL_GetTick>
 80034f6:	4606      	mov	r6, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80034f8:	e004      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe fb53 	bl	8001ba4 <HAL_GetTick>
 80034fe:	1b83      	subs	r3, r0, r6
 8003500:	2b02      	cmp	r3, #2
 8003502:	d8e2      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	05d8      	lsls	r0, r3, #23
 8003508:	d5f7      	bpl.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350a:	4d1d      	ldr	r5, [pc, #116]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800350c:	6923      	ldr	r3, [r4, #16]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350e:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003510:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8003514:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8003518:	d012      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800351a:	428a      	cmp	r2, r1
 800351c:	d010      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800351e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003520:	4a16      	ldr	r2, [pc, #88]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003522:	2101      	movs	r1, #1
 8003524:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800352c:	2100      	movs	r1, #0
 800352e:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8003532:	672b      	str	r3, [r5, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003534:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003536:	07d9      	lsls	r1, r3, #31
 8003538:	d4ba      	bmi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8003540:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8003544:	d00c      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003546:	490e      	ldr	r1, [pc, #56]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003548:	688a      	ldr	r2, [r1, #8]
 800354a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800354e:	608a      	str	r2, [r1, #8]
 8003550:	4a0b      	ldr	r2, [pc, #44]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003552:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	430b      	orrs	r3, r1
 800355a:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	e772      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x12>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003560:	4807      	ldr	r0, [pc, #28]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003562:	6882      	ldr	r2, [r0, #8]
 8003564:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003568:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800356c:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8003570:	430a      	orrs	r2, r1
 8003572:	6082      	str	r2, [r0, #8]
 8003574:	e7ec      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003576:	bf00      	nop
 8003578:	42471000 	.word	0x42471000
 800357c:	42470000 	.word	0x42470000
 8003580:	40023800 	.word	0x40023800
 8003584:	40007000 	.word	0x40007000

08003588 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003588:	2801      	cmp	r0, #1
 800358a:	d001      	beq.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003590:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
 8003592:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003594:	0211      	lsls	r1, r2, #8
 8003596:	d501      	bpl.n	800359c <HAL_RCCEx_GetPeriphCLKFreq+0x14>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003598:	480e      	ldr	r0, [pc, #56]	@ (80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
    {
      break;
    }
  }
  return frequency;
}
 800359a:	4770      	bx	lr
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800359c:	685a      	ldr	r2, [r3, #4]
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035a2:	0252      	lsls	r2, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80035a4:	bf4c      	ite	mi
 80035a6:	4a0c      	ldrmi	r2, [pc, #48]	@ (80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80035a8:	4a0c      	ldrpl	r2, [pc, #48]	@ (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 80035aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ae:	fbb2 f2f3 	udiv	r2, r2, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035b2:	4b07      	ldr	r3, [pc, #28]	@ (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
 80035b4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035bc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80035c0:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035c4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80035c8:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	00bb8000 	.word	0x00bb8000
 80035d8:	017d7840 	.word	0x017d7840
 80035dc:	00f42400 	.word	0x00f42400

080035e0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	2800      	cmp	r0, #0
 80035e2:	f000 8087 	beq.w	80036f4 <HAL_UART_Init+0x114>
{
 80035e6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80035ec:	4604      	mov	r4, r0
 80035ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d079      	beq.n	80036ea <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f6:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f8:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80035fa:	2224      	movs	r2, #36	@ 0x24
 80035fc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003606:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003608:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003610:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003612:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003614:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003616:	4302      	orrs	r2, r0
 8003618:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800361a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800361c:	4302      	orrs	r2, r0
 800361e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003620:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8003624:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003628:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800362a:	430a      	orrs	r2, r1
 800362c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003632:	4931      	ldr	r1, [pc, #196]	@ (80036f8 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003634:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003638:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800363a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800363c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800363e:	d036      	beq.n	80036ae <HAL_UART_Init+0xce>
 8003640:	4a2e      	ldr	r2, [pc, #184]	@ (80036fc <HAL_UART_Init+0x11c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d033      	beq.n	80036ae <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003646:	f7ff fed5 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800364c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003652:	e9d4 5300 	ldrd	r5, r3, [r4]
 8003656:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365a:	d02b      	beq.n	80036b4 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800365c:	009a      	lsls	r2, r3, #2
 800365e:	0f9b      	lsrs	r3, r3, #30
 8003660:	f7fd faa8 	bl	8000bb4 <__aeabi_uldivmod>
 8003664:	4a26      	ldr	r2, [pc, #152]	@ (8003700 <HAL_UART_Init+0x120>)
 8003666:	fba2 1300 	umull	r1, r3, r2, r0
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2164      	movs	r1, #100	@ 0x64
 800366e:	fb01 0013 	mls	r0, r1, r3, r0
 8003672:	0100      	lsls	r0, r0, #4
 8003674:	3032      	adds	r0, #50	@ 0x32
 8003676:	fba2 2000 	umull	r2, r0, r2, r0
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8003680:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003682:	692a      	ldr	r2, [r5, #16]
 8003684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003688:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368a:	696a      	ldr	r2, [r5, #20]
 800368c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003690:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8003692:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003696:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800369c:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369e:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a4:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 80036a8:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036aa:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80036ae:	f7ff feb1 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 80036b2:	e7ca      	b.n	800364a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b4:	18da      	adds	r2, r3, r3
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	415b      	adcs	r3, r3
 80036bc:	f7fd fa7a 	bl	8000bb4 <__aeabi_uldivmod>
 80036c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <HAL_UART_Init+0x120>)
 80036c2:	fba2 3100 	umull	r3, r1, r2, r0
 80036c6:	0949      	lsrs	r1, r1, #5
 80036c8:	2364      	movs	r3, #100	@ 0x64
 80036ca:	fb03 0311 	mls	r3, r3, r1, r0
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	3332      	adds	r3, #50	@ 0x32
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80036e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036e4:	4413      	add	r3, r2
 80036e6:	60ab      	str	r3, [r5, #8]
 80036e8:	e7cb      	b.n	8003682 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 80036ea:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80036ee:	f7fe f92d 	bl	800194c <HAL_UART_MspInit>
 80036f2:	e780      	b.n	80035f6 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 80036f4:	2001      	movs	r0, #1
}
 80036f6:	4770      	bx	lr
 80036f8:	40011000 	.word	0x40011000
 80036fc:	40011400 	.word	0x40011400
 8003700:	51eb851f 	.word	0x51eb851f

08003704 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop

0800370c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <UART_DMAError>:
{
 8003710:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003712:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003714:	6803      	ldr	r3, [r0, #0]
 8003716:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003718:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800371c:	2a21      	cmp	r2, #33	@ 0x21
 800371e:	d00b      	beq.n	8003738 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003720:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003722:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8003726:	2a22      	cmp	r2, #34	@ 0x22
 8003728:	d01e      	beq.n	8003768 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800372a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8003732:	f7ff ffeb 	bl	800370c <HAL_UART_ErrorCallback>
}
 8003736:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003738:	0609      	lsls	r1, r1, #24
 800373a:	d5f1      	bpl.n	8003720 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800373c:	2200      	movs	r2, #0
 800373e:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	f103 020c 	add.w	r2, r3, #12
 8003744:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003748:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	f103 0c0c 	add.w	ip, r3, #12
 8003750:	e84c 2100 	strex	r1, r2, [ip]
 8003754:	2900      	cmp	r1, #0
 8003756:	d1f3      	bne.n	8003740 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8003758:	2220      	movs	r2, #32
 800375a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375e:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003760:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8003764:	2a22      	cmp	r2, #34	@ 0x22
 8003766:	d1e0      	bne.n	800372a <UART_DMAError+0x1a>
 8003768:	064a      	lsls	r2, r1, #25
 800376a:	d5de      	bpl.n	800372a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800376c:	2200      	movs	r2, #0
 800376e:	85c2      	strh	r2, [r0, #46]	@ 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	f103 020c 	add.w	r2, r3, #12
 8003774:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003778:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	f103 0c0c 	add.w	ip, r3, #12
 8003780:	e84c 2100 	strex	r1, r2, [ip]
 8003784:	2900      	cmp	r1, #0
 8003786:	d1f3      	bne.n	8003770 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	f103 0214 	add.w	r2, r3, #20
 800378c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	f103 0c14 	add.w	ip, r3, #20
 8003798:	e84c 2100 	strex	r1, r2, [ip]
 800379c:	2900      	cmp	r1, #0
 800379e:	d1f3      	bne.n	8003788 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80037a2:	2a01      	cmp	r2, #1
 80037a4:	d005      	beq.n	80037b2 <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a8:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80037aa:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80037b0:	e7bb      	b.n	800372a <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	f103 020c 	add.w	r2, r3, #12
 80037b6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	f103 0c0c 	add.w	ip, r3, #12
 80037c2:	e84c 2100 	strex	r1, r2, [ip]
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d1f3      	bne.n	80037b2 <UART_DMAError+0xa2>
 80037ca:	e7ec      	b.n	80037a6 <UART_DMAError+0x96>

080037cc <UART_DMAAbortOnError>:
{
 80037cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ce:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037d4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80037d6:	f7ff ff99 	bl	800370c <HAL_UART_ErrorCallback>
}
 80037da:	bd08      	pop	{r3, pc}

080037dc <HAL_UARTEx_RxEventCallback>:
}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80037e2:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80037e4:	2301      	movs	r3, #1
 80037e6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d002      	beq.n	80037f4 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80037ee:	f7ff ff8b 	bl	8003708 <HAL_UART_RxHalfCpltCallback>
}
 80037f2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80037f4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80037f6:	0849      	lsrs	r1, r1, #1
 80037f8:	f7ff fff0 	bl	80037dc <HAL_UARTEx_RxEventCallback>
}
 80037fc:	bd08      	pop	{r3, pc}
 80037fe:	bf00      	nop

08003800 <UART_DMAReceiveCplt>:
{
 8003800:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003802:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 800380c:	d12b      	bne.n	8003866 <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 800380e:	6803      	ldr	r3, [r0, #0]
 8003810:	85c2      	strh	r2, [r0, #46]	@ 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	f103 020c 	add.w	r2, r3, #12
 8003816:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	f103 0c0c 	add.w	ip, r3, #12
 8003822:	e84c 2100 	strex	r1, r2, [ip]
 8003826:	2900      	cmp	r1, #0
 8003828:	d1f3      	bne.n	8003812 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	f103 0214 	add.w	r2, r3, #20
 800382e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	f103 0c14 	add.w	ip, r3, #20
 800383a:	e84c 2100 	strex	r1, r2, [ip]
 800383e:	2900      	cmp	r1, #0
 8003840:	d1f3      	bne.n	800382a <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	f103 0214 	add.w	r2, r3, #20
 8003846:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	f103 0c14 	add.w	ip, r3, #20
 8003852:	e84c 2100 	strex	r1, r2, [ip]
 8003856:	2900      	cmp	r1, #0
 8003858:	d1f3      	bne.n	8003842 <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 800385a:	2220      	movs	r2, #32
 800385c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003862:	2a01      	cmp	r2, #1
 8003864:	d007      	beq.n	8003876 <UART_DMAReceiveCplt+0x76>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003866:	2300      	movs	r3, #0
 8003868:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800386c:	2b01      	cmp	r3, #1
 800386e:	d00f      	beq.n	8003890 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8003870:	f7fd fc36 	bl	80010e0 <HAL_UART_RxCpltCallback>
}
 8003874:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	f103 020c 	add.w	r2, r3, #12
 800387a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f103 0c0c 	add.w	ip, r3, #12
 8003886:	e84c 2100 	strex	r1, r2, [ip]
 800388a:	2900      	cmp	r1, #0
 800388c:	d1f3      	bne.n	8003876 <UART_DMAReceiveCplt+0x76>
 800388e:	e7ea      	b.n	8003866 <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003890:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003892:	f7ff ffa3 	bl	80037dc <HAL_UARTEx_RxEventCallback>
}
 8003896:	bd08      	pop	{r3, pc}

08003898 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800389a:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800389c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	d042      	beq.n	800392a <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d039      	beq.n	800391c <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a8:	684b      	ldr	r3, [r1, #4]
 80038aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ae:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80038b0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80038b2:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 80038b4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 80038b6:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d132      	bne.n	8003928 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038c2:	6802      	ldr	r2, [r0, #0]
 80038c4:	68d1      	ldr	r1, [r2, #12]
 80038c6:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80038ca:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038cc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ce:	68d1      	ldr	r1, [r2, #12]
 80038d0:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80038d4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038d6:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80038d8:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038dc:	f021 0101 	bic.w	r1, r1, #1
 80038e0:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80038e2:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e6:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80038ea:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80038ec:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	d125      	bne.n	800393c <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f0:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	f102 030c 	add.w	r3, r2, #12
 80038f6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	f102 0c0c 	add.w	ip, r2, #12
 8003902:	e84c 3100 	strex	r1, r3, [ip]
 8003906:	2900      	cmp	r1, #0
 8003908:	d1f3      	bne.n	80038f2 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	06db      	lsls	r3, r3, #27
 800390e:	d41a      	bmi.n	8003946 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003910:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003912:	f7ff ff63 	bl	80037dc <HAL_UARTEx_RxEventCallback>
}
 8003916:	b003      	add	sp, #12
 8003918:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800391c:	6903      	ldr	r3, [r0, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1c2      	bne.n	80038a8 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003922:	684b      	ldr	r3, [r1, #4]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e7c2      	b.n	80038ae <UART_Receive_IT.part.0.isra.0+0x16>
 8003928:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392a:	6903      	ldr	r3, [r0, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f8      	bne.n	8003922 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003930:	684b      	ldr	r3, [r1, #4]
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 800393a:	e7bb      	b.n	80038b4 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 800393c:	f7fd fbd0 	bl	80010e0 <HAL_UART_RxCpltCallback>
}
 8003940:	b003      	add	sp, #12
 8003942:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003946:	2300      	movs	r3, #0
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	6813      	ldr	r3, [r2, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	6853      	ldr	r3, [r2, #4]
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	9b01      	ldr	r3, [sp, #4]
 8003954:	e7dc      	b.n	8003910 <UART_Receive_IT.part.0.isra.0+0x78>
 8003956:	bf00      	nop

08003958 <HAL_UART_IRQHandler>:
{
 8003958:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800395a:	6803      	ldr	r3, [r0, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395e:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003960:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8003962:	f012 0f0f 	tst.w	r2, #15
{
 8003966:	b083      	sub	sp, #12
 8003968:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800396a:	d170      	bne.n	8003a4e <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396c:	0691      	lsls	r1, r2, #26
 800396e:	d502      	bpl.n	8003976 <HAL_UART_IRQHandler+0x1e>
 8003970:	06a9      	lsls	r1, r5, #26
 8003972:	f100 80a1 	bmi.w	8003ab8 <HAL_UART_IRQHandler+0x160>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003976:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003978:	2901      	cmp	r1, #1
 800397a:	d00b      	beq.n	8003994 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800397c:	0610      	lsls	r0, r2, #24
 800397e:	d502      	bpl.n	8003986 <HAL_UART_IRQHandler+0x2e>
 8003980:	0629      	lsls	r1, r5, #24
 8003982:	f100 80a3 	bmi.w	8003acc <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003986:	0652      	lsls	r2, r2, #25
 8003988:	d502      	bpl.n	8003990 <HAL_UART_IRQHandler+0x38>
 800398a:	0668      	lsls	r0, r5, #25
 800398c:	f100 80bd 	bmi.w	8003b0a <HAL_UART_IRQHandler+0x1b2>
}
 8003990:	b003      	add	sp, #12
 8003992:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003994:	06d0      	lsls	r0, r2, #27
 8003996:	d5f1      	bpl.n	800397c <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003998:	06e9      	lsls	r1, r5, #27
 800399a:	d5ef      	bpl.n	800397c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800399c:	2200      	movs	r2, #0
 800399e:	9201      	str	r2, [sp, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	9201      	str	r2, [sp, #4]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	9201      	str	r2, [sp, #4]
 80039a8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	0655      	lsls	r5, r2, #25
 80039ae:	f140 8136 	bpl.w	8003c1e <HAL_UART_IRQHandler+0x2c6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039b4:	6802      	ldr	r2, [r0, #0]
 80039b6:	6852      	ldr	r2, [r2, #4]
 80039b8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d0e8      	beq.n	8003990 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039be:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80039c0:	4291      	cmp	r1, r2
 80039c2:	d9e5      	bls.n	8003990 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80039c4:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c6:	69c2      	ldr	r2, [r0, #28]
 80039c8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80039cc:	d036      	beq.n	8003a3c <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	f103 020c 	add.w	r2, r3, #12
 80039d2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	f103 050c 	add.w	r5, r3, #12
 80039de:	e845 2100 	strex	r1, r2, [r5]
 80039e2:	2900      	cmp	r1, #0
 80039e4:	d1f3      	bne.n	80039ce <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	f103 0214 	add.w	r2, r3, #20
 80039ea:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	f103 0514 	add.w	r5, r3, #20
 80039f6:	e845 2100 	strex	r1, r2, [r5]
 80039fa:	2900      	cmp	r1, #0
 80039fc:	d1f3      	bne.n	80039e6 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	f103 0214 	add.w	r2, r3, #20
 8003a02:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	f103 0514 	add.w	r5, r3, #20
 8003a0e:	e845 2100 	strex	r1, r2, [r5]
 8003a12:	2900      	cmp	r1, #0
 8003a14:	d1f3      	bne.n	80039fe <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8003a16:	2220      	movs	r2, #32
 8003a18:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1c:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	f103 020c 	add.w	r2, r3, #12
 8003a22:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a26:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	f103 050c 	add.w	r5, r3, #12
 8003a2e:	e845 2100 	strex	r1, r2, [r5]
 8003a32:	2900      	cmp	r1, #0
 8003a34:	d1f3      	bne.n	8003a1e <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a36:	f7fe fc47 	bl	80022c8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a3a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a40:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003a42:	1ac9      	subs	r1, r1, r3
 8003a44:	4620      	mov	r0, r4
 8003a46:	b289      	uxth	r1, r1
 8003a48:	f7ff fec8 	bl	80037dc <HAL_UARTEx_RxEventCallback>
 8003a4c:	e7a0      	b.n	8003990 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a4e:	f011 0101 	ands.w	r1, r1, #1
 8003a52:	d178      	bne.n	8003b46 <HAL_UART_IRQHandler+0x1ee>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a54:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8003a58:	d08d      	beq.n	8003976 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a5a:	07d0      	lsls	r0, r2, #31
 8003a5c:	d50a      	bpl.n	8003a74 <HAL_UART_IRQHandler+0x11c>
 8003a5e:	05e8      	lsls	r0, r5, #23
 8003a60:	f140 80d9 	bpl.w	8003c16 <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a64:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a66:	f040 0001 	orr.w	r0, r0, #1
 8003a6a:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a6c:	0750      	lsls	r0, r2, #29
 8003a6e:	d55b      	bpl.n	8003b28 <HAL_UART_IRQHandler+0x1d0>
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d16c      	bne.n	8003b4e <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a74:	0790      	lsls	r0, r2, #30
 8003a76:	d570      	bpl.n	8003b5a <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a78:	0710      	lsls	r0, r2, #28
 8003a7a:	f100 80c9 	bmi.w	8003c10 <HAL_UART_IRQHandler+0x2b8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a80:	2900      	cmp	r1, #0
 8003a82:	d085      	beq.n	8003990 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a84:	0691      	lsls	r1, r2, #26
 8003a86:	d509      	bpl.n	8003a9c <HAL_UART_IRQHandler+0x144>
 8003a88:	06aa      	lsls	r2, r5, #26
 8003a8a:	d507      	bpl.n	8003a9c <HAL_UART_IRQHandler+0x144>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a8c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8003a90:	2a22      	cmp	r2, #34	@ 0x22
 8003a92:	d103      	bne.n	8003a9c <HAL_UART_IRQHandler+0x144>
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff feff 	bl	8003898 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a9e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aa4:	f001 0108 	and.w	r1, r1, #8
 8003aa8:	ea52 0501 	orrs.w	r5, r2, r1
 8003aac:	d15c      	bne.n	8003b68 <HAL_UART_IRQHandler+0x210>
        HAL_UART_ErrorCallback(huart);
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff fe2c 	bl	800370c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	6465      	str	r5, [r4, #68]	@ 0x44
 8003ab6:	e76b      	b.n	8003990 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ab8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003abc:	2b22      	cmp	r3, #34	@ 0x22
 8003abe:	f47f af67 	bne.w	8003990 <HAL_UART_IRQHandler+0x38>
}
 8003ac2:	b003      	add	sp, #12
 8003ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ac8:	f7ff bee6 	b.w	8003898 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003acc:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8003ad0:	2a21      	cmp	r2, #33	@ 0x21
 8003ad2:	f47f af5d 	bne.w	8003990 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad6:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ad8:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ada:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003ade:	f000 80d9 	beq.w	8003c94 <HAL_UART_IRQHandler+0x33c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ae2:	1c51      	adds	r1, r2, #1
 8003ae4:	6221      	str	r1, [r4, #32]
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003aea:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003aec:	3a01      	subs	r2, #1
 8003aee:	b292      	uxth	r2, r2
 8003af0:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	f47f af4c 	bne.w	8003990 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003afe:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	e742      	b.n	8003990 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b0a:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b12:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003b14:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003b16:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003b1a:	f7ff fdf3 	bl	8003704 <HAL_UART_TxCpltCallback>
    return;
 8003b1e:	e737      	b.n	8003990 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b20:	05e8      	lsls	r0, r5, #23
 8003b22:	d49f      	bmi.n	8003a64 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b24:	0750      	lsls	r0, r2, #29
 8003b26:	d412      	bmi.n	8003b4e <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b28:	0790      	lsls	r0, r2, #30
 8003b2a:	d516      	bpl.n	8003b5a <HAL_UART_IRQHandler+0x202>
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	d0a3      	beq.n	8003a78 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003b32:	f041 0104 	orr.w	r1, r1, #4
 8003b36:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b38:	0711      	lsls	r1, r2, #28
 8003b3a:	d5a0      	bpl.n	8003a7e <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003b3e:	f041 0108 	orr.w	r1, r1, #8
 8003b42:	6461      	str	r1, [r4, #68]	@ 0x44
 8003b44:	e79b      	b.n	8003a7e <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b46:	07d0      	lsls	r0, r2, #31
 8003b48:	d4ea      	bmi.n	8003b20 <HAL_UART_IRQHandler+0x1c8>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4a:	0750      	lsls	r0, r2, #29
 8003b4c:	d55b      	bpl.n	8003c06 <HAL_UART_IRQHandler+0x2ae>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b4e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b50:	f040 0002 	orr.w	r0, r0, #2
 8003b54:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b56:	0790      	lsls	r0, r2, #30
 8003b58:	d4ea      	bmi.n	8003b30 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b5a:	0710      	lsls	r0, r2, #28
 8003b5c:	d58f      	bpl.n	8003a7e <HAL_UART_IRQHandler+0x126>
 8003b5e:	f005 0020 	and.w	r0, r5, #32
 8003b62:	4308      	orrs	r0, r1
 8003b64:	d08b      	beq.n	8003a7e <HAL_UART_IRQHandler+0x126>
 8003b66:	e7e9      	b.n	8003b3c <HAL_UART_IRQHandler+0x1e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	f103 020c 	add.w	r2, r3, #12
 8003b6c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b70:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	f103 000c 	add.w	r0, r3, #12
 8003b78:	e840 2100 	strex	r1, r2, [r0]
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	d1f3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	f103 0214 	add.w	r2, r3, #20
 8003b84:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	f103 0014 	add.w	r0, r3, #20
 8003b90:	e840 2100 	strex	r1, r2, [r0]
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d1f3      	bne.n	8003b80 <HAL_UART_IRQHandler+0x228>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003b9a:	2a01      	cmp	r2, #1
 8003b9c:	d022      	beq.n	8003be4 <HAL_UART_IRQHandler+0x28c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	0655      	lsls	r5, r2, #25
 8003bac:	d527      	bpl.n	8003bfe <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	f103 0214 	add.w	r2, r3, #20
 8003bb2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	f103 0014 	add.w	r0, r3, #20
 8003bbe:	e840 2100 	strex	r1, r2, [r0]
 8003bc2:	2900      	cmp	r1, #0
 8003bc4:	d1f3      	bne.n	8003bae <HAL_UART_IRQHandler+0x256>
          if (huart->hdmarx != NULL)
 8003bc6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003bc8:	b1c8      	cbz	r0, 8003bfe <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bca:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_UART_IRQHandler+0x354>)
 8003bcc:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bce:	f7fe fbc5 	bl	800235c <HAL_DMA_Abort_IT>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	f43f aedc 	beq.w	8003990 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003bda:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8003bdc:	b003      	add	sp, #12
 8003bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be2:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	f103 020c 	add.w	r2, r3, #12
 8003be8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	f103 000c 	add.w	r0, r3, #12
 8003bf4:	e840 2100 	strex	r1, r2, [r0]
 8003bf8:	2900      	cmp	r1, #0
 8003bfa:	d1f3      	bne.n	8003be4 <HAL_UART_IRQHandler+0x28c>
 8003bfc:	e7cf      	b.n	8003b9e <HAL_UART_IRQHandler+0x246>
            HAL_UART_ErrorCallback(huart);
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7ff fd84 	bl	800370c <HAL_UART_ErrorCallback>
 8003c04:	e6c4      	b.n	8003990 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c06:	0791      	lsls	r1, r2, #30
 8003c08:	d492      	bmi.n	8003b30 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c0a:	0711      	lsls	r1, r2, #28
 8003c0c:	d496      	bmi.n	8003b3c <HAL_UART_IRQHandler+0x1e4>
 8003c0e:	e736      	b.n	8003a7e <HAL_UART_IRQHandler+0x126>
 8003c10:	06a9      	lsls	r1, r5, #26
 8003c12:	d493      	bmi.n	8003b3c <HAL_UART_IRQHandler+0x1e4>
 8003c14:	e733      	b.n	8003a7e <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c16:	0750      	lsls	r0, r2, #29
 8003c18:	f53f af2c 	bmi.w	8003a74 <HAL_UART_IRQHandler+0x11c>
 8003c1c:	e784      	b.n	8003b28 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c1e:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8003c20:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c22:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8003c24:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c26:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	f43f aeb1 	beq.w	8003990 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c2e:	1a41      	subs	r1, r0, r1
 8003c30:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003c32:	2900      	cmp	r1, #0
 8003c34:	f43f aeac 	beq.w	8003990 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	f103 020c 	add.w	r2, r3, #12
 8003c3c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	f103 050c 	add.w	r5, r3, #12
 8003c48:	e845 2000 	strex	r0, r2, [r5]
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1f3      	bne.n	8003c38 <HAL_UART_IRQHandler+0x2e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	f103 0214 	add.w	r2, r3, #20
 8003c54:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	f103 0514 	add.w	r5, r3, #20
 8003c60:	e845 2000 	strex	r0, r2, [r5]
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d1f3      	bne.n	8003c50 <HAL_UART_IRQHandler+0x2f8>
        huart->RxState = HAL_UART_STATE_READY;
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f103 020c 	add.w	r2, r3, #12
 8003c74:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c78:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	f103 050c 	add.w	r5, r3, #12
 8003c80:	e845 2000 	strex	r0, r2, [r5]
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d1f3      	bne.n	8003c70 <HAL_UART_IRQHandler+0x318>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff fda5 	bl	80037dc <HAL_UARTEx_RxEventCallback>
 8003c92:	e67d      	b.n	8003990 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	6921      	ldr	r1, [r4, #16]
 8003c96:	2900      	cmp	r1, #0
 8003c98:	f47f af23 	bne.w	8003ae2 <HAL_UART_IRQHandler+0x18a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c9c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003ca0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003ca4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ca6:	6222      	str	r2, [r4, #32]
 8003ca8:	e71f      	b.n	8003aea <HAL_UART_IRQHandler+0x192>
 8003caa:	bf00      	nop
 8003cac:	080037cd 	.word	0x080037cd

08003cb0 <UART_Start_Receive_DMA>:
{
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb6:	2222      	movs	r2, #34	@ 0x22
{
 8003cb8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->pRxBuffPtr = pData;
 8003cbc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cbe:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->RxXferSize = Size;
 8003cc2:	8583      	strh	r3, [r0, #44]	@ 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cc4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003cc6:	4e1e      	ldr	r6, [pc, #120]	@ (8003d40 <UART_Start_Receive_DMA+0x90>)
  huart->hdmarx->XferAbortCallback = NULL;
 8003cc8:	6505      	str	r5, [r0, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003cca:	460a      	mov	r2, r1
 8003ccc:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cce:	63c6      	str	r6, [r0, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cd0:	4e1c      	ldr	r6, [pc, #112]	@ (8003d44 <UART_Start_Receive_DMA+0x94>)
 8003cd2:	6406      	str	r6, [r0, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cd4:	4e1c      	ldr	r6, [pc, #112]	@ (8003d48 <UART_Start_Receive_DMA+0x98>)
 8003cd6:	64c6      	str	r6, [r0, #76]	@ 0x4c
{
 8003cd8:	b082      	sub	sp, #8
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003cda:	3104      	adds	r1, #4
 8003cdc:	f7fe fab8 	bl	8002250 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	9501      	str	r5, [sp, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	9201      	str	r2, [sp, #4]
 8003ce8:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cea:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003cec:	9101      	str	r1, [sp, #4]
 8003cee:	9901      	ldr	r1, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cf0:	b15a      	cbz	r2, 8003d0a <UART_Start_Receive_DMA+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	f103 020c 	add.w	r2, r3, #12
 8003cf6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	f103 000c 	add.w	r0, r3, #12
 8003d02:	e840 2100 	strex	r1, r2, [r0]
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d1f3      	bne.n	8003cf2 <UART_Start_Receive_DMA+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	f103 0214 	add.w	r2, r3, #20
 8003d0e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	f103 0014 	add.w	r0, r3, #20
 8003d1a:	e840 2100 	strex	r1, r2, [r0]
 8003d1e:	2900      	cmp	r1, #0
 8003d20:	d1f3      	bne.n	8003d0a <UART_Start_Receive_DMA+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	f103 0214 	add.w	r2, r3, #20
 8003d26:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	f103 0114 	add.w	r1, r3, #20
 8003d32:	e841 2000 	strex	r0, r2, [r1]
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d1f3      	bne.n	8003d22 <UART_Start_Receive_DMA+0x72>
}
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
 8003d3e:	bf00      	nop
 8003d40:	08003801 	.word	0x08003801
 8003d44:	080037e1 	.word	0x080037e1
 8003d48:	08003711 	.word	0x08003711

08003d4c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4c:	f890 c042 	ldrb.w	ip, [r0, #66]	@ 0x42
 8003d50:	f1bc 0f20 	cmp.w	ip, #32
 8003d54:	d105      	bne.n	8003d62 <HAL_UART_Receive_DMA+0x16>
{
 8003d56:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8003d58:	b101      	cbz	r1, 8003d5c <HAL_UART_Receive_DMA+0x10>
 8003d5a:	b922      	cbnz	r2, 8003d66 <HAL_UART_Receive_DMA+0x1a>
      return HAL_ERROR;
 8003d5c:	2001      	movs	r0, #1
}
 8003d5e:	bc30      	pop	{r4, r5}
 8003d60:	4770      	bx	lr
    return HAL_BUSY;
 8003d62:	2002      	movs	r0, #2
}
 8003d64:	4770      	bx	lr
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	2400      	movs	r4, #0
 8003d68:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8003d6a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d6c:	f7ff bfa0 	b.w	8003cb0 <UART_Start_Receive_DMA>

08003d70 <__errno>:
 8003d70:	4b01      	ldr	r3, [pc, #4]	@ (8003d78 <__errno+0x8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003db4 <__libc_init_array+0x38>)
 8003d80:	4c0d      	ldr	r4, [pc, #52]	@ (8003db8 <__libc_init_array+0x3c>)
 8003d82:	1b64      	subs	r4, r4, r5
 8003d84:	10a4      	asrs	r4, r4, #2
 8003d86:	2600      	movs	r6, #0
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8003dbc <__libc_init_array+0x40>)
 8003d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003dc0 <__libc_init_array+0x44>)
 8003d90:	f000 fa6e 	bl	8004270 <_init>
 8003d94:	1b64      	subs	r4, r4, r5
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	2600      	movs	r6, #0
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	080052e0 	.word	0x080052e0
 8003db8:	080052e0 	.word	0x080052e0
 8003dbc:	080052e0 	.word	0x080052e0
 8003dc0:	080052e4 	.word	0x080052e4
 8003dc4:	00000000 	.word	0x00000000

08003dc8 <exp>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	ed2d 8b02 	vpush	{d8}
 8003dce:	ec55 4b10 	vmov	r4, r5, d0
 8003dd2:	f000 f895 	bl	8003f00 <__ieee754_exp>
 8003dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8003dda:	eef0 8a60 	vmov.f32	s17, s1
 8003dde:	ec45 4b10 	vmov	d0, r4, r5
 8003de2:	f000 f839 	bl	8003e58 <finite>
 8003de6:	b168      	cbz	r0, 8003e04 <exp+0x3c>
 8003de8:	a317      	add	r3, pc, #92	@ (adr r3, 8003e48 <exp+0x80>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	4620      	mov	r0, r4
 8003df0:	4629      	mov	r1, r5
 8003df2:	f7fc fe3d 	bl	8000a70 <__aeabi_dcmpgt>
 8003df6:	b160      	cbz	r0, 8003e12 <exp+0x4a>
 8003df8:	f7ff ffba 	bl	8003d70 <__errno>
 8003dfc:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8003e38 <exp+0x70>
 8003e00:	2322      	movs	r3, #34	@ 0x22
 8003e02:	6003      	str	r3, [r0, #0]
 8003e04:	eeb0 0a48 	vmov.f32	s0, s16
 8003e08:	eef0 0a68 	vmov.f32	s1, s17
 8003e0c:	ecbd 8b02 	vpop	{d8}
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	a30f      	add	r3, pc, #60	@ (adr r3, 8003e50 <exp+0x88>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	4620      	mov	r0, r4
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	f7fc fe0a 	bl	8000a34 <__aeabi_dcmplt>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0ef      	beq.n	8003e04 <exp+0x3c>
 8003e24:	f7ff ffa4 	bl	8003d70 <__errno>
 8003e28:	2322      	movs	r3, #34	@ 0x22
 8003e2a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8003e40 <exp+0x78>
 8003e2e:	6003      	str	r3, [r0, #0]
 8003e30:	e7e8      	b.n	8003e04 <exp+0x3c>
 8003e32:	bf00      	nop
 8003e34:	f3af 8000 	nop.w
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	7ff00000 	.word	0x7ff00000
	...
 8003e48:	fefa39ef 	.word	0xfefa39ef
 8003e4c:	40862e42 	.word	0x40862e42
 8003e50:	d52d3051 	.word	0xd52d3051
 8003e54:	c0874910 	.word	0xc0874910

08003e58 <finite>:
 8003e58:	b082      	sub	sp, #8
 8003e5a:	ed8d 0b00 	vstr	d0, [sp]
 8003e5e:	9801      	ldr	r0, [sp, #4]
 8003e60:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003e64:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003e68:	0fc0      	lsrs	r0, r0, #31
 8003e6a:	b002      	add	sp, #8
 8003e6c:	4770      	bx	lr
	...

08003e70 <round>:
 8003e70:	ec51 0b10 	vmov	r0, r1, d0
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8003e7a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8003e7e:	2a13      	cmp	r2, #19
 8003e80:	460b      	mov	r3, r1
 8003e82:	4605      	mov	r5, r0
 8003e84:	dc1b      	bgt.n	8003ebe <round+0x4e>
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	da0b      	bge.n	8003ea2 <round+0x32>
 8003e8a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8003e8e:	3201      	adds	r2, #1
 8003e90:	bf04      	itt	eq
 8003e92:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e96:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	e015      	b.n	8003ece <round+0x5e>
 8003ea2:	4c15      	ldr	r4, [pc, #84]	@ (8003ef8 <round+0x88>)
 8003ea4:	4114      	asrs	r4, r2
 8003ea6:	ea04 0601 	and.w	r6, r4, r1
 8003eaa:	4306      	orrs	r6, r0
 8003eac:	d00f      	beq.n	8003ece <round+0x5e>
 8003eae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003eb2:	fa41 f202 	asr.w	r2, r1, r2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	ea23 0304 	bic.w	r3, r3, r4
 8003ebc:	e7ed      	b.n	8003e9a <round+0x2a>
 8003ebe:	2a33      	cmp	r2, #51	@ 0x33
 8003ec0:	dd08      	ble.n	8003ed4 <round+0x64>
 8003ec2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003ec6:	d102      	bne.n	8003ece <round+0x5e>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f7fc f98b 	bl	80001e4 <__adddf3>
 8003ece:	ec41 0b10 	vmov	d0, r0, r1
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8003ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8003edc:	40f4      	lsrs	r4, r6
 8003ede:	4204      	tst	r4, r0
 8003ee0:	d0f5      	beq.n	8003ece <round+0x5e>
 8003ee2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	408a      	lsls	r2, r1
 8003eea:	1952      	adds	r2, r2, r5
 8003eec:	bf28      	it	cs
 8003eee:	3301      	addcs	r3, #1
 8003ef0:	ea22 0204 	bic.w	r2, r2, r4
 8003ef4:	e7d2      	b.n	8003e9c <round+0x2c>
 8003ef6:	bf00      	nop
 8003ef8:	000fffff 	.word	0x000fffff
 8003efc:	00000000 	.word	0x00000000

08003f00 <__ieee754_exp>:
 8003f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	ec55 4b10 	vmov	r4, r5, d0
 8003f08:	49b1      	ldr	r1, [pc, #708]	@ (80041d0 <__ieee754_exp+0x2d0>)
 8003f0a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003f0e:	428a      	cmp	r2, r1
 8003f10:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8003f14:	d936      	bls.n	8003f84 <__ieee754_exp+0x84>
 8003f16:	49af      	ldr	r1, [pc, #700]	@ (80041d4 <__ieee754_exp+0x2d4>)
 8003f18:	428a      	cmp	r2, r1
 8003f1a:	d914      	bls.n	8003f46 <__ieee754_exp+0x46>
 8003f1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003f20:	4323      	orrs	r3, r4
 8003f22:	4622      	mov	r2, r4
 8003f24:	d007      	beq.n	8003f36 <__ieee754_exp+0x36>
 8003f26:	462b      	mov	r3, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	f7fc f95a 	bl	80001e4 <__adddf3>
 8003f30:	4604      	mov	r4, r0
 8003f32:	460d      	mov	r5, r1
 8003f34:	e002      	b.n	8003f3c <__ieee754_exp+0x3c>
 8003f36:	2e00      	cmp	r6, #0
 8003f38:	f040 8118 	bne.w	800416c <__ieee754_exp+0x26c>
 8003f3c:	ec45 4b10 	vmov	d0, r4, r5
 8003f40:	b004      	add	sp, #16
 8003f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f46:	a38c      	add	r3, pc, #560	@ (adr r3, 8004178 <__ieee754_exp+0x278>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7fc fd8e 	bl	8000a70 <__aeabi_dcmpgt>
 8003f54:	4607      	mov	r7, r0
 8003f56:	b128      	cbz	r0, 8003f64 <__ieee754_exp+0x64>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	b004      	add	sp, #16
 8003f5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	f000 b97e 	b.w	8004260 <__math_oflow>
 8003f64:	a386      	add	r3, pc, #536	@ (adr r3, 8004180 <__ieee754_exp+0x280>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fd61 	bl	8000a34 <__aeabi_dcmplt>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	f000 8087 	beq.w	8004086 <__ieee754_exp+0x186>
 8003f78:	4638      	mov	r0, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	f000 b966 	b.w	8004250 <__math_uflow>
 8003f84:	4b94      	ldr	r3, [pc, #592]	@ (80041d8 <__ieee754_exp+0x2d8>)
 8003f86:	429a      	cmp	r2, r3
 8003f88:	f240 80a9 	bls.w	80040de <__ieee754_exp+0x1de>
 8003f8c:	4b93      	ldr	r3, [pc, #588]	@ (80041dc <__ieee754_exp+0x2dc>)
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d879      	bhi.n	8004086 <__ieee754_exp+0x186>
 8003f92:	4b93      	ldr	r3, [pc, #588]	@ (80041e0 <__ieee754_exp+0x2e0>)
 8003f94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc f91e 	bl	80001e0 <__aeabi_dsub>
 8003fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80041e4 <__ieee754_exp+0x2e4>)
 8003fa6:	00f7      	lsls	r7, r6, #3
 8003fa8:	443b      	add	r3, r7
 8003faa:	ed93 7b00 	vldr	d7, [r3]
 8003fae:	ed8d 7b00 	vstr	d7, [sp]
 8003fb2:	f1c6 0a01 	rsb	sl, r6, #1
 8003fb6:	4680      	mov	r8, r0
 8003fb8:	4689      	mov	r9, r1
 8003fba:	ebaa 0a06 	sub.w	sl, sl, r6
 8003fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	f7fc f90b 	bl	80001e0 <__aeabi_dsub>
 8003fca:	4604      	mov	r4, r0
 8003fcc:	460d      	mov	r5, r1
 8003fce:	4622      	mov	r2, r4
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f7fc fabb 	bl	8000550 <__aeabi_dmul>
 8003fda:	a36b      	add	r3, pc, #428	@ (adr r3, 8004188 <__ieee754_exp+0x288>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	460f      	mov	r7, r1
 8003fe4:	f7fc fab4 	bl	8000550 <__aeabi_dmul>
 8003fe8:	a369      	add	r3, pc, #420	@ (adr r3, 8004190 <__ieee754_exp+0x290>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc f8f7 	bl	80001e0 <__aeabi_dsub>
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	f7fc faab 	bl	8000550 <__aeabi_dmul>
 8003ffa:	a367      	add	r3, pc, #412	@ (adr r3, 8004198 <__ieee754_exp+0x298>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc f8f0 	bl	80001e4 <__adddf3>
 8004004:	4632      	mov	r2, r6
 8004006:	463b      	mov	r3, r7
 8004008:	f7fc faa2 	bl	8000550 <__aeabi_dmul>
 800400c:	a364      	add	r3, pc, #400	@ (adr r3, 80041a0 <__ieee754_exp+0x2a0>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc f8e5 	bl	80001e0 <__aeabi_dsub>
 8004016:	4632      	mov	r2, r6
 8004018:	463b      	mov	r3, r7
 800401a:	f7fc fa99 	bl	8000550 <__aeabi_dmul>
 800401e:	a362      	add	r3, pc, #392	@ (adr r3, 80041a8 <__ieee754_exp+0x2a8>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc f8de 	bl	80001e4 <__adddf3>
 8004028:	4632      	mov	r2, r6
 800402a:	463b      	mov	r3, r7
 800402c:	f7fc fa90 	bl	8000550 <__aeabi_dmul>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4620      	mov	r0, r4
 8004036:	4629      	mov	r1, r5
 8004038:	f7fc f8d2 	bl	80001e0 <__aeabi_dsub>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4606      	mov	r6, r0
 8004042:	460f      	mov	r7, r1
 8004044:	4620      	mov	r0, r4
 8004046:	4629      	mov	r1, r5
 8004048:	f7fc fa82 	bl	8000550 <__aeabi_dmul>
 800404c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004050:	f1ba 0f00 	cmp.w	sl, #0
 8004054:	d15c      	bne.n	8004110 <__ieee754_exp+0x210>
 8004056:	2200      	movs	r2, #0
 8004058:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800405c:	4630      	mov	r0, r6
 800405e:	4639      	mov	r1, r7
 8004060:	f7fc f8be 	bl	80001e0 <__aeabi_dsub>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800406c:	f7fc fb9a 	bl	80007a4 <__aeabi_ddiv>
 8004070:	4622      	mov	r2, r4
 8004072:	462b      	mov	r3, r5
 8004074:	f7fc f8b4 	bl	80001e0 <__aeabi_dsub>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	2000      	movs	r0, #0
 800407e:	495a      	ldr	r1, [pc, #360]	@ (80041e8 <__ieee754_exp+0x2e8>)
 8004080:	f7fc f8ae 	bl	80001e0 <__aeabi_dsub>
 8004084:	e754      	b.n	8003f30 <__ieee754_exp+0x30>
 8004086:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <__ieee754_exp+0x2ec>)
 8004088:	4620      	mov	r0, r4
 800408a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800408e:	4629      	mov	r1, r5
 8004090:	a347      	add	r3, pc, #284	@ (adr r3, 80041b0 <__ieee754_exp+0x2b0>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc fa5b 	bl	8000550 <__aeabi_dmul>
 800409a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800409e:	f7fc f8a1 	bl	80001e4 <__adddf3>
 80040a2:	f7fc fcef 	bl	8000a84 <__aeabi_d2iz>
 80040a6:	4682      	mov	sl, r0
 80040a8:	f7fc f9e8 	bl	800047c <__aeabi_i2d>
 80040ac:	a342      	add	r3, pc, #264	@ (adr r3, 80041b8 <__ieee754_exp+0x2b8>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	4606      	mov	r6, r0
 80040b4:	460f      	mov	r7, r1
 80040b6:	f7fc fa4b 	bl	8000550 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc f88d 	bl	80001e0 <__aeabi_dsub>
 80040c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80041c0 <__ieee754_exp+0x2c0>)
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	4680      	mov	r8, r0
 80040ce:	4689      	mov	r9, r1
 80040d0:	4630      	mov	r0, r6
 80040d2:	4639      	mov	r1, r7
 80040d4:	f7fc fa3c 	bl	8000550 <__aeabi_dmul>
 80040d8:	e9cd 0100 	strd	r0, r1, [sp]
 80040dc:	e76f      	b.n	8003fbe <__ieee754_exp+0xbe>
 80040de:	4b44      	ldr	r3, [pc, #272]	@ (80041f0 <__ieee754_exp+0x2f0>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d810      	bhi.n	8004106 <__ieee754_exp+0x206>
 80040e4:	a338      	add	r3, pc, #224	@ (adr r3, 80041c8 <__ieee754_exp+0x2c8>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc f879 	bl	80001e4 <__adddf3>
 80040f2:	4b3d      	ldr	r3, [pc, #244]	@ (80041e8 <__ieee754_exp+0x2e8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	f7fc fcbb 	bl	8000a70 <__aeabi_dcmpgt>
 80040fa:	b138      	cbz	r0, 800410c <__ieee754_exp+0x20c>
 80040fc:	4b3a      	ldr	r3, [pc, #232]	@ (80041e8 <__ieee754_exp+0x2e8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	e712      	b.n	8003f2c <__ieee754_exp+0x2c>
 8004106:	f04f 0a00 	mov.w	sl, #0
 800410a:	e760      	b.n	8003fce <__ieee754_exp+0xce>
 800410c:	4682      	mov	sl, r0
 800410e:	e75e      	b.n	8003fce <__ieee754_exp+0xce>
 8004110:	4632      	mov	r2, r6
 8004112:	463b      	mov	r3, r7
 8004114:	2000      	movs	r0, #0
 8004116:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800411a:	f7fc f861 	bl	80001e0 <__aeabi_dsub>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004126:	f7fc fb3d 	bl	80007a4 <__aeabi_ddiv>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004132:	f7fc f855 	bl	80001e0 <__aeabi_dsub>
 8004136:	4642      	mov	r2, r8
 8004138:	464b      	mov	r3, r9
 800413a:	f7fc f851 	bl	80001e0 <__aeabi_dsub>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	2000      	movs	r0, #0
 8004144:	4928      	ldr	r1, [pc, #160]	@ (80041e8 <__ieee754_exp+0x2e8>)
 8004146:	f7fc f84b 	bl	80001e0 <__aeabi_dsub>
 800414a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800414e:	4592      	cmp	sl, r2
 8004150:	db02      	blt.n	8004158 <__ieee754_exp+0x258>
 8004152:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004156:	e6eb      	b.n	8003f30 <__ieee754_exp+0x30>
 8004158:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800415c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004160:	2200      	movs	r2, #0
 8004162:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8004166:	f7fc f9f3 	bl	8000550 <__aeabi_dmul>
 800416a:	e6e1      	b.n	8003f30 <__ieee754_exp+0x30>
 800416c:	2400      	movs	r4, #0
 800416e:	2500      	movs	r5, #0
 8004170:	e6e4      	b.n	8003f3c <__ieee754_exp+0x3c>
 8004172:	bf00      	nop
 8004174:	f3af 8000 	nop.w
 8004178:	fefa39ef 	.word	0xfefa39ef
 800417c:	40862e42 	.word	0x40862e42
 8004180:	d52d3051 	.word	0xd52d3051
 8004184:	c0874910 	.word	0xc0874910
 8004188:	72bea4d0 	.word	0x72bea4d0
 800418c:	3e663769 	.word	0x3e663769
 8004190:	c5d26bf1 	.word	0xc5d26bf1
 8004194:	3ebbbd41 	.word	0x3ebbbd41
 8004198:	af25de2c 	.word	0xaf25de2c
 800419c:	3f11566a 	.word	0x3f11566a
 80041a0:	16bebd93 	.word	0x16bebd93
 80041a4:	3f66c16c 	.word	0x3f66c16c
 80041a8:	5555553e 	.word	0x5555553e
 80041ac:	3fc55555 	.word	0x3fc55555
 80041b0:	652b82fe 	.word	0x652b82fe
 80041b4:	3ff71547 	.word	0x3ff71547
 80041b8:	fee00000 	.word	0xfee00000
 80041bc:	3fe62e42 	.word	0x3fe62e42
 80041c0:	35793c76 	.word	0x35793c76
 80041c4:	3dea39ef 	.word	0x3dea39ef
 80041c8:	8800759c 	.word	0x8800759c
 80041cc:	7e37e43c 	.word	0x7e37e43c
 80041d0:	40862e41 	.word	0x40862e41
 80041d4:	7fefffff 	.word	0x7fefffff
 80041d8:	3fd62e42 	.word	0x3fd62e42
 80041dc:	3ff0a2b1 	.word	0x3ff0a2b1
 80041e0:	080052b8 	.word	0x080052b8
 80041e4:	080052a8 	.word	0x080052a8
 80041e8:	3ff00000 	.word	0x3ff00000
 80041ec:	080052c8 	.word	0x080052c8
 80041f0:	3defffff 	.word	0x3defffff

080041f4 <with_errno>:
 80041f4:	b510      	push	{r4, lr}
 80041f6:	ed2d 8b02 	vpush	{d8}
 80041fa:	eeb0 8a40 	vmov.f32	s16, s0
 80041fe:	eef0 8a60 	vmov.f32	s17, s1
 8004202:	4604      	mov	r4, r0
 8004204:	f7ff fdb4 	bl	8003d70 <__errno>
 8004208:	eeb0 0a48 	vmov.f32	s0, s16
 800420c:	eef0 0a68 	vmov.f32	s1, s17
 8004210:	ecbd 8b02 	vpop	{d8}
 8004214:	6004      	str	r4, [r0, #0]
 8004216:	bd10      	pop	{r4, pc}

08004218 <xflow>:
 8004218:	4603      	mov	r3, r0
 800421a:	b507      	push	{r0, r1, r2, lr}
 800421c:	ec51 0b10 	vmov	r0, r1, d0
 8004220:	b183      	cbz	r3, 8004244 <xflow+0x2c>
 8004222:	4602      	mov	r2, r0
 8004224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004228:	e9cd 2300 	strd	r2, r3, [sp]
 800422c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004230:	f7fc f98e 	bl	8000550 <__aeabi_dmul>
 8004234:	ec41 0b10 	vmov	d0, r0, r1
 8004238:	2022      	movs	r0, #34	@ 0x22
 800423a:	b003      	add	sp, #12
 800423c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004240:	f7ff bfd8 	b.w	80041f4 <with_errno>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e7ee      	b.n	8004228 <xflow+0x10>
 800424a:	0000      	movs	r0, r0
 800424c:	0000      	movs	r0, r0
	...

08004250 <__math_uflow>:
 8004250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004258 <__math_uflow+0x8>
 8004254:	f7ff bfe0 	b.w	8004218 <xflow>
 8004258:	00000000 	.word	0x00000000
 800425c:	10000000 	.word	0x10000000

08004260 <__math_oflow>:
 8004260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004268 <__math_oflow+0x8>
 8004264:	f7ff bfd8 	b.w	8004218 <xflow>
 8004268:	00000000 	.word	0x00000000
 800426c:	70000000 	.word	0x70000000

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr
