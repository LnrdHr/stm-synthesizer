
stm32F411_5102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001050  080070b8  080070b8  000080b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008108  08008108  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008108  08008108  00009108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008110  08008110  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008110  08008110  00009110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008114  08008114  00009114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008118  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d4  20000070  08008188  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002444  08008188  0000a444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d04e  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002448  00000000  00000000  000170ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00019538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086c  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173bc  00000000  00000000  0001a88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeef  00000000  00000000  00031c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a71  00000000  00000000  00040b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d45a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  000d45ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d7840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800709c 	.word	0x0800709c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800709c 	.word	0x0800709c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <ADSR_Init>:
uint16_t b2=0; //krajnja tocka segmenta
uint16_t out=0; //amplitudni izlaz

//inicijalizacija ovojnice
void ADSR_Init(int samplingRate, float aTime, float dTime, float sLevel, float rTime)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6178      	str	r0, [r7, #20]
 8000e88:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e8c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e90:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e94:	edc7 1a01 	vstr	s3, [r7, #4]
	adsr.state=offState;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <ADSR_Init+0x54>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	751a      	strb	r2, [r3, #20]
	adsr.attackTime=aTime;
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <ADSR_Init+0x54>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6053      	str	r3, [r2, #4]
	adsr.decayTime=dTime;
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <ADSR_Init+0x54>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6093      	str	r3, [r2, #8]
	adsr.sustainLevel=sLevel;
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <ADSR_Init+0x54>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
	adsr.releaseTime=rTime;
 8000eb0:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <ADSR_Init+0x54>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6113      	str	r3, [r2, #16]
	adsr.samplingRate=samplingRate;
 8000eb6:	4a07      	ldr	r2, [pc, #28]	@ (8000ed4 <ADSR_Init+0x54>)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	6013      	str	r3, [r2, #0]
	adsr.triggered = 0;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <ADSR_Init+0x54>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
	adsr.released = 0;
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <ADSR_Init+0x54>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
}
 8000ec8:	bf00      	nop
 8000eca:	371c      	adds	r7, #28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	2000008c 	.word	0x2000008c

08000ed8 <ADSR_Update>:
 *za svaki segment ovojnice se racuna trajanje u obliku broja uzoraka(Nsamples)
 *
 *
*/
float ADSR_Update(int in)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	switch (adsr.state)
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	@ (8001154 <ADSR_Update+0x27c>)
 8000ee2:	7d1b      	ldrb	r3, [r3, #20]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	f200 8176 	bhi.w	80011d6 <ADSR_Update+0x2fe>
 8000eea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef0 <ADSR_Update+0x18>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f05 	.word	0x08000f05
 8000ef4:	08000f51 	.word	0x08000f51
 8000ef8:	08000ff7 	.word	0x08000ff7
 8000efc:	08001079 	.word	0x08001079
 8000f00:	08001109 	.word	0x08001109
	{
	case offState:
		if(adsr.triggered==1)
 8000f04:	4b93      	ldr	r3, [pc, #588]	@ (8001154 <ADSR_Update+0x27c>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d11d      	bne.n	8000f48 <ADSR_Update+0x70>
		{
			adsr.state =attackState;
 8000f0c:	4b91      	ldr	r3, [pc, #580]	@ (8001154 <ADSR_Update+0x27c>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	751a      	strb	r2, [r3, #20]
			counter=0;
 8000f12:	4b91      	ldr	r3, [pc, #580]	@ (8001158 <ADSR_Update+0x280>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
			Nsamples = adsr.samplingRate * adsr.attackTime * 1000; // mnozenje s 1000 zbog izrazavanja vremena pojedinog segmenta u ms
 8000f18:	4b8e      	ldr	r3, [pc, #568]	@ (8001154 <ADSR_Update+0x27c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f24:	4b8b      	ldr	r3, [pc, #556]	@ (8001154 <ADSR_Update+0x27c>)
 8000f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2e:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 800115c <ADSR_Update+0x284>
 8000f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f36:	4b8a      	ldr	r3, [pc, #552]	@ (8001160 <ADSR_Update+0x288>)
 8000f38:	edc3 7a00 	vstr	s15, [r3]
			b1=0;
 8000f3c:	4b89      	ldr	r3, [pc, #548]	@ (8001164 <ADSR_Update+0x28c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	801a      	strh	r2, [r3, #0]
			b2=1;
 8000f42:	4b89      	ldr	r3, [pc, #548]	@ (8001168 <ADSR_Update+0x290>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	801a      	strh	r2, [r3, #0]
		}
		out = 0;
 8000f48:	4b88      	ldr	r3, [pc, #544]	@ (800116c <ADSR_Update+0x294>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
		break;
 8000f4e:	e142      	b.n	80011d6 <ADSR_Update+0x2fe>

	case attackState:
		if(counter==Nsamples)
 8000f50:	4b81      	ldr	r3, [pc, #516]	@ (8001158 <ADSR_Update+0x280>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5c:	4b80      	ldr	r3, [pc, #512]	@ (8001160 <ADSR_Update+0x288>)
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	d125      	bne.n	8000fb8 <ADSR_Update+0xe0>
		{
			adsr.state=decayState;
 8000f6c:	4b79      	ldr	r3, [pc, #484]	@ (8001154 <ADSR_Update+0x27c>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	751a      	strb	r2, [r3, #20]
			counter = 0;
 8000f72:	4b79      	ldr	r3, [pc, #484]	@ (8001158 <ADSR_Update+0x280>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
			Nsamples = adsr.samplingRate * adsr.decayTime * 1000;
 8000f78:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <ADSR_Update+0x27c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f84:	4b73      	ldr	r3, [pc, #460]	@ (8001154 <ADSR_Update+0x27c>)
 8000f86:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800115c <ADSR_Update+0x284>
 8000f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f96:	4b72      	ldr	r3, [pc, #456]	@ (8001160 <ADSR_Update+0x288>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
			b1=b2;
 8000f9c:	4b72      	ldr	r3, [pc, #456]	@ (8001168 <ADSR_Update+0x290>)
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	4b70      	ldr	r3, [pc, #448]	@ (8001164 <ADSR_Update+0x28c>)
 8000fa2:	801a      	strh	r2, [r3, #0]
			b2=adsr.sustainLevel;
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8001154 <ADSR_Update+0x27c>)
 8000fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <ADSR_Update+0x290>)
 8000fb6:	801a      	strh	r2, [r3, #0]
		}
		out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
 8000fb8:	4b69      	ldr	r3, [pc, #420]	@ (8001160 <ADSR_Update+0x288>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4a68      	ldr	r2, [pc, #416]	@ (8001164 <ADSR_Update+0x28c>)
 8000fc4:	8812      	ldrh	r2, [r2, #0]
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000fce:	4a66      	ldr	r2, [pc, #408]	@ (8001168 <ADSR_Update+0x290>)
 8000fd0:	8812      	ldrh	r2, [r2, #0]
 8000fd2:	ee06 2a90 	vmov	s13, r2
 8000fd6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000fda:	eeb0 1a66 	vmov.f32	s2, s13
 8000fde:	eef0 0a47 	vmov.f32	s1, s14
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe8:	f000 f90c 	bl	8001204 <ADSR_CalculateNextSample>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b5e      	ldr	r3, [pc, #376]	@ (800116c <ADSR_Update+0x294>)
 8000ff2:	801a      	strh	r2, [r3, #0]
		break;
 8000ff4:	e0ef      	b.n	80011d6 <ADSR_Update+0x2fe>

	case decayState:
		if(counter==Nsamples)
 8000ff6:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <ADSR_Update+0x280>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <ADSR_Update+0x288>)
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	eeb4 7a67 	vcmp.f32	s14, s15
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d113      	bne.n	800103a <ADSR_Update+0x162>
		{
			adsr.state=sustainState;
 8001012:	4b50      	ldr	r3, [pc, #320]	@ (8001154 <ADSR_Update+0x27c>)
 8001014:	2203      	movs	r2, #3
 8001016:	751a      	strb	r2, [r3, #20]
			counter=0;
 8001018:	4b4f      	ldr	r3, [pc, #316]	@ (8001158 <ADSR_Update+0x280>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
			b1=b2=adsr.sustainLevel;
 800101e:	4b4d      	ldr	r3, [pc, #308]	@ (8001154 <ADSR_Update+0x27c>)
 8001020:	edd3 7a03 	vldr	s15, [r3, #12]
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b4e      	ldr	r3, [pc, #312]	@ (8001168 <ADSR_Update+0x290>)
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	4b4d      	ldr	r3, [pc, #308]	@ (8001168 <ADSR_Update+0x290>)
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	4b4b      	ldr	r3, [pc, #300]	@ (8001164 <ADSR_Update+0x28c>)
 8001038:	801a      	strh	r2, [r3, #0]
		}
		out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
 800103a:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <ADSR_Update+0x288>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4a47      	ldr	r2, [pc, #284]	@ (8001164 <ADSR_Update+0x28c>)
 8001046:	8812      	ldrh	r2, [r2, #0]
 8001048:	ee07 2a10 	vmov	s14, r2
 800104c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001050:	4a45      	ldr	r2, [pc, #276]	@ (8001168 <ADSR_Update+0x290>)
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	ee06 2a90 	vmov	s13, r2
 8001058:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800105c:	eeb0 1a66 	vmov.f32	s2, s13
 8001060:	eef0 0a47 	vmov.f32	s1, s14
 8001064:	4618      	mov	r0, r3
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f000 f8cb 	bl	8001204 <ADSR_CalculateNextSample>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <ADSR_Update+0x294>)
 8001074:	801a      	strh	r2, [r3, #0]
		break;
 8001076:	e0ae      	b.n	80011d6 <ADSR_Update+0x2fe>

	case sustainState:
		if(adsr.released==1)
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <ADSR_Update+0x27c>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d124      	bne.n	80010ca <ADSR_Update+0x1f2>
		{
			adsr.state=releaseState;
 8001080:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <ADSR_Update+0x27c>)
 8001082:	2204      	movs	r2, #4
 8001084:	751a      	strb	r2, [r3, #20]
			counter=0;
 8001086:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <ADSR_Update+0x280>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
			Nsamples = adsr.samplingRate * adsr.releaseTime * 1000;
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <ADSR_Update+0x27c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001098:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <ADSR_Update+0x27c>)
 800109a:	edd3 7a04 	vldr	s15, [r3, #16]
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800115c <ADSR_Update+0x284>
 80010a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <ADSR_Update+0x288>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]
			b1=adsr.sustainLevel;
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <ADSR_Update+0x27c>)
 80010b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80010b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ba:	ee17 3a90 	vmov	r3, s15
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <ADSR_Update+0x28c>)
 80010c2:	801a      	strh	r2, [r3, #0]
			b2=0;
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <ADSR_Update+0x290>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	801a      	strh	r2, [r3, #0]
		}
		out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
 80010ca:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <ADSR_Update+0x288>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <ADSR_Update+0x28c>)
 80010d6:	8812      	ldrh	r2, [r2, #0]
 80010d8:	ee07 2a10 	vmov	s14, r2
 80010dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010e0:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <ADSR_Update+0x290>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	ee06 2a90 	vmov	s13, r2
 80010e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80010ec:	eeb0 1a66 	vmov.f32	s2, s13
 80010f0:	eef0 0a47 	vmov.f32	s1, s14
 80010f4:	4618      	mov	r0, r3
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	f000 f883 	bl	8001204 <ADSR_CalculateNextSample>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <ADSR_Update+0x294>)
 8001104:	801a      	strh	r2, [r3, #0]
		break;
 8001106:	e066      	b.n	80011d6 <ADSR_Update+0x2fe>

	case releaseState:
		//ovojnica ne mora biti u off stanju da bi se mogla ponovno pokrenuti
		if(adsr.triggered==1)
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <ADSR_Update+0x27c>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d12f      	bne.n	8001170 <ADSR_Update+0x298>
		{
			adsr.state=attackState;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <ADSR_Update+0x27c>)
 8001112:	2201      	movs	r2, #1
 8001114:	751a      	strb	r2, [r3, #20]
			counter=0;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <ADSR_Update+0x280>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
			Nsamples = adsr.samplingRate * adsr.attackTime * 1000;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <ADSR_Update+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <ADSR_Update+0x27c>)
 800112a:	edd3 7a01 	vldr	s15, [r3, #4]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800115c <ADSR_Update+0x284>
 8001136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <ADSR_Update+0x288>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
			b1=0;
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <ADSR_Update+0x28c>)
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
			b2=1;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <ADSR_Update+0x290>)
 8001148:	2201      	movs	r2, #1
 800114a:	801a      	strh	r2, [r3, #0]
			out=0;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <ADSR_Update+0x294>)
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
			break;
 8001152:	e040      	b.n	80011d6 <ADSR_Update+0x2fe>
 8001154:	2000008c 	.word	0x2000008c
 8001158:	200000b0 	.word	0x200000b0
 800115c:	447a0000 	.word	0x447a0000
 8001160:	200000b4 	.word	0x200000b4
 8001164:	200000b8 	.word	0x200000b8
 8001168:	200000ba 	.word	0x200000ba
 800116c:	200000bc 	.word	0x200000bc
		}
		if(counter==Nsamples)
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <ADSR_Update+0x314>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <ADSR_Update+0x318>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	eeb4 7a67 	vcmp.f32	s14, s15
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	d105      	bne.n	8001198 <ADSR_Update+0x2c0>
		{
			adsr.state=offState;
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <ADSR_Update+0x31c>)
 800118e:	2200      	movs	r2, #0
 8001190:	751a      	strb	r2, [r3, #20]
			counter=0;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <ADSR_Update+0x314>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
		}
		out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <ADSR_Update+0x318>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4a15      	ldr	r2, [pc, #84]	@ (80011f8 <ADSR_Update+0x320>)
 80011a4:	8812      	ldrh	r2, [r2, #0]
 80011a6:	ee07 2a10 	vmov	s14, r2
 80011aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011ae:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <ADSR_Update+0x324>)
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	ee06 2a90 	vmov	s13, r2
 80011b6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80011ba:	eeb0 1a66 	vmov.f32	s2, s13
 80011be:	eef0 0a47 	vmov.f32	s1, s14
 80011c2:	4618      	mov	r0, r3
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	f000 f81c 	bl	8001204 <ADSR_CalculateNextSample>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <ADSR_Update+0x328>)
 80011d2:	801a      	strh	r2, [r3, #0]
		break;
 80011d4:	bf00      	nop
	}
	return out;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <ADSR_Update+0x328>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000b0 	.word	0x200000b0
 80011f0:	200000b4 	.word	0x200000b4
 80011f4:	2000008c 	.word	0x2000008c
 80011f8:	200000b8 	.word	0x200000b8
 80011fc:	200000ba 	.word	0x200000ba
 8001200:	200000bc 	.word	0x200000bc

08001204 <ADSR_CalculateNextSample>:

//izlaz = ulaz + (Krajnja tocka segmenta - Prva tocka segmenta) / Broj uzoraka segmenta
uint16_t ADSR_CalculateNextSample(float Nsamples, uint16_t in, float b1, float b2)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a03 	vstr	s0, [r7, #12]
 800120e:	4603      	mov	r3, r0
 8001210:	edc7 0a01 	vstr	s1, [r7, #4]
 8001214:	ed87 1a00 	vstr	s2, [r7]
 8001218:	817b      	strh	r3, [r7, #10]
	out = round(in + (b2-b1) / Nsamples);
 800121a:	897b      	ldrh	r3, [r7, #10]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001224:	edd7 6a00 	vldr	s13, [r7]
 8001228:	edd7 7a01 	vldr	s15, [r7, #4]
 800122c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001230:	edd7 6a03 	vldr	s13, [r7, #12]
 8001234:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f92e 	bl	80004a0 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f004 fffc 	bl	8006248 <round>
 8001250:	ec53 2b10 	vmov	r2, r3, d0
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fc2a 	bl	8000ab0 <__aeabi_d2uiz>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <ADSR_CalculateNextSample+0x78>)
 8001262:	801a      	strh	r2, [r3, #0]
	counter++;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <ADSR_CalculateNextSample+0x7c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <ADSR_CalculateNextSample+0x7c>)
 800126c:	6013      	str	r3, [r2, #0]
	return out;
 800126e:	4b03      	ldr	r3, [pc, #12]	@ (800127c <ADSR_CalculateNextSample+0x78>)
 8001270:	881b      	ldrh	r3, [r3, #0]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000bc 	.word	0x200000bc
 8001280:	200000b0 	.word	0x200000b0

08001284 <ADSR_Trigger>:

void ADSR_Trigger()
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	adsr.triggered = 1;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <ADSR_Trigger+0x14>)
 800128a:	2201      	movs	r2, #1
 800128c:	61da      	str	r2, [r3, #28]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000008c 	.word	0x2000008c

0800129c <ADSR_Release>:

void ADSR_Release()
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	adsr.released = 1;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <ADSR_Release+0x1c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	621a      	str	r2, [r3, #32]
	adsr.triggered = 0;
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <ADSR_Release+0x1c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	2000008c 	.word	0x2000008c

080012bc <ADSR_Reset>:

void ADSR_Reset()
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	adsr.released = 0;
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <ADSR_Reset+0x1c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
	adsr.triggered = 0;
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <ADSR_Reset+0x1c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2000008c 	.word	0x2000008c

080012dc <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//DMA za citanje analognih ulaza - potenciometri
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 uint16_t ad_rez = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	81fb      	strh	r3, [r7, #14]
				  	sumAdc = sumAdc + adc1_buf[0];
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_ADC_ConvCpltCallback+0x74>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x78>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x78>)
 80012f6:	6013      	str	r3, [r2, #0]
				  	numADCconvert ++;
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_ADC_ConvCpltCallback+0x7c>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001302:	801a      	strh	r2, [r3, #0]
				  	if (numADCconvert >= 250)
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	2bf9      	cmp	r3, #249	@ 0xf9
 800130a:	d91b      	bls.n	8001344 <HAL_ADC_ConvCpltCallback+0x68>
				  	{
				  		ad_rez = sumAdc / 250;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x78>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a12      	ldr	r2, [pc, #72]	@ (800135c <HAL_ADC_ConvCpltCallback+0x80>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	81fb      	strh	r3, [r7, #14]
				  		ad_rez = ad_rez >> 2;
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	81fb      	strh	r3, [r7, #14]
				  		numADCconvert = 0;
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001322:	2200      	movs	r2, #0
 8001324:	801a      	strh	r2, [r3, #0]
				  		sumAdc = 0;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x78>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
				  		ADCGain = ad_rez /1024.0f;
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001360 <HAL_ADC_ConvCpltCallback+0x84>
 800133a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x88>)
 8001340:	edc3 7a00 	vstr	s15, [r3]
				  	}
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200012b8 	.word	0x200012b8
 8001354:	200012e8 	.word	0x200012e8
 8001358:	200012f0 	.word	0x200012f0
 800135c:	10624dd3 	.word	0x10624dd3
 8001360:	44800000 	.word	0x44800000
 8001364:	200012f4 	.word	0x200012f4

08001368 <HAL_I2S_TxHalfCpltCallback>:
////////////////////////////////////////////////////
//DMA slanja prve polovice buffera na DAC
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef* hi2s2)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
   ArangeSamplesInHalfBuff();
 8001370:	f000 f916 	bl	80015a0 <ArangeSamplesInHalfBuff>

	for (int i =0; i < HALF_BUFFER_SIZE; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e01c      	b.n	80013b4 <HAL_I2S_TxHalfCpltCallback+0x4c>
	  {
		  {
			  dma_out[i] =  (0.1f * ADCGain *(WorkingBuffer[i]))  ;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_I2S_TxHalfCpltCallback+0x60>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80013cc <HAL_I2S_TxHalfCpltCallback+0x64>
 8001384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_I2S_TxHalfCpltCallback+0x68>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	b299      	uxth	r1, r3
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_I2S_TxHalfCpltCallback+0x6c>)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i =0; i < HALF_BUFFER_SIZE; i++)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ba:	dbde      	blt.n	800137a <HAL_I2S_TxHalfCpltCallback+0x12>
		  }
	  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200012f4 	.word	0x200012f4
 80013cc:	3dcccccd 	.word	0x3dcccccd
 80013d0:	200012f8 	.word	0x200012f8
 80013d4:	200002b8 	.word	0x200002b8

080013d8 <HAL_I2S_TxCpltCallback>:
////////////////////////////////////////////////////
//DMA slanja druge polovice buffera na DAC
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s2)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 	 ArangeSamplesInFullBuff();
 80013e0:	f000 f966 	bl	80016b0 <ArangeSamplesInFullBuff>

	for (int i = HALF_BUFFER_SIZE; i < FULL_BUFFER_SIZE; i++)
 80013e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e01c      	b.n	8001426 <HAL_I2S_TxCpltCallback+0x4e>
	  {
		  {
			  dma_out[i] =  (0.1f * ADCGain *(WorkingBuffer[i]))  ;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_I2S_TxCpltCallback+0x60>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800143c <HAL_I2S_TxCpltCallback+0x64>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_I2S_TxCpltCallback+0x68>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001412:	ee17 3a90 	vmov	r3, s15
 8001416:	b299      	uxth	r1, r3
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_I2S_TxCpltCallback+0x6c>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = HALF_BUFFER_SIZE; i < FULL_BUFFER_SIZE; i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800142c:	dbde      	blt.n	80013ec <HAL_I2S_TxCpltCallback+0x14>
		  }
	  }

}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200012f4 	.word	0x200012f4
 800143c:	3dcccccd 	.word	0x3dcccccd
 8001440:	200012f8 	.word	0x200012f8
 8001444:	200002b8 	.word	0x200002b8

08001448 <HAL_UART_RxCpltCallback>:
////////////////////////////////////////////////////
// MIDI IN obrada
void  HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart1)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
   char notaStanje = rxBuff[0];  // ON ili OFF
 8001450:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <HAL_UART_RxCpltCallback+0x128>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	72fb      	strb	r3, [r7, #11]
   char nota = rxBuff[1];  // koja tipka u MIDI sustavu
 8001456:	4b46      	ldr	r3, [pc, #280]	@ (8001570 <HAL_UART_RxCpltCallback+0x128>)
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	72bb      	strb	r3, [r7, #10]
   char notaVelo = rxBuff[2];   // glasnoca
 800145c:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <HAL_UART_RxCpltCallback+0x128>)
 800145e:	789b      	ldrb	r3, [r3, #2]
 8001460:	727b      	strb	r3, [r7, #9]
   ADSR_Reset();
 8001462:	f7ff ff2b 	bl	80012bc <ADSR_Reset>

   if (notaStanje == 0x90)  // nota ON
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	2b90      	cmp	r3, #144	@ 0x90
 800146a:	d152      	bne.n	8001512 <HAL_UART_RxCpltCallback+0xca>
   {
	//   for (int i =0; i <16; i++)
	   i =0;
 800146c:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <HAL_UART_RxCpltCallback+0x12c>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
	   {
		   if (stanjeTipki[i]== 0 )
 8001472:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <HAL_UART_RxCpltCallback+0x12c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a40      	ldr	r2, [pc, #256]	@ (8001578 <HAL_UART_RxCpltCallback+0x130>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d149      	bne.n	8001512 <HAL_UART_RxCpltCallback+0xca>
		   {
			   stanjeTipki[i] = nota;
 800147e:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <HAL_UART_RxCpltCallback+0x12c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	493d      	ldr	r1, [pc, #244]	@ (8001578 <HAL_UART_RxCpltCallback+0x130>)
 8001484:	7aba      	ldrb	r2, [r7, #10]
 8001486:	54ca      	strb	r2, [r1, r3]
			   glasnocaTonova[i] = notaVelo;
 8001488:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <HAL_UART_RxCpltCallback+0x12c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	493b      	ldr	r1, [pc, #236]	@ (800157c <HAL_UART_RxCpltCallback+0x134>)
 800148e:	7a7a      	ldrb	r2, [r7, #9]
 8001490:	54ca      	strb	r2, [r1, r3]
			   brojAktiviranihTipki++;
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <HAL_UART_RxCpltCallback+0x138>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_UART_RxCpltCallback+0x138>)
 800149c:	701a      	strb	r2, [r3, #0]
			   //Izracun frekv iz MIDI note
			    f= 440.0f * (pow(2,((nota - 69) * 0.0833333f )));
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	3b45      	subs	r3, #69	@ 0x45
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001584 <HAL_UART_RxCpltCallback+0x13c>
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	ee17 0a90 	vmov	r0, s15
 80014b6:	f7fe fff3 	bl	80004a0 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b11 	vmov	d1, r2, r3
 80014c2:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8001568 <HAL_UART_RxCpltCallback+0x120>
 80014c6:	f004 fe43 	bl	8006150 <pow>
 80014ca:	ec51 0b10 	vmov	r0, r1, d0
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <HAL_UART_RxCpltCallback+0x140>)
 80014d4:	f7ff f83c 	bl	8000550 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb06 	bl	8000af0 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a29      	ldr	r2, [pc, #164]	@ (800158c <HAL_UART_RxCpltCallback+0x144>)
 80014e8:	6013      	str	r3, [r2, #0]
			    // Izracun  pomaka pokazivaca u tablici
			    // ReadPointer = vel. tablice * f /sampling frekv.
			    pomakRadnogPolja_f = 2048.0f * f / 44000.0f;
 80014ea:	4b28      	ldr	r3, [pc, #160]	@ (800158c <HAL_UART_RxCpltCallback+0x144>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001590 <HAL_UART_RxCpltCallback+0x148>
 80014f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001594 <HAL_UART_RxCpltCallback+0x14c>
 80014fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <HAL_UART_RxCpltCallback+0x150>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
			   // readPointer_f =  f;
			     readPointer_f = 0;
 8001506:	4b25      	ldr	r3, [pc, #148]	@ (800159c <HAL_UART_RxCpltCallback+0x154>)
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
			 //  break;
			     ADSR_Trigger();
 800150e:	f7ff feb9 	bl	8001284 <ADSR_Trigger>
		   }

	   }
   }

   if (notaStanje == 0x80)  // nota OFF
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	2b80      	cmp	r3, #128	@ 0x80
 8001516:	d123      	bne.n	8001560 <HAL_UART_RxCpltCallback+0x118>
    {
  	   for (int i =0; i <16; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e01d      	b.n	800155a <HAL_UART_RxCpltCallback+0x112>
  	   {
  		   if (stanjeTipki[i]== nota )
 800151e:	4a16      	ldr	r2, [pc, #88]	@ (8001578 <HAL_UART_RxCpltCallback+0x130>)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	7aba      	ldrb	r2, [r7, #10]
 8001528:	429a      	cmp	r2, r3
 800152a:	d113      	bne.n	8001554 <HAL_UART_RxCpltCallback+0x10c>
  		   {
  			   stanjeTipki[i] = 0;
 800152c:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <HAL_UART_RxCpltCallback+0x130>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
  			   glasnocaTonova[i] = 0;
 8001536:	4a11      	ldr	r2, [pc, #68]	@ (800157c <HAL_UART_RxCpltCallback+0x134>)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
  			   brojAktiviranihTipki--;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_UART_RxCpltCallback+0x138>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_UART_RxCpltCallback+0x138>)
 800154a:	701a      	strb	r2, [r3, #0]
  			   ADSR_Release();
 800154c:	f7ff fea6 	bl	800129c <ADSR_Release>
  			   break;
 8001550:	bf00      	nop
  		   }
  	   }
     }

}
 8001552:	e005      	b.n	8001560 <HAL_UART_RxCpltCallback+0x118>
  	   for (int i =0; i <16; i++)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	ddde      	ble.n	800151e <HAL_UART_RxCpltCallback+0xd6>
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	00000000 	.word	0x00000000
 800156c:	40000000 	.word	0x40000000
 8001570:	200012bc 	.word	0x200012bc
 8001574:	200012e4 	.word	0x200012e4
 8001578:	200012c0 	.word	0x200012c0
 800157c:	200012d0 	.word	0x200012d0
 8001580:	200012e0 	.word	0x200012e0
 8001584:	3daaaaa6 	.word	0x3daaaaa6
 8001588:	407b8000 	.word	0x407b8000
 800158c:	200022f8 	.word	0x200022f8
 8001590:	45000000 	.word	0x45000000
 8001594:	472be000 	.word	0x472be000
 8001598:	20002304 	.word	0x20002304
 800159c:	200022fc 	.word	0x200022fc

080015a0 <ArangeSamplesInHalfBuff>:
////////////////////////////////////////////////////
// Priprema prve polovice buffera dok traje DMA druge polovice
void  ArangeSamplesInHalfBuff(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
   //
	pointerRadnogPolja = 0;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <ArangeSamplesInHalfBuff+0xf4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
	    while(pointerRadnogPolja < HALF_BUFFER_SIZE)  //priprema radnog buffera
 80015ac:	e067      	b.n	800167e <ArangeSamplesInHalfBuff+0xde>
	    {  //Ogranicavanje rubnog uvjeta
	    	while (readPointer_f >= FULL_BUFFER_SIZE)
	    	{
	    		readPointer_f = readPointer_f - FULL_BUFFER_SIZE ;
 80015ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800169c <ArangeSamplesInHalfBuff+0xfc>
 80015b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015bc:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 80015be:	edc3 7a00 	vstr	s15, [r3]
	    		readPointer_i = round(readPointer_f);
 80015c2:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff6a 	bl	80004a0 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	ec43 2b10 	vmov	d0, r2, r3
 80015d4:	f004 fe38 	bl	8006248 <round>
 80015d8:	ec53 2b10 	vmov	r2, r3, d0
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa66 	bl	8000ab0 <__aeabi_d2uiz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a2e      	ldr	r2, [pc, #184]	@ (80016a0 <ArangeSamplesInHalfBuff+0x100>)
 80015e8:	6013      	str	r3, [r2, #0]
	    	while (readPointer_f >= FULL_BUFFER_SIZE)
 80015ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800169c <ArangeSamplesInHalfBuff+0xfc>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dad7      	bge.n	80015ae <ArangeSamplesInHalfBuff+0xe>
			//delay processing
			//inProcessed_f = delay_Update(&delay, inProcessed_f);
			//inProcessed_i = round(inProcessed_f);

	    	//adsr processing
			uint16_t in_i = sineLUT[readPointer_i];
 80015fe:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <ArangeSamplesInHalfBuff+0x100>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <ArangeSamplesInHalfBuff+0x104>)
 8001604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001608:	80fb      	strh	r3, [r7, #6]
			uint16_t inProcessed_i = ADSR_Update(in_i);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fc63 	bl	8000ed8 <ADSR_Update>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161a:	ee17 3a90 	vmov	r3, s15
 800161e:	80bb      	strh	r3, [r7, #4]

			WorkingBuffer[pointerRadnogPolja] = inProcessed_i;
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <ArangeSamplesInHalfBuff+0xf4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4920      	ldr	r1, [pc, #128]	@ (80016a8 <ArangeSamplesInHalfBuff+0x108>)
 8001626:	88ba      	ldrh	r2, [r7, #4]
 8001628:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]


	    	if (pointerRadnogPolja < FULL_BUFFER_SIZE)
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <ArangeSamplesInHalfBuff+0xf4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001634:	d204      	bcs.n	8001640 <ArangeSamplesInHalfBuff+0xa0>
	    		pointerRadnogPolja++;
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <ArangeSamplesInHalfBuff+0xf4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <ArangeSamplesInHalfBuff+0xf4>)
 800163e:	6013      	str	r3, [r2, #0]
	    	readPointer_f =  readPointer_f + pomakRadnogPolja_f;
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <ArangeSamplesInHalfBuff+0x10c>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
	    	readPointer_i = round(readPointer_f);
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <ArangeSamplesInHalfBuff+0xf8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff20 	bl	80004a0 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b10 	vmov	d0, r2, r3
 8001668:	f004 fdee 	bl	8006248 <round>
 800166c:	ec53 2b10 	vmov	r2, r3, d0
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fa1c 	bl	8000ab0 <__aeabi_d2uiz>
 8001678:	4603      	mov	r3, r0
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <ArangeSamplesInHalfBuff+0x100>)
 800167c:	6013      	str	r3, [r2, #0]
	    while(pointerRadnogPolja < HALF_BUFFER_SIZE)  //priprema radnog buffera
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <ArangeSamplesInHalfBuff+0xf4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001686:	d3b0      	bcc.n	80015ea <ArangeSamplesInHalfBuff+0x4a>
	    }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200012ec 	.word	0x200012ec
 8001698:	200022fc 	.word	0x200022fc
 800169c:	45000000 	.word	0x45000000
 80016a0:	20002300 	.word	0x20002300
 80016a4:	080070b8 	.word	0x080070b8
 80016a8:	200012f8 	.word	0x200012f8
 80016ac:	20002304 	.word	0x20002304

080016b0 <ArangeSamplesInFullBuff>:
////////////////////////////////////////////////////
// Priprema druge polovice buffera dok traje DMA prve polovice
void  ArangeSamplesInFullBuff(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
   //
	    while (pointerRadnogPolja < FULL_BUFFER_SIZE)  //priprema radnog buffera
 80016b6:	e067      	b.n	8001788 <ArangeSamplesInFullBuff+0xd8>
	    {  //Ogranicavanje rubnog uvjeta
	    	while (readPointer_f >= (FULL_BUFFER_SIZE))
	    	{
	    		readPointer_f = readPointer_f - FULL_BUFFER_SIZE ;
 80016b8:	4b38      	ldr	r3, [pc, #224]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80017a0 <ArangeSamplesInFullBuff+0xf0>
 80016c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c6:	4b35      	ldr	r3, [pc, #212]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
	    		readPointer_i = round(readPointer_f);
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fee5 	bl	80004a0 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	ec43 2b10 	vmov	d0, r2, r3
 80016de:	f004 fdb3 	bl	8006248 <round>
 80016e2:	ec53 2b10 	vmov	r2, r3, d0
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff f9e1 	bl	8000ab0 <__aeabi_d2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a2c      	ldr	r2, [pc, #176]	@ (80017a4 <ArangeSamplesInFullBuff+0xf4>)
 80016f2:	6013      	str	r3, [r2, #0]
	    	while (readPointer_f >= (FULL_BUFFER_SIZE))
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80017a0 <ArangeSamplesInFullBuff+0xf0>
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dad7      	bge.n	80016b8 <ArangeSamplesInFullBuff+0x8>
			//delay processing
			//inProcessed_f = delay_Update(&delay, inProcessed_f);
			//inProcessed_i = round(inProcessed_f);

	    	//adsr processing
	    	uint16_t in_i = sineLUT[readPointer_i];
 8001708:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <ArangeSamplesInFullBuff+0xf4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a26      	ldr	r2, [pc, #152]	@ (80017a8 <ArangeSamplesInFullBuff+0xf8>)
 800170e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001712:	80fb      	strh	r3, [r7, #6]
	    	uint16_t inProcessed_i = ADSR_Update(in_i);
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fbde 	bl	8000ed8 <ADSR_Update>
 800171c:	eef0 7a40 	vmov.f32	s15, s0
 8001720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001724:	ee17 3a90 	vmov	r3, s15
 8001728:	80bb      	strh	r3, [r7, #4]

			WorkingBuffer[pointerRadnogPolja] = inProcessed_i;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <ArangeSamplesInFullBuff+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4920      	ldr	r1, [pc, #128]	@ (80017b0 <ArangeSamplesInFullBuff+0x100>)
 8001730:	88ba      	ldrh	r2, [r7, #4]
 8001732:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	    	if (pointerRadnogPolja < FULL_BUFFER_SIZE)
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <ArangeSamplesInFullBuff+0xfc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800173e:	d204      	bcs.n	800174a <ArangeSamplesInFullBuff+0x9a>
	    		pointerRadnogPolja++;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <ArangeSamplesInFullBuff+0xfc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <ArangeSamplesInFullBuff+0xfc>)
 8001748:	6013      	str	r3, [r2, #0]
	    	readPointer_f = readPointer_f + pomakRadnogPolja_f;
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <ArangeSamplesInFullBuff+0x104>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 800175c:	edc3 7a00 	vstr	s15, [r3]
	    	readPointer_i = round(readPointer_f);
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <ArangeSamplesInFullBuff+0xec>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe9b 	bl	80004a0 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ec43 2b10 	vmov	d0, r2, r3
 8001772:	f004 fd69 	bl	8006248 <round>
 8001776:	ec53 2b10 	vmov	r2, r3, d0
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f997 	bl	8000ab0 <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <ArangeSamplesInFullBuff+0xf4>)
 8001786:	6013      	str	r3, [r2, #0]
	    while (pointerRadnogPolja < FULL_BUFFER_SIZE)  //priprema radnog buffera
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <ArangeSamplesInFullBuff+0xfc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001790:	d3b0      	bcc.n	80016f4 <ArangeSamplesInFullBuff+0x44>
	    }
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200022fc 	.word	0x200022fc
 80017a0:	45000000 	.word	0x45000000
 80017a4:	20002300 	.word	0x20002300
 80017a8:	080070b8 	.word	0x080070b8
 80017ac:	200012ec 	.word	0x200012ec
 80017b0:	200012f8 	.word	0x200012f8
 80017b4:	20002304 	.word	0x20002304

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017bc:	f000 fc34 	bl	8002028 <HAL_Init>

  /* USER CODE BEGIN Init */
  //EMA_LOW_Init(&low_filt, ALPHA);
  //delay_Init(&delay, 500.0f, 0.5f, 0.5f, SAMPLING_FREQ);
  ADSR_Init(SAMPLING_FREQ, 10, 10, 0.7, 10);
 80017c0:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 80017c4:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001814 <main+0x5c>
 80017c8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80017cc:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80017d0:	f64a 30e0 	movw	r0, #44000	@ 0xabe0
 80017d4:	f7ff fb54 	bl	8000e80 <ADSR_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d8:	f000 f82a 	bl	8001830 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017dc:	f000 f986 	bl	8001aec <MX_GPIO_Init>
  MX_DMA_Init();
 80017e0:	f000 f946 	bl	8001a70 <MX_DMA_Init>
  MX_I2S2_Init();
 80017e4:	f000 f8ec 	bl	80019c0 <MX_I2S2_Init>
  MX_ADC1_Init();
 80017e8:	f000 f88a 	bl	8001900 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80017ec:	f000 f916 	bl	8001a1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) dma_out, FULL_BUFFER_SIZE);
 80017f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017f4:	4908      	ldr	r1, [pc, #32]	@ (8001818 <main+0x60>)
 80017f6:	4809      	ldr	r0, [pc, #36]	@ (800181c <main+0x64>)
 80017f8:	f002 f97c 	bl	8003af4 <HAL_I2S_Transmit_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_buf, ADC_BUFFER_SIZE);
 80017fc:	2202      	movs	r2, #2
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <main+0x68>)
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <main+0x6c>)
 8001802:	f000 fdd7 	bl	80023b4 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_DMA(&huart1, rxBuff, 3);
 8001806:	2203      	movs	r2, #3
 8001808:	4907      	ldr	r1, [pc, #28]	@ (8001828 <main+0x70>)
 800180a:	4808      	ldr	r0, [pc, #32]	@ (800182c <main+0x74>)
 800180c:	f003 fbba 	bl	8004f84 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <main+0x58>
 8001814:	3f333333 	.word	0x3f333333
 8001818:	200002b8 	.word	0x200002b8
 800181c:	20000168 	.word	0x20000168
 8001820:	200012b8 	.word	0x200012b8
 8001824:	200000c0 	.word	0x200000c0
 8001828:	200012bc 	.word	0x200012bc
 800182c:	20000210 	.word	0x20000210

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	@ 0x50
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	@ 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f004 fc54 	bl	80060ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <SystemClock_Config+0xc8>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	4a26      	ldr	r2, [pc, #152]	@ (80018f8 <SystemClock_Config+0xc8>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	@ 0x40
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <SystemClock_Config+0xc8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <SystemClock_Config+0xcc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a20      	ldr	r2, [pc, #128]	@ (80018fc <SystemClock_Config+0xcc>)
 800187a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <SystemClock_Config+0xcc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800188c:	2301      	movs	r3, #1
 800188e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001896:	2302      	movs	r3, #2
 8001898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80018a0:	230c      	movs	r3, #12
 80018a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80018a4:	2360      	movs	r3, #96	@ 0x60
 80018a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fd6b 	bl	8004390 <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c0:	f000 f94a 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2103      	movs	r1, #3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 ffcd 	bl	8004880 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018ec:	f000 f934 	bl	8001b58 <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3750      	adds	r7, #80	@ 0x50
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001906:	463b      	mov	r3, r7
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001912:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001914:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <MX_ADC1_Init+0xb8>)
 8001916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001918:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 800191a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800191e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001926:	4b23      	ldr	r3, [pc, #140]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001928:	2201      	movs	r2, #1
 800192a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800192c:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 800192e:	2201      	movs	r2, #1
 8001930:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001932:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800193a:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 800193c:	2200      	movs	r2, #0
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001940:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001942:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <MX_ADC1_Init+0xbc>)
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 800194e:	2202      	movs	r2, #2
 8001950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001960:	4814      	ldr	r0, [pc, #80]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001962:	f000 fbd3 	bl	800210c <HAL_ADC_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800196c:	f000 f8f4 	bl	8001b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001974:	2301      	movs	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001978:	2302      	movs	r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 8001982:	f000 fe25 	bl	80025d0 <HAL_ADC_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800198c:	f000 f8e4 	bl	8001b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001990:	2301      	movs	r3, #1
 8001992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001994:	2302      	movs	r3, #2
 8001996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_ADC1_Init+0xb4>)
 800199e:	f000 fe17 	bl	80025d0 <HAL_ADC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019a8:	f000 f8d6 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200000c0 	.word	0x200000c0
 80019b8:	40012000 	.word	0x40012000
 80019bc:	0f000001 	.word	0x0f000001

080019c0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019c6:	4a14      	ldr	r2, [pc, #80]	@ (8001a18 <MX_I2S2_Init+0x58>)
 80019c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019da:	2201      	movs	r2, #1
 80019dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019e6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80019ea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_I2S2_Init+0x54>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_I2S2_Init+0x54>)
 8001a00:	f001 ff38 	bl	8003874 <HAL_I2S_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001a0a:	f000 f8a5 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000168 	.word	0x20000168
 8001a18:	40003800 	.word	0x40003800

08001a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <MX_USART1_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a28:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8001a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a54:	f003 fa46 	bl	8004ee4 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f87b 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000210 	.word	0x20000210
 8001a6c:	40011000 	.word	0x40011000

08001a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <MX_DMA_Init+0x78>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <MX_DMA_Init+0x78>)
 8001a80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <MX_DMA_Init+0x78>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_DMA_Init+0x78>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ae8 <MX_DMA_Init+0x78>)
 8001a9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_DMA_Init+0x78>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f001 f921 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ab8:	200f      	movs	r0, #15
 8001aba:	f001 f93a 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2038      	movs	r0, #56	@ 0x38
 8001ac4:	f001 f919 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ac8:	2038      	movs	r0, #56	@ 0x38
 8001aca:	f001 f932 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	203a      	movs	r0, #58	@ 0x3a
 8001ad4:	f001 f911 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ad8:	203a      	movs	r0, #58	@ 0x3a
 8001ada:	f001 f92a 	bl	8002d32 <HAL_NVIC_EnableIRQ>

}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a16      	ldr	r2, [pc, #88]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a0f      	ldr	r2, [pc, #60]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_GPIO_Init+0x68>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	@ (8001ca0 <HAL_ADC_MspInit+0xec>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d15f      	bne.n	8001c96 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_ADC_MspInit+0xf0>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a31      	ldr	r2, [pc, #196]	@ (8001ca4 <HAL_ADC_MspInit+0xf0>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_ADC_MspInit+0xf0>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_ADC_MspInit+0xf0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_ADC_MspInit+0xf0>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_ADC_MspInit+0xf0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <HAL_ADC_MspInit+0xf4>)
 8001c22:	f001 fca3 	bl	800356c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c28:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_ADC_MspInit+0xfc>)
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c6a:	4810      	ldr	r0, [pc, #64]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c6c:	f001 f87c 	bl	8002d68 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c76:	f7ff ff6f 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c80:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_ADC_MspInit+0xf8>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2012      	movs	r0, #18
 8001c8c:	f001 f835 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c90:	2012      	movs	r0, #18
 8001c92:	f001 f84e 	bl	8002d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40012000 	.word	0x40012000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	20000108 	.word	0x20000108
 8001cb0:	40026410 	.word	0x40026410

08001cb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b090      	sub	sp, #64	@ 0x40
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd0 <HAL_I2S_MspInit+0x11c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d16e      	bne.n	8001dc6 <HAL_I2S_MspInit+0x112>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001cec:	23c0      	movs	r3, #192	@ 0xc0
 8001cee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 25;
 8001cf0:	2319      	movs	r3, #25
 8001cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 ff9f 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001d08:	f7ff ff26 	bl	8001b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <HAL_I2S_MspInit+0x120>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <HAL_I2S_MspInit+0x120>)
 8001d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_I2S_MspInit+0x120>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <HAL_I2S_MspInit+0x120>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <HAL_I2S_MspInit+0x120>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d38:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_I2S_MspInit+0x120>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8001d44:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d56:	2305      	movs	r3, #5
 8001d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	481d      	ldr	r0, [pc, #116]	@ (8001dd8 <HAL_I2S_MspInit+0x124>)
 8001d62:	f001 fc03 	bl	800356c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d68:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_I2S_MspInit+0x12c>)
 8001d6a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d74:	2240      	movs	r2, #64	@ 0x40
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d94:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d9c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001dac:	f000 ffdc 	bl	8002d68 <HAL_DMA_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 8001db6:	f7ff fecf 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001dbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dc0:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <HAL_I2S_MspInit+0x128>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3740      	adds	r7, #64	@ 0x40
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40003800 	.word	0x40003800
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	200001b0 	.word	0x200001b0
 8001de0:	40026070 	.word	0x40026070

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	@ (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d163      	bne.n	8001ece <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a33      	ldr	r2, [pc, #204]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e50:	2307      	movs	r3, #7
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4821      	ldr	r0, [pc, #132]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e5c:	f001 fb86 	bl	800356c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_UART_MspInit+0x104>)
 8001e64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ea2:	4810      	ldr	r0, [pc, #64]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001ea4:	f000 ff60 	bl	8002d68 <HAL_DMA_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001eae:	f7ff fe53 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2025      	movs	r0, #37	@ 0x25
 8001ec4:	f000 ff19 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ec8:	2025      	movs	r0, #37	@ 0x25
 8001eca:	f000 ff32 	bl	8002d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	20000258 	.word	0x20000258
 8001ee8:	40026440 	.word	0x40026440

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <MemManage_Handler+0x4>

08001f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 f8c3 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <DMA1_Stream4_IRQHandler+0x10>)
 8001f52:	f001 f8a1 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200001b0 	.word	0x200001b0

08001f60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <ADC_IRQHandler+0x10>)
 8001f66:	f000 f914 	bl	8002192 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200000c0 	.word	0x200000c0

08001f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <USART1_IRQHandler+0x10>)
 8001f7a:	f003 f829 	bl	8004fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000210 	.word	0x20000210

08001f88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <DMA2_Stream0_IRQHandler+0x10>)
 8001f8e:	f001 f883 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000108 	.word	0x20000108

08001f9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <DMA2_Stream2_IRQHandler+0x10>)
 8001fa2:	f001 f879 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000258 	.word	0x20000258

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800200c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd8:	f7ff ffea 	bl	8001fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	@ (8002014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8002020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f004 f881 	bl	8006108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff fbd7 	bl	80017b8 <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800200c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002018:	08008118 	.word	0x08008118
  ldr r2, =_sbss
 800201c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002020:	20002444 	.word	0x20002444

08002024 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <DMA1_Stream0_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <HAL_Init+0x40>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <HAL_Init+0x40>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	@ (8002068 <HAL_Init+0x40>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 fe47 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	200f      	movs	r0, #15
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fd82 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fe5f 	bl	8002d4e <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 fe27 	bl	8002cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	@ (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000008 	.word	0x20000008
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20002308 	.word	0x20002308

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	@ (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20002308 	.word	0x20002308

0800210c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e033      	b.n	800218a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fd42 	bl	8001bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002152:	f023 0302 	bic.w	r3, r3, #2
 8002156:	f043 0202 	orr.w	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fb68 	bl	8002834 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40
 800217a:	e001      	b.n	8002180 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d049      	beq.n	800225c <HAL_ADC_IRQHandler+0xca>
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d046      	beq.n	800225c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d12b      	bne.n	800224c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d127      	bne.n	800224c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002202:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002214:	2b00      	cmp	r3, #0
 8002216:	d119      	bne.n	800224c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0220 	bic.w	r2, r2, #32
 8002226:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff f845 	bl	80012dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f06f 0212 	mvn.w	r2, #18
 800225a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d057      	beq.n	8002322 <HAL_ADC_IRQHandler+0x190>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d054      	beq.n	8002322 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d139      	bne.n	8002312 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12b      	bne.n	8002312 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d124      	bne.n	8002312 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11d      	bne.n	8002312 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d119      	bne.n	8002312 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ec:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fc0c 	bl	8002b30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 020c 	mvn.w	r2, #12
 8002320:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002330:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d017      	beq.n	8002368 <HAL_ADC_IRQHandler+0x1d6>
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d014      	beq.n	8002368 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10d      	bne.n	8002368 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f925 	bl	80025a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0201 	mvn.w	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002376:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_ADC_IRQHandler+0x218>
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d012      	beq.n	80023aa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	f043 0202 	orr.w	r2, r3, #2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0220 	mvn.w	r2, #32
 8002398:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f90e 	bl	80025bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0220 	mvn.w	r2, #32
 80023a8:	601a      	str	r2, [r3, #0]
  }
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Start_DMA+0x1e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0ce      	b.n	8002570 <HAL_ADC_Start_DMA+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d018      	beq.n	800241a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002578 <HAL_ADC_Start_DMA+0x1c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5f      	ldr	r2, [pc, #380]	@ (800257c <HAL_ADC_Start_DMA+0x1c8>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9a      	lsrs	r2, r3, #18
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800240c:	e002      	b.n	8002414 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3b01      	subs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002428:	d107      	bne.n	800243a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002438:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 8086 	bne.w	8002556 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002474:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002488:	d106      	bne.n	8002498 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f023 0206 	bic.w	r2, r3, #6
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
 8002496:	e002      	b.n	800249e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a6:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <HAL_ADC_Start_DMA+0x1cc>)
 80024a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	4a35      	ldr	r2, [pc, #212]	@ (8002584 <HAL_ADC_Start_DMA+0x1d0>)
 80024b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	4a34      	ldr	r2, [pc, #208]	@ (8002588 <HAL_ADC_Start_DMA+0x1d4>)
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024be:	4a33      	ldr	r2, [pc, #204]	@ (800258c <HAL_ADC_Start_DMA+0x1d8>)
 80024c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024da:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	334c      	adds	r3, #76	@ 0x4c
 80024f6:	4619      	mov	r1, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f000 fce2 	bl	8002ec4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d129      	bne.n	800256e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	e020      	b.n	800256e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <HAL_ADC_Start_DMA+0x1dc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d11b      	bne.n	800256e <HAL_ADC_Start_DMA+0x1ba>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d114      	bne.n	800256e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e00b      	b.n	800256e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000000 	.word	0x20000000
 800257c:	431bde83 	.word	0x431bde83
 8002580:	40012300 	.word	0x40012300
 8002584:	08002a2d 	.word	0x08002a2d
 8002588:	08002ae7 	.word	0x08002ae7
 800258c:	08002b03 	.word	0x08002b03
 8002590:	40012000 	.word	0x40012000

08002594 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e113      	b.n	8002814 <HAL_ADC_ConfigChannel+0x244>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d925      	bls.n	8002648 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68d9      	ldr	r1, [r3, #12]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	3b1e      	subs	r3, #30
 8002612:	2207      	movs	r2, #7
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43da      	mvns	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	400a      	ands	r2, r1
 8002620:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68d9      	ldr	r1, [r3, #12]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	4603      	mov	r3, r0
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4403      	add	r3, r0
 800263a:	3b1e      	subs	r3, #30
 800263c:	409a      	lsls	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	e022      	b.n	800268e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6919      	ldr	r1, [r3, #16]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	2207      	movs	r2, #7
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	4603      	mov	r3, r0
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4403      	add	r3, r0
 8002684:	409a      	lsls	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b06      	cmp	r3, #6
 8002694:	d824      	bhi.n	80026e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b05      	subs	r3, #5
 80026a8:	221f      	movs	r2, #31
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b05      	subs	r3, #5
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80026de:	e04c      	b.n	800277a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d824      	bhi.n	8002732 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	3b23      	subs	r3, #35	@ 0x23
 80026fa:	221f      	movs	r2, #31
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43da      	mvns	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	400a      	ands	r2, r1
 8002708:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3b23      	subs	r3, #35	@ 0x23
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002730:	e023      	b.n	800277a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	3b41      	subs	r3, #65	@ 0x41
 8002744:	221f      	movs	r2, #31
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b41      	subs	r3, #65	@ 0x41
 800276e:	fa00 f203 	lsl.w	r2, r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800277a:	4b29      	ldr	r3, [pc, #164]	@ (8002820 <HAL_ADC_ConfigChannel+0x250>)
 800277c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <HAL_ADC_ConfigChannel+0x254>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d10f      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b12      	cmp	r3, #18
 800278e:	d10b      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002824 <HAL_ADC_ConfigChannel+0x254>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12b      	bne.n	800280a <HAL_ADC_ConfigChannel+0x23a>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <HAL_ADC_ConfigChannel+0x258>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d003      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x1f4>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b11      	cmp	r3, #17
 80027c2:	d122      	bne.n	800280a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a11      	ldr	r2, [pc, #68]	@ (8002828 <HAL_ADC_ConfigChannel+0x258>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d111      	bne.n	800280a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_ADC_ConfigChannel+0x25c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_ADC_ConfigChannel+0x260>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9a      	lsrs	r2, r3, #18
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027fc:	e002      	b.n	8002804 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3b01      	subs	r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40012300 	.word	0x40012300
 8002824:	40012000 	.word	0x40012000
 8002828:	10000012 	.word	0x10000012
 800282c:	20000000 	.word	0x20000000
 8002830:	431bde83 	.word	0x431bde83

08002834 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283c:	4b79      	ldr	r3, [pc, #484]	@ (8002a24 <ADC_Init+0x1f0>)
 800283e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	021a      	lsls	r2, r3, #8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800288c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	4a58      	ldr	r2, [pc, #352]	@ (8002a28 <ADC_Init+0x1f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e00f      	b.n	8002932 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002930:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0202 	bic.w	r2, r2, #2
 8002940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7e1b      	ldrb	r3, [r3, #24]
 800294c:	005a      	lsls	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800296e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800297e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	3b01      	subs	r3, #1
 800298c:	035a      	lsls	r2, r3, #13
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	e007      	b.n	80029a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	051a      	lsls	r2, r3, #20
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029ea:	025a      	lsls	r2, r3, #9
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	029a      	lsls	r2, r3, #10
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40012300 	.word	0x40012300
 8002a28:	0f000001 	.word	0x0f000001

08002a2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d13c      	bne.n	8002ac0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d12b      	bne.n	8002ab8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d127      	bne.n	8002ab8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d119      	bne.n	8002ab8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0220 	bic.w	r2, r2, #32
 8002a92:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7fe fc0f 	bl	80012dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002abe:	e00e      	b.n	8002ade <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff fd75 	bl	80025bc <HAL_ADC_ErrorCallback>
}
 8002ad2:	e004      	b.n	8002ade <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff fd4d 	bl	8002594 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2240      	movs	r2, #64	@ 0x40
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f043 0204 	orr.w	r2, r3, #4
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff fd4a 	bl	80025bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	@ (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff3e 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff8e 	bl	8002c38 <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5d 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff31 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffa2 	bl	8002ca0 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff f9be 	bl	80020f4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e099      	b.n	8002eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da4:	e00f      	b.n	8002dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da6:	f7ff f9a5 	bl	80020f4 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d908      	bls.n	8002dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e078      	b.n	8002eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e8      	bne.n	8002da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <HAL_DMA_Init+0x158>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 0307 	bic.w	r3, r3, #7
 8002e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d117      	bne.n	8002e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb01 	bl	8003474 <DMA_CheckFifoParam>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2240      	movs	r2, #64	@ 0x40
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e86:	2301      	movs	r3, #1
 8002e88:	e016      	b.n	8002eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fab8 	bl	8003408 <DMA_CalcBaseAndBitshift>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	223f      	movs	r2, #63	@ 0x3f
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	f010803f 	.word	0xf010803f

08002ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Start_IT+0x26>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e040      	b.n	8002f6c <HAL_DMA_Start_IT+0xa8>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d12f      	bne.n	8002f5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa4a 	bl	80033ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	223f      	movs	r2, #63	@ 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0216 	orr.w	r2, r2, #22
 8002f32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0208 	orr.w	r2, r2, #8
 8002f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e005      	b.n	8002f6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f82:	f7ff f8b7 	bl	80020f4 <HAL_GetTick>
 8002f86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2280      	movs	r2, #128	@ 0x80
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e052      	b.n	800304c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0216 	bic.w	r2, r2, #22
 8002fb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_DMA_Abort+0x62>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0208 	bic.w	r2, r2, #8
 8002fe4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff6:	e013      	b.n	8003020 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff8:	f7ff f87c 	bl	80020f4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b05      	cmp	r3, #5
 8003004:	d90c      	bls.n	8003020 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e015      	b.n	800304c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e4      	bne.n	8002ff8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	223f      	movs	r2, #63	@ 0x3f
 8003034:	409a      	lsls	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e00c      	b.n	800308c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2205      	movs	r2, #5
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030a4:	4b8e      	ldr	r3, [pc, #568]	@ (80032e0 <HAL_DMA_IRQHandler+0x248>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a8e      	ldr	r2, [pc, #568]	@ (80032e4 <HAL_DMA_IRQHandler+0x24c>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	2208      	movs	r2, #8
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01a      	beq.n	8003104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	2208      	movs	r2, #8
 80030f2:	409a      	lsls	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	2204      	movs	r2, #4
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	2204      	movs	r2, #4
 800315e:	409a      	lsls	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0204 	orr.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	2210      	movs	r2, #16
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d043      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d03c      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	2210      	movs	r2, #16
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d018      	beq.n	80031da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d108      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d024      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
 80031c6:	e01f      	b.n	8003208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
 80031d8:	e016      	b.n	8003208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0208 	bic.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	2220      	movs	r2, #32
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 808f 	beq.w	8003338 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8087 	beq.w	8003338 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	2220      	movs	r2, #32
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b05      	cmp	r3, #5
 8003240:	d136      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_IRQHandler+0x1da>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003286:	223f      	movs	r2, #63	@ 0x3f
 8003288:	409a      	lsls	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d07e      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
        }
        return;
 80032ae:	e079      	b.n	80033a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01d      	beq.n	80032fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10d      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d031      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
 80032dc:	e02c      	b.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000
 80032e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d023      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
 80032f8:	e01e      	b.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10f      	bne.n	8003328 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0210 	bic.w	r2, r2, #16
 8003316:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d032      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d022      	beq.n	8003392 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2205      	movs	r2, #5
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	d307      	bcc.n	8003380 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <HAL_DMA_IRQHandler+0x2cc>
 800337e:	e000      	b.n	8003382 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003380:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033a4:	bf00      	nop
    }
  }
}
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d108      	bne.n	80033ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ea:	e007      	b.n	80033fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	3b10      	subs	r3, #16
 8003418:	4a14      	ldr	r2, [pc, #80]	@ (800346c <DMA_CalcBaseAndBitshift+0x64>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003422:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <DMA_CalcBaseAndBitshift+0x68>)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d909      	bls.n	800344a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58
 8003448:	e007      	b.n	800345a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	aaaaaaab 	.word	0xaaaaaaab
 8003470:	080080d0 	.word	0x080080d0

08003474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11f      	bne.n	80034ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d856      	bhi.n	8003542 <DMA_CheckFifoParam+0xce>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <DMA_CheckFifoParam+0x28>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034bf 	.word	0x080034bf
 80034a4:	080034ad 	.word	0x080034ad
 80034a8:	08003543 	.word	0x08003543
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d046      	beq.n	8003546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034bc:	e043      	b.n	8003546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034c6:	d140      	bne.n	800354a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034cc:	e03d      	b.n	800354a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d6:	d121      	bne.n	800351c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d837      	bhi.n	800354e <DMA_CheckFifoParam+0xda>
 80034de:	a201      	add	r2, pc, #4	@ (adr r2, 80034e4 <DMA_CheckFifoParam+0x70>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	080034fb 	.word	0x080034fb
 80034ec:	080034f5 	.word	0x080034f5
 80034f0:	0800350d 	.word	0x0800350d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e030      	b.n	800355c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d025      	beq.n	8003552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e022      	b.n	8003552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003514:	d11f      	bne.n	8003556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800351a:	e01c      	b.n	8003556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d903      	bls.n	800352a <DMA_CheckFifoParam+0xb6>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d003      	beq.n	8003530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003528:	e018      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      break;
 800352e:	e015      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e00b      	b.n	800355a <DMA_CheckFifoParam+0xe6>
      break;
 8003542:	bf00      	nop
 8003544:	e00a      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e008      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e006      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
 8003550:	e004      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;   
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
    }
  } 
  
  return status; 
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	@ 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e159      	b.n	800383c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003588:	2201      	movs	r2, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	f040 8148 	bne.w	8003836 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d005      	beq.n	80035be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d130      	bne.n	8003620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f4:	2201      	movs	r2, #1
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 0201 	and.w	r2, r3, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b03      	cmp	r3, #3
 800362a:	d017      	beq.n	800365c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d123      	bne.n	80036b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	08da      	lsrs	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3208      	adds	r2, #8
 8003670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	220f      	movs	r2, #15
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	69b9      	ldr	r1, [r7, #24]
 80036ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2203      	movs	r2, #3
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0203 	and.w	r2, r3, #3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a2 	beq.w	8003836 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b57      	ldr	r3, [pc, #348]	@ (8003854 <HAL_GPIO_Init+0x2e8>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	4a56      	ldr	r2, [pc, #344]	@ (8003854 <HAL_GPIO_Init+0x2e8>)
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003700:	6453      	str	r3, [r2, #68]	@ 0x44
 8003702:	4b54      	ldr	r3, [pc, #336]	@ (8003854 <HAL_GPIO_Init+0x2e8>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800370e:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_GPIO_Init+0x2ec>)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	220f      	movs	r2, #15
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a49      	ldr	r2, [pc, #292]	@ (800385c <HAL_GPIO_Init+0x2f0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d019      	beq.n	800376e <HAL_GPIO_Init+0x202>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a48      	ldr	r2, [pc, #288]	@ (8003860 <HAL_GPIO_Init+0x2f4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0x1fe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a47      	ldr	r2, [pc, #284]	@ (8003864 <HAL_GPIO_Init+0x2f8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_GPIO_Init+0x1fa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a46      	ldr	r2, [pc, #280]	@ (8003868 <HAL_GPIO_Init+0x2fc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x1f6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a45      	ldr	r2, [pc, #276]	@ (800386c <HAL_GPIO_Init+0x300>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_GPIO_Init+0x1f2>
 800375a:	2304      	movs	r3, #4
 800375c:	e008      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800375e:	2307      	movs	r3, #7
 8003760:	e006      	b.n	8003770 <HAL_GPIO_Init+0x204>
 8003762:	2303      	movs	r3, #3
 8003764:	e004      	b.n	8003770 <HAL_GPIO_Init+0x204>
 8003766:	2302      	movs	r3, #2
 8003768:	e002      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800376e:	2300      	movs	r3, #0
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	f002 0203 	and.w	r2, r2, #3
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	4093      	lsls	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003780:	4935      	ldr	r1, [pc, #212]	@ (8003858 <HAL_GPIO_Init+0x2ec>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	3302      	adds	r3, #2
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b38      	ldr	r3, [pc, #224]	@ (8003870 <HAL_GPIO_Init+0x304>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003806:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <HAL_GPIO_Init+0x304>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380c:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <HAL_GPIO_Init+0x304>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003830:	4a0f      	ldr	r2, [pc, #60]	@ (8003870 <HAL_GPIO_Init+0x304>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	f67f aea2 	bls.w	8003588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40013800 	.word	0x40013800
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400
 8003864:	40020800 	.word	0x40020800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40021000 	.word	0x40021000
 8003870:	40013c00 	.word	0x40013c00

08003874 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e128      	b.n	8003ad8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a90      	ldr	r2, [pc, #576]	@ (8003ae0 <HAL_I2S_Init+0x26c>)
 800389e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fe fa07 	bl	8001cb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80038bc:	f023 030f 	bic.w	r3, r3, #15
 80038c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d060      	beq.n	8003994 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038da:	2310      	movs	r3, #16
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e001      	b.n	80038e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038e0:	2320      	movs	r3, #32
 80038e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d802      	bhi.n	80038f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f001 fa94 	bl	8004e20 <HAL_RCCEx_GetPeriphCLKFreq>
 80038f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003902:	d125      	bne.n	8003950 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	fbb2 f2f3 	udiv	r2, r2, r3
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	3305      	adds	r3, #5
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e01f      	b.n	800396e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	fbb2 f2f3 	udiv	r2, r2, r3
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	3305      	adds	r3, #5
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	e00e      	b.n	800396e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fbb2 f2f3 	udiv	r2, r2, r3
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	3305      	adds	r3, #5
 800396c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae4 <HAL_I2S_Init+0x270>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	08db      	lsrs	r3, r3, #3
 8003978:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e003      	b.n	800399c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003994:	2302      	movs	r3, #2
 8003996:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d902      	bls.n	80039a8 <HAL_I2S_Init+0x134>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2bff      	cmp	r3, #255	@ 0xff
 80039a6:	d907      	bls.n	80039b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ac:	f043 0210 	orr.w	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e08f      	b.n	8003ad8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	ea42 0103 	orr.w	r1, r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039d6:	f023 030f 	bic.w	r3, r3, #15
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6851      	ldr	r1, [r2, #4]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6892      	ldr	r2, [r2, #8]
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68d2      	ldr	r2, [r2, #12]
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6992      	ldr	r2, [r2, #24]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d161      	bne.n	8003ac8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a38      	ldr	r2, [pc, #224]	@ (8003ae8 <HAL_I2S_Init+0x274>)
 8003a08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a37      	ldr	r2, [pc, #220]	@ (8003aec <HAL_I2S_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_I2S_Init+0x1a4>
 8003a14:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_I2S_Init+0x27c>)
 8003a16:	e001      	b.n	8003a1c <HAL_I2S_Init+0x1a8>
 8003a18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	4932      	ldr	r1, [pc, #200]	@ (8003aec <HAL_I2S_Init+0x278>)
 8003a24:	428a      	cmp	r2, r1
 8003a26:	d101      	bne.n	8003a2c <HAL_I2S_Init+0x1b8>
 8003a28:	4a31      	ldr	r2, [pc, #196]	@ (8003af0 <HAL_I2S_Init+0x27c>)
 8003a2a:	e001      	b.n	8003a30 <HAL_I2S_Init+0x1bc>
 8003a2c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a34:	f023 030f 	bic.w	r3, r3, #15
 8003a38:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003aec <HAL_I2S_Init+0x278>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_I2S_Init+0x1d4>
 8003a44:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <HAL_I2S_Init+0x27c>)
 8003a46:	e001      	b.n	8003a4c <HAL_I2S_Init+0x1d8>
 8003a48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a25      	ldr	r2, [pc, #148]	@ (8003aec <HAL_I2S_Init+0x278>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_I2S_Init+0x1ea>
 8003a5a:	4b25      	ldr	r3, [pc, #148]	@ (8003af0 <HAL_I2S_Init+0x27c>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2S_Init+0x1ee>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6e:	d003      	beq.n	8003a78 <HAL_I2S_Init+0x204>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	897b      	ldrh	r3, [r7, #10]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ab0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8003aec <HAL_I2S_Init+0x278>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2S_Init+0x24c>
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_I2S_Init+0x27c>)
 8003abe:	e001      	b.n	8003ac4 <HAL_I2S_Init+0x250>
 8003ac0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ac4:	897a      	ldrh	r2, [r7, #10]
 8003ac6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08003dc9 	.word	0x08003dc9
 8003ae4:	cccccccd 	.word	0xcccccccd
 8003ae8:	08003edd 	.word	0x08003edd
 8003aec:	40003800 	.word	0x40003800
 8003af0:	40003400 	.word	0x40003400

08003af4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_I2S_Transmit_DMA+0x1a>
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e08a      	b.n	8003c28 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e082      	b.n	8003c28 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2S_Transmit_DMA+0x3e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e07a      	b.n	8003c28 <HAL_I2S_Transmit_DMA+0x134>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d002      	beq.n	8003b66 <HAL_I2S_Transmit_DMA+0x72>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d10a      	bne.n	8003b7c <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b7a:	e005      	b.n	8003b88 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	4a28      	ldr	r2, [pc, #160]	@ (8003c30 <HAL_I2S_Transmit_DMA+0x13c>)
 8003b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	4a27      	ldr	r2, [pc, #156]	@ (8003c34 <HAL_I2S_Transmit_DMA+0x140>)
 8003b96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <HAL_I2S_Transmit_DMA+0x144>)
 8003b9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ba8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003bb0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003bb8:	f7ff f984 	bl	8002ec4 <HAL_DMA_Start_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00f      	beq.n	8003be2 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e022      	b.n	8003c28 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0202 	orr.w	r2, r2, #2
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c24:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08003ca7 	.word	0x08003ca7
 8003c34:	08003c65 	.word	0x08003c65
 8003c38:	08003cc3 	.word	0x08003cc3

08003c3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10e      	bne.n	8003c98 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0202 	bic.w	r2, r2, #2
 8003c88:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7fd fb9d 	bl	80013d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7fd fb57 	bl	8001368 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0203 	bic.w	r2, r2, #3
 8003cde:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	f043 0208 	orr.w	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ffa5 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10e      	bne.n	8003d62 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d52:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd fb3b 	bl	80013d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	1c9a      	adds	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10e      	bne.n	8003dc0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003db0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ff3e 	bl	8003c3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d13a      	bne.n	8003e5a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d109      	bne.n	8003e02 <I2S_IRQHandler+0x3a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d102      	bne.n	8003e02 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ffb4 	bl	8003d6a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b40      	cmp	r3, #64	@ 0x40
 8003e0a:	d126      	bne.n	8003e5a <I2S_IRQHandler+0x92>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d11f      	bne.n	8003e5a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e28:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fefb 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d136      	bne.n	8003ed4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d109      	bne.n	8003e84 <I2S_IRQHandler+0xbc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b80      	cmp	r3, #128	@ 0x80
 8003e7c:	d102      	bne.n	8003e84 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff45 	bl	8003d0e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d122      	bne.n	8003ed4 <I2S_IRQHandler+0x10c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d11b      	bne.n	8003ed4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003eaa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0204 	orr.w	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff febe 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a92      	ldr	r2, [pc, #584]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ef6:	4b92      	ldr	r3, [pc, #584]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef8:	e001      	b.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003efa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a8b      	ldr	r2, [pc, #556]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f14:	4b8a      	ldr	r3, [pc, #552]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f16:	e001      	b.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f28:	d004      	beq.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8099 	bne.w	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f925 	bl	8004198 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9c8 	bl	80042f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d13a      	bne.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d035      	beq.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a6e      	ldr	r2, [pc, #440]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f86:	4b6e      	ldr	r3, [pc, #440]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f88:	e001      	b.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4969      	ldr	r1, [pc, #420]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f96:	428b      	cmp	r3, r1
 8003f98:	d101      	bne.n	8003f9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f9a:	4b69      	ldr	r3, [pc, #420]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9c:	e001      	b.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fa6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fe34 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	f040 80c3 	bne.w	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80bd 	beq.w	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800400e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a49      	ldr	r2, [pc, #292]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800401a:	4b49      	ldr	r3, [pc, #292]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800401c:	e001      	b.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800401e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4944      	ldr	r1, [pc, #272]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800402a:	428b      	cmp	r3, r1
 800402c:	d101      	bne.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800402e:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004030:	e001      	b.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004032:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004036:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800403a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0204 	orr.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fdf6 	bl	8003c50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004064:	e089      	b.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d107      	bne.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8be 	bl	80041fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8fd 	bl	8004294 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b40      	cmp	r3, #64	@ 0x40
 80040a2:	d12f      	bne.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02a      	beq.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1e      	ldr	r2, [pc, #120]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ca:	e001      	b.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4919      	ldr	r1, [pc, #100]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d101      	bne.n	80040e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040dc:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040de:	e001      	b.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fda6 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d136      	bne.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d031      	beq.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a07      	ldr	r2, [pc, #28]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004122:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004124:	e001      	b.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4902      	ldr	r1, [pc, #8]	@ (800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004132:	428b      	cmp	r3, r1
 8004134:	d106      	bne.n	8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004136:	4b02      	ldr	r3, [pc, #8]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004138:	e006      	b.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800413a:	bf00      	nop
 800413c:	40003800 	.word	0x40003800
 8004140:	40003400 	.word	0x40003400
 8004144:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004148:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800414c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800415c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f043 0204 	orr.w	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fd6c 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004178:	e000      	b.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800417a:	bf00      	nop
}
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	1c99      	adds	r1, r3, #2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ffc9 	bl	8004184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	1c99      	adds	r1, r3, #2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6251      	str	r1, [r2, #36]	@ 0x24
 800420e:	8819      	ldrh	r1, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <I2SEx_TxISR_I2SExt+0x90>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <I2SEx_TxISR_I2SExt+0x22>
 800421a:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <I2SEx_TxISR_I2SExt+0x94>)
 800421c:	e001      	b.n	8004222 <I2SEx_TxISR_I2SExt+0x26>
 800421e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004222:	460a      	mov	r2, r1
 8004224:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d121      	bne.n	8004282 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a12      	ldr	r2, [pc, #72]	@ (800428c <I2SEx_TxISR_I2SExt+0x90>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <I2SEx_TxISR_I2SExt+0x50>
 8004248:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <I2SEx_TxISR_I2SExt+0x94>)
 800424a:	e001      	b.n	8004250 <I2SEx_TxISR_I2SExt+0x54>
 800424c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	490d      	ldr	r1, [pc, #52]	@ (800428c <I2SEx_TxISR_I2SExt+0x90>)
 8004258:	428b      	cmp	r3, r1
 800425a:	d101      	bne.n	8004260 <I2SEx_TxISR_I2SExt+0x64>
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <I2SEx_TxISR_I2SExt+0x94>)
 800425e:	e001      	b.n	8004264 <I2SEx_TxISR_I2SExt+0x68>
 8004260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004264:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004268:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff81 	bl	8004184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40003800 	.word	0x40003800
 8004290:	40003400 	.word	0x40003400

08004294 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68d8      	ldr	r0, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	1c99      	adds	r1, r3, #2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042ac:	b282      	uxth	r2, r0
 80042ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d113      	bne.n	80042f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff4a 	bl	8004184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a20      	ldr	r2, [pc, #128]	@ (8004388 <I2SEx_RxISR_I2SExt+0x90>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d101      	bne.n	800430e <I2SEx_RxISR_I2SExt+0x16>
 800430a:	4b20      	ldr	r3, [pc, #128]	@ (800438c <I2SEx_RxISR_I2SExt+0x94>)
 800430c:	e001      	b.n	8004312 <I2SEx_RxISR_I2SExt+0x1a>
 800430e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004312:	68d8      	ldr	r0, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	1c99      	adds	r1, r3, #2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800431e:	b282      	uxth	r2, r0
 8004320:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d121      	bne.n	800437e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a12      	ldr	r2, [pc, #72]	@ (8004388 <I2SEx_RxISR_I2SExt+0x90>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d101      	bne.n	8004348 <I2SEx_RxISR_I2SExt+0x50>
 8004344:	4b11      	ldr	r3, [pc, #68]	@ (800438c <I2SEx_RxISR_I2SExt+0x94>)
 8004346:	e001      	b.n	800434c <I2SEx_RxISR_I2SExt+0x54>
 8004348:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	490d      	ldr	r1, [pc, #52]	@ (8004388 <I2SEx_RxISR_I2SExt+0x90>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d101      	bne.n	800435c <I2SEx_RxISR_I2SExt+0x64>
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <I2SEx_RxISR_I2SExt+0x94>)
 800435a:	e001      	b.n	8004360 <I2SEx_RxISR_I2SExt+0x68>
 800435c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004360:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004364:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff03 	bl	8004184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40003800 	.word	0x40003800
 800438c:	40003400 	.word	0x40003400

08004390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e267      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d075      	beq.n	800449a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ae:	4b88      	ldr	r3, [pc, #544]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d00c      	beq.n	80043d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b85      	ldr	r3, [pc, #532]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d112      	bne.n	80043ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4b82      	ldr	r3, [pc, #520]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043d2:	d10b      	bne.n	80043ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	4b7e      	ldr	r3, [pc, #504]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05b      	beq.n	8004498 <HAL_RCC_OscConfig+0x108>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d157      	bne.n	8004498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e242      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x74>
 80043f6:	4b76      	ldr	r3, [pc, #472]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e01d      	b.n	8004440 <HAL_RCC_OscConfig+0xb0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x98>
 800440e:	4b70      	ldr	r3, [pc, #448]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6f      	ldr	r2, [pc, #444]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b6d      	ldr	r3, [pc, #436]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6c      	ldr	r2, [pc, #432]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0xb0>
 8004428:	4b69      	ldr	r3, [pc, #420]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a68      	ldr	r2, [pc, #416]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800442e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b66      	ldr	r3, [pc, #408]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a65      	ldr	r2, [pc, #404]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800443a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800443e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d013      	beq.n	8004470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fd fe54 	bl	80020f4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004450:	f7fd fe50 	bl	80020f4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	@ 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e207      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b5b      	ldr	r3, [pc, #364]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0xc0>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd fe40 	bl	80020f4 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004478:	f7fd fe3c 	bl	80020f4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	@ 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e1f3      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	4b51      	ldr	r3, [pc, #324]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0xe8>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d063      	beq.n	800456e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044a6:	4b4a      	ldr	r3, [pc, #296]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d11c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b44      	ldr	r3, [pc, #272]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d116      	bne.n	80044f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_RCC_OscConfig+0x152>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e1c7      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4937      	ldr	r1, [pc, #220]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f6:	e03a      	b.n	800456e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004500:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_RCC_OscConfig+0x244>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fd fdf5 	bl	80020f4 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450e:	f7fd fdf1 	bl	80020f4 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1a8      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4925      	ldr	r1, [pc, #148]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	e015      	b.n	800456e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004542:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <HAL_RCC_OscConfig+0x244>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fdd4 	bl	80020f4 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fd fdd0 	bl	80020f4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e187      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d036      	beq.n	80045e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_RCC_OscConfig+0x248>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fd fdb4 	bl	80020f4 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004590:	f7fd fdb0 	bl	80020f4 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e167      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_OscConfig+0x240>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x200>
 80045ae:	e01b      	b.n	80045e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <HAL_RCC_OscConfig+0x248>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fd fd9d 	bl	80020f4 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	e00e      	b.n	80045dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fd fd99 	bl	80020f4 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d907      	bls.n	80045dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e150      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
 80045d0:	40023800 	.word	0x40023800
 80045d4:	42470000 	.word	0x42470000
 80045d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b88      	ldr	r3, [pc, #544]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ea      	bne.n	80045be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8097 	beq.w	8004724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b81      	ldr	r3, [pc, #516]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b7d      	ldr	r3, [pc, #500]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	4a7c      	ldr	r2, [pc, #496]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	@ 0x40
 8004616:	4b7a      	ldr	r3, [pc, #488]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b77      	ldr	r3, [pc, #476]	@ (8004804 <HAL_RCC_OscConfig+0x474>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b74      	ldr	r3, [pc, #464]	@ (8004804 <HAL_RCC_OscConfig+0x474>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a73      	ldr	r2, [pc, #460]	@ (8004804 <HAL_RCC_OscConfig+0x474>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fd fd59 	bl	80020f4 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fd fd55 	bl	80020f4 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e10c      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b6a      	ldr	r3, [pc, #424]	@ (8004804 <HAL_RCC_OscConfig+0x474>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x2ea>
 800466c:	4b64      	ldr	r3, [pc, #400]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a63      	ldr	r2, [pc, #396]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x324>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b05      	cmp	r3, #5
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x30c>
 8004682:	4b5f      	ldr	r3, [pc, #380]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	@ 0x70
 800468e:	4b5c      	ldr	r3, [pc, #368]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	4a5b      	ldr	r2, [pc, #364]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	@ 0x70
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0x324>
 800469c:	4b58      	ldr	r3, [pc, #352]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4a57      	ldr	r2, [pc, #348]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a8:	4b55      	ldr	r3, [pc, #340]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4a54      	ldr	r2, [pc, #336]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fd fd1a 	bl	80020f4 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fd fd16 	bl	80020f4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0cb      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ee      	beq.n	80046c4 <HAL_RCC_OscConfig+0x334>
 80046e6:	e014      	b.n	8004712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e8:	f7fd fd04 	bl	80020f4 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd fd00 	bl	80020f4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0b5      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d105      	bne.n	8004724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004718:	4b39      	ldr	r3, [pc, #228]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	4a38      	ldr	r2, [pc, #224]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a1 	beq.w	8004870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800472e:	4b34      	ldr	r3, [pc, #208]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b08      	cmp	r3, #8
 8004738:	d05c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d141      	bne.n	80047c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCC_OscConfig+0x478>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fd fcd4 	bl	80020f4 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd fcd0 	bl	80020f4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e087      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	4b27      	ldr	r3, [pc, #156]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	491b      	ldr	r1, [pc, #108]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004798:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <HAL_RCC_OscConfig+0x478>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479e:	f7fd fca9 	bl	80020f4 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fd fca5 	bl	80020f4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e05c      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x416>
 80047c4:	e054      	b.n	8004870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_RCC_OscConfig+0x478>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fc92 	bl	80020f4 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fd fc8e 	bl	80020f4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e045      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <HAL_RCC_OscConfig+0x470>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x444>
 80047f2:	e03d      	b.n	8004870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e038      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
 8004800:	40023800 	.word	0x40023800
 8004804:	40007000 	.word	0x40007000
 8004808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800480c:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <HAL_RCC_OscConfig+0x4ec>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d028      	beq.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d121      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d11a      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004844:	4293      	cmp	r3, r2
 8004846:	d111      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	3b01      	subs	r3, #1
 8004856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0cc      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004894:	4b68      	ldr	r3, [pc, #416]	@ (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d90c      	bls.n	80048bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b65      	ldr	r3, [pc, #404]	@ (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b63      	ldr	r3, [pc, #396]	@ (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0b8      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d4:	4b59      	ldr	r3, [pc, #356]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a58      	ldr	r2, [pc, #352]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ec:	4b53      	ldr	r3, [pc, #332]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a52      	ldr	r2, [pc, #328]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f8:	4b50      	ldr	r3, [pc, #320]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	494d      	ldr	r1, [pc, #308]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d044      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b47      	ldr	r3, [pc, #284]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d119      	bne.n	800495e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e07f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d003      	beq.n	800493e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	2b03      	cmp	r3, #3
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e06f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e067      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495e:	4b37      	ldr	r3, [pc, #220]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4934      	ldr	r1, [pc, #208]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004970:	f7fd fbc0 	bl	80020f4 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fd fbbc 	bl	80020f4 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e04f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 020c 	and.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	429a      	cmp	r2, r3
 800499e:	d1eb      	bne.n	8004978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049a0:	4b25      	ldr	r3, [pc, #148]	@ (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20c      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b22      	ldr	r3, [pc, #136]	@ (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b20      	ldr	r3, [pc, #128]	@ (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e032      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4916      	ldr	r1, [pc, #88]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f2:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	490e      	ldr	r1, [pc, #56]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a06:	f000 f821 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	490a      	ldr	r1, [pc, #40]	@ (8004a40 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a09      	ldr	r2, [pc, #36]	@ (8004a44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a22:	4b09      	ldr	r3, [pc, #36]	@ (8004a48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fd fb20 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023c00 	.word	0x40023c00
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	080080b8 	.word	0x080080b8
 8004a44:	20000000 	.word	0x20000000
 8004a48:	20000004 	.word	0x20000004

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a50:	b090      	sub	sp, #64	@ 0x40
 8004a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a64:	4b59      	ldr	r3, [pc, #356]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d00d      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x40>
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	f200 80a1 	bhi.w	8004bb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7e:	e09b      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b53      	ldr	r3, [pc, #332]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a84:	e09b      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a86:	4b53      	ldr	r3, [pc, #332]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a8a:	e098      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a96:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4b47      	ldr	r3, [pc, #284]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ab8:	fb03 f201 	mul.w	r2, r3, r1
 8004abc:	2300      	movs	r3, #0
 8004abe:	fb00 f303 	mul.w	r3, r0, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	4a43      	ldr	r2, [pc, #268]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ac6:	fba0 1202 	umull	r1, r2, r0, r2
 8004aca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004acc:	460a      	mov	r2, r1
 8004ace:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad2:	4413      	add	r3, r2
 8004ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad8:	2200      	movs	r2, #0
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	61fa      	str	r2, [r7, #28]
 8004ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ae6:	f7fc f853 	bl	8000b90 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4613      	mov	r3, r2
 8004af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004af2:	e053      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af4:	4b35      	ldr	r3, [pc, #212]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	2200      	movs	r2, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	617a      	str	r2, [r7, #20]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b06:	f04f 0b00 	mov.w	fp, #0
 8004b0a:	4652      	mov	r2, sl
 8004b0c:	465b      	mov	r3, fp
 8004b0e:	f04f 0000 	mov.w	r0, #0
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1c:	0150      	lsls	r0, r2, #5
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	ebb2 080a 	subs.w	r8, r2, sl
 8004b26:	eb63 090b 	sbc.w	r9, r3, fp
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b3e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b42:	eb63 0509 	sbc.w	r5, r3, r9
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	00eb      	lsls	r3, r5, #3
 8004b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b54:	00e2      	lsls	r2, r4, #3
 8004b56:	4614      	mov	r4, r2
 8004b58:	461d      	mov	r5, r3
 8004b5a:	eb14 030a 	adds.w	r3, r4, sl
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	eb45 030b 	adc.w	r3, r5, fp
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b72:	4629      	mov	r1, r5
 8004b74:	028b      	lsls	r3, r1, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	028a      	lsls	r2, r1, #10
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b86:	2200      	movs	r2, #0
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	60fa      	str	r2, [r7, #12]
 8004b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b90:	f7fb fffe 	bl	8000b90 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bb6:	e002      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3740      	adds	r7, #64	@ 0x40
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	017d7840 	.word	0x017d7840

08004bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	@ (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000000 	.word	0x20000000

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf4:	f7ff fff0 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	080080c8 	.word	0x080080c8

08004c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c1c:	f7ff ffdc 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0b5b      	lsrs	r3, r3, #13
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	080080c8 	.word	0x080080c8

08004c40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d038      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c68:	4b68      	ldr	r3, [pc, #416]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c6e:	f7fd fa41 	bl	80020f4 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c76:	f7fd fa3d 	bl	80020f4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0bd      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c88:	4b61      	ldr	r3, [pc, #388]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	071b      	lsls	r3, r3, #28
 8004ca6:	495a      	ldr	r1, [pc, #360]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cae:	4b57      	ldr	r3, [pc, #348]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb4:	f7fd fa1e 	bl	80020f4 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cbc:	f7fd fa1a 	bl	80020f4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e09a      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cce:	4b50      	ldr	r3, [pc, #320]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8083 	beq.w	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	4b48      	ldr	r3, [pc, #288]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	4a47      	ldr	r2, [pc, #284]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf8:	4b45      	ldr	r3, [pc, #276]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d04:	4b43      	ldr	r3, [pc, #268]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a42      	ldr	r2, [pc, #264]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d10:	f7fd f9f0 	bl	80020f4 <HAL_GetTick>
 8004d14:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fd f9ec 	bl	80020f4 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e06c      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d36:	4b36      	ldr	r3, [pc, #216]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d02f      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d028      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d54:	4b2e      	ldr	r3, [pc, #184]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d64:	4b2c      	ldr	r3, [pc, #176]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d6a:	4a29      	ldr	r2, [pc, #164]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d70:	4b27      	ldr	r3, [pc, #156]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d114      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd f9ba 	bl	80020f4 <HAL_GetTick>
 8004d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd f9b6 	bl	80020f4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e034      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004db4:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc8:	4911      	ldr	r1, [pc, #68]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
 8004dce:	e005      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	4909      	ldr	r1, [pc, #36]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7d1a      	ldrb	r2, [r3, #20]
 8004dfe:	4b07      	ldr	r3, [pc, #28]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e00:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	42470068 	.word	0x42470068
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000
 8004e18:	42470e40 	.word	0x42470e40
 8004e1c:	424711e0 	.word	0x424711e0

08004e20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d141      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e3e:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e54:	d131      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e56:	4b20      	ldr	r3, [pc, #128]	@ (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e58:	617b      	str	r3, [r7, #20]
          break;
 8004e5a:	e031      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e68:	d109      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e74:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e008      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e88:	4a15      	ldr	r2, [pc, #84]	@ (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e90:	4b10      	ldr	r3, [pc, #64]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eaa:	0f1b      	lsrs	r3, r3, #28
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	617b      	str	r3, [r7, #20]
          break;
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
          break;
 8004ebe:	bf00      	nop
        }
      }
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004ec2:	bf00      	nop
    }
  }
  return frequency;
 8004ec4:	697b      	ldr	r3, [r7, #20]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	00bb8000 	.word	0x00bb8000
 8004edc:	017d7840 	.word	0x017d7840
 8004ee0:	00f42400 	.word	0x00f42400

08004ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e042      	b.n	8004f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc ff6a 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	@ 0x24
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fe6b 	bl	8005c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d112      	bne.n	8004fc4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_UART_Receive_DMA+0x26>
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e00b      	b.n	8004fc6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fbc2 	bl	8005744 <UART_Start_Receive_DMA>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800500e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_UART_IRQHandler+0x66>
 8005022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fd29 	bl	8005a86 <UART_Receive_IT>
      return;
 8005034:	e25b      	b.n	80054ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80de 	beq.w	80051fc <HAL_UART_IRQHandler+0x22c>
 8005040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800504c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005050:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80d1 	beq.w	80051fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_UART_IRQHandler+0xae>
 8005066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800506a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_UART_IRQHandler+0xd2>
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f043 0202 	orr.w	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_UART_IRQHandler+0xf6>
 80050ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	f043 0204 	orr.w	r2, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d011      	beq.n	80050f6 <HAL_UART_IRQHandler+0x126>
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d105      	bne.n	80050ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0208 	orr.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 81f2 	beq.w	80054e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_UART_IRQHandler+0x14e>
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fcb4 	bl	8005a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_UART_IRQHandler+0x17a>
 8005142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d04f      	beq.n	80051ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fbbc 	bl	80058c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d141      	bne.n	80051e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800518a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800518e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1d9      	bne.n	800515e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d013      	beq.n	80051da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	4a7e      	ldr	r2, [pc, #504]	@ (80053b0 <HAL_UART_IRQHandler+0x3e0>)
 80051b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd ff48 	bl	8003054 <HAL_DMA_Abort_IT>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e00e      	b.n	80051f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f99e 	bl	800551c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e00a      	b.n	80051f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f99a 	bl	800551c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	e006      	b.n	80051f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f996 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051f6:	e175      	b.n	80054e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	bf00      	nop
    return;
 80051fa:	e173      	b.n	80054e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	2b01      	cmp	r3, #1
 8005202:	f040 814f 	bne.w	80054a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 8148 	beq.w	80054a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8141 	beq.w	80054a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	f040 80b6 	bne.w	80053b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8145 	beq.w	80054e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005266:	429a      	cmp	r2, r3
 8005268:	f080 813e 	bcs.w	80054e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005272:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527e:	f000 8088 	beq.w	8005392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005298:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800529c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1d9      	bne.n	8005282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3314      	adds	r3, #20
 80052d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e1      	bne.n	80052ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800531a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800531c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800532e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005330:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005334:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800533c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e3      	bne.n	800530a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	330c      	adds	r3, #12
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005362:	f023 0310 	bic.w	r3, r3, #16
 8005366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005374:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005376:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800537a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e3      	bne.n	8005350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538c:	4618      	mov	r0, r3
 800538e:	f7fd fdf1 	bl	8002f74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8c1 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ae:	e09b      	b.n	80054e8 <HAL_UART_IRQHandler+0x518>
 80053b0:	0800598f 	.word	0x0800598f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 808e 	beq.w	80054ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8089 	beq.w	80054ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005400:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800540c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e3      	bne.n	80053da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3314      	adds	r3, #20
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	623b      	str	r3, [r7, #32]
   return(result);
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005436:	633a      	str	r2, [r7, #48]	@ 0x30
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800543c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e3      	bne.n	8005412 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	60fb      	str	r3, [r7, #12]
   return(result);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0310 	bic.w	r3, r3, #16
 800546e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	617b      	str	r3, [r7, #20]
   return(result);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e3      	bne.n	8005458 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f847 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054a2:	e023      	b.n	80054ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <HAL_UART_IRQHandler+0x4f4>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa7a 	bl	80059b6 <UART_Transmit_IT>
    return;
 80054c2:	e014      	b.n	80054ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <HAL_UART_IRQHandler+0x51e>
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 faba 	bl	8005a56 <UART_EndTransmit_IT>
    return;
 80054e2:	e004      	b.n	80054ee <HAL_UART_IRQHandler+0x51e>
    return;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <HAL_UART_IRQHandler+0x51e>
      return;
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <HAL_UART_IRQHandler+0x51e>
      return;
 80054ec:	bf00      	nop
  }
}
 80054ee:	37e8      	adds	r7, #232	@ 0xe8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b09c      	sub	sp, #112	@ 0x70
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d172      	bne.n	800564a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005566:	2200      	movs	r2, #0
 8005568:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800557a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800558a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800558c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80055b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055be:	647a      	str	r2, [r7, #68]	@ 0x44
 80055c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e5      	bne.n	80055d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005608:	2220      	movs	r2, #32
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	2b01      	cmp	r3, #1
 8005614:	d119      	bne.n	800564a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	60fb      	str	r3, [r7, #12]
   return(result);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f023 0310 	bic.w	r3, r3, #16
 800562c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800562e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005636:	61fa      	str	r2, [r7, #28]
 8005638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	617b      	str	r3, [r7, #20]
   return(result);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800564c:	2200      	movs	r2, #0
 800564e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800565a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800565c:	4619      	mov	r1, r3
 800565e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005660:	f7ff ff66 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005664:	e002      	b.n	800566c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005666:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005668:	f7fb feee 	bl	8001448 <HAL_UART_RxCpltCallback>
}
 800566c:	bf00      	nop
 800566e:	3770      	adds	r7, #112	@ 0x70
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005680:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	2b01      	cmp	r3, #1
 800568e:	d108      	bne.n	80056a2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	4619      	mov	r1, r3
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff ff48 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056a0:	e002      	b.n	80056a8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff ff30 	bl	8005508 <HAL_UART_RxHalfCpltCallback>
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056cc:	2b80      	cmp	r3, #128	@ 0x80
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b21      	cmp	r3, #33	@ 0x21
 80056e2:	d108      	bne.n	80056f6 <UART_DMAError+0x46>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f000 f8c1 	bl	8005878 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b22      	cmp	r3, #34	@ 0x22
 8005716:	d108      	bne.n	800572a <UART_DMAError+0x7a>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2200      	movs	r2, #0
 8005722:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005724:	68b8      	ldr	r0, [r7, #8]
 8005726:	f000 f8cf 	bl	80058c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	f043 0210 	orr.w	r2, r3, #16
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005736:	68b8      	ldr	r0, [r7, #8]
 8005738:	f7ff fef0 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b098      	sub	sp, #96	@ 0x60
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2222      	movs	r2, #34	@ 0x22
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	4a3e      	ldr	r2, [pc, #248]	@ (800586c <UART_Start_Receive_DMA+0x128>)
 8005772:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	4a3d      	ldr	r2, [pc, #244]	@ (8005870 <UART_Start_Receive_DMA+0x12c>)
 800577a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	4a3c      	ldr	r2, [pc, #240]	@ (8005874 <UART_Start_Receive_DMA+0x130>)
 8005782:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	2200      	movs	r2, #0
 800578a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800578c:	f107 0308 	add.w	r3, r7, #8
 8005790:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	f7fd fb8e 	bl	8002ec4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d019      	beq.n	80057fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80057e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	657b      	str	r3, [r7, #84]	@ 0x54
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800581a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800581c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	617b      	str	r3, [r7, #20]
   return(result);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005844:	653b      	str	r3, [r7, #80]	@ 0x50
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800584e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6a39      	ldr	r1, [r7, #32]
 8005854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	61fb      	str	r3, [r7, #28]
   return(result);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3760      	adds	r7, #96	@ 0x60
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	08005549 	.word	0x08005549
 8005870:	08005675 	.word	0x08005675
 8005874:	080056b1 	.word	0x080056b1

08005878 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b089      	sub	sp, #36	@ 0x24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	61ba      	str	r2, [r7, #24]
 80058a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6979      	ldr	r1, [r7, #20]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	613b      	str	r3, [r7, #16]
   return(result);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e5      	bne.n	8005880 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80058bc:	bf00      	nop
 80058be:	3724      	adds	r7, #36	@ 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b095      	sub	sp, #84	@ 0x54
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80058f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	61fb      	str	r3, [r7, #28]
   return(result);
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800592a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	2b01      	cmp	r3, #1
 800593e:	d119      	bne.n	8005974 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f023 0310 	bic.w	r3, r3, #16
 8005956:	647b      	str	r3, [r7, #68]	@ 0x44
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005960:	61ba      	str	r2, [r7, #24]
 8005962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	613b      	str	r3, [r7, #16]
   return(result);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005982:	bf00      	nop
 8005984:	3754      	adds	r7, #84	@ 0x54
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fdb7 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b21      	cmp	r3, #33	@ 0x21
 80059c8:	d13e      	bne.n	8005a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d114      	bne.n	80059fe <UART_Transmit_IT+0x48>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d110      	bne.n	80059fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	621a      	str	r2, [r3, #32]
 80059fc:	e008      	b.n	8005a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6211      	str	r1, [r2, #32]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10f      	bne.n	8005a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e000      	b.n	8005a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
  }
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fd3c 	bl	80054f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b08c      	sub	sp, #48	@ 0x30
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b22      	cmp	r3, #34	@ 0x22
 8005a98:	f040 80ae 	bne.w	8005bf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa4:	d117      	bne.n	8005ad6 <UART_Receive_IT+0x50>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ad4:	e026      	b.n	8005b24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae8:	d007      	beq.n	8005afa <UART_Receive_IT+0x74>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <UART_Receive_IT+0x82>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e008      	b.n	8005b1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d15d      	bne.n	8005bf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0220 	bic.w	r2, r2, #32
 8005b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d135      	bne.n	8005bea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	613b      	str	r3, [r7, #16]
   return(result);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	623a      	str	r2, [r7, #32]
 8005ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69f9      	ldr	r1, [r7, #28]
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e5      	bne.n	8005b84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d10a      	bne.n	8005bdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fca4 	bl	8005530 <HAL_UARTEx_RxEventCallback>
 8005be8:	e002      	b.n	8005bf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fb fc2c 	bl	8001448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e002      	b.n	8005bfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3730      	adds	r7, #48	@ 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c08:	b0c0      	sub	sp, #256	@ 0x100
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c20:	68d9      	ldr	r1, [r3, #12]
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	ea40 0301 	orr.w	r3, r0, r1
 8005c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c5c:	f021 010c 	bic.w	r1, r1, #12
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7e:	6999      	ldr	r1, [r3, #24]
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	ea40 0301 	orr.w	r3, r0, r1
 8005c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b8f      	ldr	r3, [pc, #572]	@ (8005ed0 <UART_SetConfig+0x2cc>)
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d005      	beq.n	8005ca4 <UART_SetConfig+0xa0>
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ed4 <UART_SetConfig+0x2d0>)
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d104      	bne.n	8005cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ca4:	f7fe ffb8 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8005ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cac:	e003      	b.n	8005cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cae:	f7fe ff9f 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8005cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc0:	f040 810c 	bne.w	8005edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	462b      	mov	r3, r5
 8005cda:	1891      	adds	r1, r2, r2
 8005cdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cde:	415b      	adcs	r3, r3
 8005ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	eb12 0801 	adds.w	r8, r2, r1
 8005cec:	4629      	mov	r1, r5
 8005cee:	eb43 0901 	adc.w	r9, r3, r1
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d06:	4690      	mov	r8, r2
 8005d08:	4699      	mov	r9, r3
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	eb18 0303 	adds.w	r3, r8, r3
 8005d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d14:	462b      	mov	r3, r5
 8005d16:	eb49 0303 	adc.w	r3, r9, r3
 8005d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d32:	460b      	mov	r3, r1
 8005d34:	18db      	adds	r3, r3, r3
 8005d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d38:	4613      	mov	r3, r2
 8005d3a:	eb42 0303 	adc.w	r3, r2, r3
 8005d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d48:	f7fa ff22 	bl	8000b90 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4b61      	ldr	r3, [pc, #388]	@ (8005ed8 <UART_SetConfig+0x2d4>)
 8005d52:	fba3 2302 	umull	r2, r3, r3, r2
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	011c      	lsls	r4, r3, #4
 8005d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	1891      	adds	r1, r2, r2
 8005d72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d74:	415b      	adcs	r3, r3
 8005d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d82:	4649      	mov	r1, r9
 8005d84:	eb43 0b01 	adc.w	fp, r3, r1
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9c:	4692      	mov	sl, r2
 8005d9e:	469b      	mov	fp, r3
 8005da0:	4643      	mov	r3, r8
 8005da2:	eb1a 0303 	adds.w	r3, sl, r3
 8005da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005daa:	464b      	mov	r3, r9
 8005dac:	eb4b 0303 	adc.w	r3, fp, r3
 8005db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	18db      	adds	r3, r3, r3
 8005dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dce:	4613      	mov	r3, r2
 8005dd0:	eb42 0303 	adc.w	r3, r2, r3
 8005dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005dde:	f7fa fed7 	bl	8000b90 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed8 <UART_SetConfig+0x2d4>)
 8005dea:	fba3 2301 	umull	r2, r3, r3, r1
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	2264      	movs	r2, #100	@ 0x64
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	1acb      	subs	r3, r1, r3
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dfe:	4b36      	ldr	r3, [pc, #216]	@ (8005ed8 <UART_SetConfig+0x2d4>)
 8005e00:	fba3 2302 	umull	r2, r3, r3, r2
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e0c:	441c      	add	r4, r3
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e30:	4641      	mov	r1, r8
 8005e32:	1851      	adds	r1, r2, r1
 8005e34:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e36:	4649      	mov	r1, r9
 8005e38:	414b      	adcs	r3, r1
 8005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e48:	4659      	mov	r1, fp
 8005e4a:	00cb      	lsls	r3, r1, #3
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e52:	4651      	mov	r1, sl
 8005e54:	00ca      	lsls	r2, r1, #3
 8005e56:	4610      	mov	r0, r2
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	189b      	adds	r3, r3, r2
 8005e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e64:	464b      	mov	r3, r9
 8005e66:	460a      	mov	r2, r1
 8005e68:	eb42 0303 	adc.w	r3, r2, r3
 8005e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e84:	460b      	mov	r3, r1
 8005e86:	18db      	adds	r3, r3, r3
 8005e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	eb42 0303 	adc.w	r3, r2, r3
 8005e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e9a:	f7fa fe79 	bl	8000b90 <__aeabi_uldivmod>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <UART_SetConfig+0x2d4>)
 8005ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	2164      	movs	r1, #100	@ 0x64
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	3332      	adds	r3, #50	@ 0x32
 8005eb6:	4a08      	ldr	r2, [pc, #32]	@ (8005ed8 <UART_SetConfig+0x2d4>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	f003 0207 	and.w	r2, r3, #7
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4422      	add	r2, r4
 8005eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ecc:	e106      	b.n	80060dc <UART_SetConfig+0x4d8>
 8005ece:	bf00      	nop
 8005ed0:	40011000 	.word	0x40011000
 8005ed4:	40011400 	.word	0x40011400
 8005ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005eee:	4642      	mov	r2, r8
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	1891      	adds	r1, r2, r2
 8005ef4:	6239      	str	r1, [r7, #32]
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005efe:	4641      	mov	r1, r8
 8005f00:	1854      	adds	r4, r2, r1
 8005f02:	4649      	mov	r1, r9
 8005f04:	eb43 0501 	adc.w	r5, r3, r1
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	00eb      	lsls	r3, r5, #3
 8005f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f16:	00e2      	lsls	r2, r4, #3
 8005f18:	4614      	mov	r4, r2
 8005f1a:	461d      	mov	r5, r3
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	18e3      	adds	r3, r4, r3
 8005f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f24:	464b      	mov	r3, r9
 8005f26:	eb45 0303 	adc.w	r3, r5, r3
 8005f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	008b      	lsls	r3, r1, #2
 8005f4e:	4621      	mov	r1, r4
 8005f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f54:	4621      	mov	r1, r4
 8005f56:	008a      	lsls	r2, r1, #2
 8005f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f5c:	f7fa fe18 	bl	8000b90 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b60      	ldr	r3, [pc, #384]	@ (80060e8 <UART_SetConfig+0x4e4>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011c      	lsls	r4, r3, #4
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	61b9      	str	r1, [r7, #24]
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f90:	4641      	mov	r1, r8
 8005f92:	1851      	adds	r1, r2, r1
 8005f94:	6139      	str	r1, [r7, #16]
 8005f96:	4649      	mov	r1, r9
 8005f98:	414b      	adcs	r3, r1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	00cb      	lsls	r3, r1, #3
 8005fac:	4651      	mov	r1, sl
 8005fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	00ca      	lsls	r2, r1, #3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fe8:	4649      	mov	r1, r9
 8005fea:	008b      	lsls	r3, r1, #2
 8005fec:	4641      	mov	r1, r8
 8005fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	008a      	lsls	r2, r1, #2
 8005ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ffa:	f7fa fdc9 	bl	8000b90 <__aeabi_uldivmod>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4611      	mov	r1, r2
 8006004:	4b38      	ldr	r3, [pc, #224]	@ (80060e8 <UART_SetConfig+0x4e4>)
 8006006:	fba3 2301 	umull	r2, r3, r3, r1
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	2264      	movs	r2, #100	@ 0x64
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	1acb      	subs	r3, r1, r3
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	3332      	adds	r3, #50	@ 0x32
 8006018:	4a33      	ldr	r2, [pc, #204]	@ (80060e8 <UART_SetConfig+0x4e4>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006024:	441c      	add	r4, r3
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800602a:	2200      	movs	r2, #0
 800602c:	673b      	str	r3, [r7, #112]	@ 0x70
 800602e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	415b      	adcs	r3, r3
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6039      	str	r1, [r7, #0]
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006076:	464b      	mov	r3, r9
 8006078:	460a      	mov	r2, r1
 800607a:	eb42 0303 	adc.w	r3, r2, r3
 800607e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	663b      	str	r3, [r7, #96]	@ 0x60
 800608a:	667a      	str	r2, [r7, #100]	@ 0x64
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006098:	4649      	mov	r1, r9
 800609a:	008b      	lsls	r3, r1, #2
 800609c:	4641      	mov	r1, r8
 800609e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a2:	4641      	mov	r1, r8
 80060a4:	008a      	lsls	r2, r1, #2
 80060a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060aa:	f7fa fd71 	bl	8000b90 <__aeabi_uldivmod>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4b0d      	ldr	r3, [pc, #52]	@ (80060e8 <UART_SetConfig+0x4e4>)
 80060b4:	fba3 1302 	umull	r1, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	2164      	movs	r1, #100	@ 0x64
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	3332      	adds	r3, #50	@ 0x32
 80060c6:	4a08      	ldr	r2, [pc, #32]	@ (80060e8 <UART_SetConfig+0x4e4>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f003 020f 	and.w	r2, r3, #15
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4422      	add	r2, r4
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060e2:	46bd      	mov	sp, r7
 80060e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e8:	51eb851f 	.word	0x51eb851f

080060ec <memset>:
 80060ec:	4402      	add	r2, r0
 80060ee:	4603      	mov	r3, r0
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d100      	bne.n	80060f6 <memset+0xa>
 80060f4:	4770      	bx	lr
 80060f6:	f803 1b01 	strb.w	r1, [r3], #1
 80060fa:	e7f9      	b.n	80060f0 <memset+0x4>

080060fc <__errno>:
 80060fc:	4b01      	ldr	r3, [pc, #4]	@ (8006104 <__errno+0x8>)
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	2000000c 	.word	0x2000000c

08006108 <__libc_init_array>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4d0d      	ldr	r5, [pc, #52]	@ (8006140 <__libc_init_array+0x38>)
 800610c:	4c0d      	ldr	r4, [pc, #52]	@ (8006144 <__libc_init_array+0x3c>)
 800610e:	1b64      	subs	r4, r4, r5
 8006110:	10a4      	asrs	r4, r4, #2
 8006112:	2600      	movs	r6, #0
 8006114:	42a6      	cmp	r6, r4
 8006116:	d109      	bne.n	800612c <__libc_init_array+0x24>
 8006118:	4d0b      	ldr	r5, [pc, #44]	@ (8006148 <__libc_init_array+0x40>)
 800611a:	4c0c      	ldr	r4, [pc, #48]	@ (800614c <__libc_init_array+0x44>)
 800611c:	f000 ffbe 	bl	800709c <_init>
 8006120:	1b64      	subs	r4, r4, r5
 8006122:	10a4      	asrs	r4, r4, #2
 8006124:	2600      	movs	r6, #0
 8006126:	42a6      	cmp	r6, r4
 8006128:	d105      	bne.n	8006136 <__libc_init_array+0x2e>
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006130:	4798      	blx	r3
 8006132:	3601      	adds	r6, #1
 8006134:	e7ee      	b.n	8006114 <__libc_init_array+0xc>
 8006136:	f855 3b04 	ldr.w	r3, [r5], #4
 800613a:	4798      	blx	r3
 800613c:	3601      	adds	r6, #1
 800613e:	e7f2      	b.n	8006126 <__libc_init_array+0x1e>
 8006140:	08008110 	.word	0x08008110
 8006144:	08008110 	.word	0x08008110
 8006148:	08008110 	.word	0x08008110
 800614c:	08008114 	.word	0x08008114

08006150 <pow>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	ed2d 8b02 	vpush	{d8}
 8006156:	eeb0 8a40 	vmov.f32	s16, s0
 800615a:	eef0 8a60 	vmov.f32	s17, s1
 800615e:	ec55 4b11 	vmov	r4, r5, d1
 8006162:	f000 f8b9 	bl	80062d8 <__ieee754_pow>
 8006166:	4622      	mov	r2, r4
 8006168:	462b      	mov	r3, r5
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	ec57 6b10 	vmov	r6, r7, d0
 8006172:	f7fa fc87 	bl	8000a84 <__aeabi_dcmpun>
 8006176:	2800      	cmp	r0, #0
 8006178:	d13b      	bne.n	80061f2 <pow+0xa2>
 800617a:	ec51 0b18 	vmov	r0, r1, d8
 800617e:	2200      	movs	r2, #0
 8006180:	2300      	movs	r3, #0
 8006182:	f7fa fc4d 	bl	8000a20 <__aeabi_dcmpeq>
 8006186:	b1b8      	cbz	r0, 80061b8 <pow+0x68>
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f7fa fc46 	bl	8000a20 <__aeabi_dcmpeq>
 8006194:	2800      	cmp	r0, #0
 8006196:	d146      	bne.n	8006226 <pow+0xd6>
 8006198:	ec45 4b10 	vmov	d0, r4, r5
 800619c:	f000 f848 	bl	8006230 <finite>
 80061a0:	b338      	cbz	r0, 80061f2 <pow+0xa2>
 80061a2:	2200      	movs	r2, #0
 80061a4:	2300      	movs	r3, #0
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7fa fc43 	bl	8000a34 <__aeabi_dcmplt>
 80061ae:	b300      	cbz	r0, 80061f2 <pow+0xa2>
 80061b0:	f7ff ffa4 	bl	80060fc <__errno>
 80061b4:	2322      	movs	r3, #34	@ 0x22
 80061b6:	e01b      	b.n	80061f0 <pow+0xa0>
 80061b8:	ec47 6b10 	vmov	d0, r6, r7
 80061bc:	f000 f838 	bl	8006230 <finite>
 80061c0:	b9e0      	cbnz	r0, 80061fc <pow+0xac>
 80061c2:	eeb0 0a48 	vmov.f32	s0, s16
 80061c6:	eef0 0a68 	vmov.f32	s1, s17
 80061ca:	f000 f831 	bl	8006230 <finite>
 80061ce:	b1a8      	cbz	r0, 80061fc <pow+0xac>
 80061d0:	ec45 4b10 	vmov	d0, r4, r5
 80061d4:	f000 f82c 	bl	8006230 <finite>
 80061d8:	b180      	cbz	r0, 80061fc <pow+0xac>
 80061da:	4632      	mov	r2, r6
 80061dc:	463b      	mov	r3, r7
 80061de:	4630      	mov	r0, r6
 80061e0:	4639      	mov	r1, r7
 80061e2:	f7fa fc4f 	bl	8000a84 <__aeabi_dcmpun>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d0e2      	beq.n	80061b0 <pow+0x60>
 80061ea:	f7ff ff87 	bl	80060fc <__errno>
 80061ee:	2321      	movs	r3, #33	@ 0x21
 80061f0:	6003      	str	r3, [r0, #0]
 80061f2:	ecbd 8b02 	vpop	{d8}
 80061f6:	ec47 6b10 	vmov	d0, r6, r7
 80061fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fc:	2200      	movs	r2, #0
 80061fe:	2300      	movs	r3, #0
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f7fa fc0c 	bl	8000a20 <__aeabi_dcmpeq>
 8006208:	2800      	cmp	r0, #0
 800620a:	d0f2      	beq.n	80061f2 <pow+0xa2>
 800620c:	eeb0 0a48 	vmov.f32	s0, s16
 8006210:	eef0 0a68 	vmov.f32	s1, s17
 8006214:	f000 f80c 	bl	8006230 <finite>
 8006218:	2800      	cmp	r0, #0
 800621a:	d0ea      	beq.n	80061f2 <pow+0xa2>
 800621c:	ec45 4b10 	vmov	d0, r4, r5
 8006220:	f000 f806 	bl	8006230 <finite>
 8006224:	e7c3      	b.n	80061ae <pow+0x5e>
 8006226:	4f01      	ldr	r7, [pc, #4]	@ (800622c <pow+0xdc>)
 8006228:	2600      	movs	r6, #0
 800622a:	e7e2      	b.n	80061f2 <pow+0xa2>
 800622c:	3ff00000 	.word	0x3ff00000

08006230 <finite>:
 8006230:	b082      	sub	sp, #8
 8006232:	ed8d 0b00 	vstr	d0, [sp]
 8006236:	9801      	ldr	r0, [sp, #4]
 8006238:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800623c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006240:	0fc0      	lsrs	r0, r0, #31
 8006242:	b002      	add	sp, #8
 8006244:	4770      	bx	lr
	...

08006248 <round>:
 8006248:	ec51 0b10 	vmov	r0, r1, d0
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006252:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8006256:	2a13      	cmp	r2, #19
 8006258:	460b      	mov	r3, r1
 800625a:	4605      	mov	r5, r0
 800625c:	dc1b      	bgt.n	8006296 <round+0x4e>
 800625e:	2a00      	cmp	r2, #0
 8006260:	da0b      	bge.n	800627a <round+0x32>
 8006262:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8006266:	3201      	adds	r2, #1
 8006268:	bf04      	itt	eq
 800626a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800626e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8006272:	2200      	movs	r2, #0
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	e015      	b.n	80062a6 <round+0x5e>
 800627a:	4c15      	ldr	r4, [pc, #84]	@ (80062d0 <round+0x88>)
 800627c:	4114      	asrs	r4, r2
 800627e:	ea04 0601 	and.w	r6, r4, r1
 8006282:	4306      	orrs	r6, r0
 8006284:	d00f      	beq.n	80062a6 <round+0x5e>
 8006286:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800628a:	fa41 f202 	asr.w	r2, r1, r2
 800628e:	4413      	add	r3, r2
 8006290:	ea23 0304 	bic.w	r3, r3, r4
 8006294:	e7ed      	b.n	8006272 <round+0x2a>
 8006296:	2a33      	cmp	r2, #51	@ 0x33
 8006298:	dd08      	ble.n	80062ac <round+0x64>
 800629a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800629e:	d102      	bne.n	80062a6 <round+0x5e>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f7f9 ff9f 	bl	80001e4 <__adddf3>
 80062a6:	ec41 0b10 	vmov	d0, r0, r1
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80062b0:	f04f 34ff 	mov.w	r4, #4294967295
 80062b4:	40f4      	lsrs	r4, r6
 80062b6:	4204      	tst	r4, r0
 80062b8:	d0f5      	beq.n	80062a6 <round+0x5e>
 80062ba:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80062be:	2201      	movs	r2, #1
 80062c0:	408a      	lsls	r2, r1
 80062c2:	1952      	adds	r2, r2, r5
 80062c4:	bf28      	it	cs
 80062c6:	3301      	addcs	r3, #1
 80062c8:	ea22 0204 	bic.w	r2, r2, r4
 80062cc:	e7d2      	b.n	8006274 <round+0x2c>
 80062ce:	bf00      	nop
 80062d0:	000fffff 	.word	0x000fffff
 80062d4:	00000000 	.word	0x00000000

080062d8 <__ieee754_pow>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	b091      	sub	sp, #68	@ 0x44
 80062de:	ed8d 1b00 	vstr	d1, [sp]
 80062e2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80062e6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80062ea:	ea5a 0001 	orrs.w	r0, sl, r1
 80062ee:	ec57 6b10 	vmov	r6, r7, d0
 80062f2:	d113      	bne.n	800631c <__ieee754_pow+0x44>
 80062f4:	19b3      	adds	r3, r6, r6
 80062f6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80062fa:	4152      	adcs	r2, r2
 80062fc:	4298      	cmp	r0, r3
 80062fe:	4b98      	ldr	r3, [pc, #608]	@ (8006560 <__ieee754_pow+0x288>)
 8006300:	4193      	sbcs	r3, r2
 8006302:	f080 84ea 	bcs.w	8006cda <__ieee754_pow+0xa02>
 8006306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7f9 ff69 	bl	80001e4 <__adddf3>
 8006312:	ec41 0b10 	vmov	d0, r0, r1
 8006316:	b011      	add	sp, #68	@ 0x44
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	4a91      	ldr	r2, [pc, #580]	@ (8006564 <__ieee754_pow+0x28c>)
 800631e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006322:	4590      	cmp	r8, r2
 8006324:	463d      	mov	r5, r7
 8006326:	4633      	mov	r3, r6
 8006328:	d806      	bhi.n	8006338 <__ieee754_pow+0x60>
 800632a:	d101      	bne.n	8006330 <__ieee754_pow+0x58>
 800632c:	2e00      	cmp	r6, #0
 800632e:	d1ea      	bne.n	8006306 <__ieee754_pow+0x2e>
 8006330:	4592      	cmp	sl, r2
 8006332:	d801      	bhi.n	8006338 <__ieee754_pow+0x60>
 8006334:	d10e      	bne.n	8006354 <__ieee754_pow+0x7c>
 8006336:	b169      	cbz	r1, 8006354 <__ieee754_pow+0x7c>
 8006338:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800633c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006340:	431d      	orrs	r5, r3
 8006342:	d1e0      	bne.n	8006306 <__ieee754_pow+0x2e>
 8006344:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006348:	18db      	adds	r3, r3, r3
 800634a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800634e:	4152      	adcs	r2, r2
 8006350:	429d      	cmp	r5, r3
 8006352:	e7d4      	b.n	80062fe <__ieee754_pow+0x26>
 8006354:	2d00      	cmp	r5, #0
 8006356:	46c3      	mov	fp, r8
 8006358:	da3a      	bge.n	80063d0 <__ieee754_pow+0xf8>
 800635a:	4a83      	ldr	r2, [pc, #524]	@ (8006568 <__ieee754_pow+0x290>)
 800635c:	4592      	cmp	sl, r2
 800635e:	d84d      	bhi.n	80063fc <__ieee754_pow+0x124>
 8006360:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006364:	4592      	cmp	sl, r2
 8006366:	f240 84c7 	bls.w	8006cf8 <__ieee754_pow+0xa20>
 800636a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800636e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006372:	2a14      	cmp	r2, #20
 8006374:	dd0f      	ble.n	8006396 <__ieee754_pow+0xbe>
 8006376:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800637a:	fa21 f402 	lsr.w	r4, r1, r2
 800637e:	fa04 f202 	lsl.w	r2, r4, r2
 8006382:	428a      	cmp	r2, r1
 8006384:	f040 84b8 	bne.w	8006cf8 <__ieee754_pow+0xa20>
 8006388:	f004 0401 	and.w	r4, r4, #1
 800638c:	f1c4 0402 	rsb	r4, r4, #2
 8006390:	2900      	cmp	r1, #0
 8006392:	d158      	bne.n	8006446 <__ieee754_pow+0x16e>
 8006394:	e00e      	b.n	80063b4 <__ieee754_pow+0xdc>
 8006396:	2900      	cmp	r1, #0
 8006398:	d154      	bne.n	8006444 <__ieee754_pow+0x16c>
 800639a:	f1c2 0214 	rsb	r2, r2, #20
 800639e:	fa4a f402 	asr.w	r4, sl, r2
 80063a2:	fa04 f202 	lsl.w	r2, r4, r2
 80063a6:	4552      	cmp	r2, sl
 80063a8:	f040 84a3 	bne.w	8006cf2 <__ieee754_pow+0xa1a>
 80063ac:	f004 0401 	and.w	r4, r4, #1
 80063b0:	f1c4 0402 	rsb	r4, r4, #2
 80063b4:	4a6d      	ldr	r2, [pc, #436]	@ (800656c <__ieee754_pow+0x294>)
 80063b6:	4592      	cmp	sl, r2
 80063b8:	d12e      	bne.n	8006418 <__ieee754_pow+0x140>
 80063ba:	f1b9 0f00 	cmp.w	r9, #0
 80063be:	f280 8494 	bge.w	8006cea <__ieee754_pow+0xa12>
 80063c2:	496a      	ldr	r1, [pc, #424]	@ (800656c <__ieee754_pow+0x294>)
 80063c4:	4632      	mov	r2, r6
 80063c6:	463b      	mov	r3, r7
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7fa f9eb 	bl	80007a4 <__aeabi_ddiv>
 80063ce:	e7a0      	b.n	8006312 <__ieee754_pow+0x3a>
 80063d0:	2400      	movs	r4, #0
 80063d2:	bbc1      	cbnz	r1, 8006446 <__ieee754_pow+0x16e>
 80063d4:	4a63      	ldr	r2, [pc, #396]	@ (8006564 <__ieee754_pow+0x28c>)
 80063d6:	4592      	cmp	sl, r2
 80063d8:	d1ec      	bne.n	80063b4 <__ieee754_pow+0xdc>
 80063da:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80063de:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80063e2:	431a      	orrs	r2, r3
 80063e4:	f000 8479 	beq.w	8006cda <__ieee754_pow+0xa02>
 80063e8:	4b61      	ldr	r3, [pc, #388]	@ (8006570 <__ieee754_pow+0x298>)
 80063ea:	4598      	cmp	r8, r3
 80063ec:	d908      	bls.n	8006400 <__ieee754_pow+0x128>
 80063ee:	f1b9 0f00 	cmp.w	r9, #0
 80063f2:	f2c0 8476 	blt.w	8006ce2 <__ieee754_pow+0xa0a>
 80063f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063fa:	e78a      	b.n	8006312 <__ieee754_pow+0x3a>
 80063fc:	2402      	movs	r4, #2
 80063fe:	e7e8      	b.n	80063d2 <__ieee754_pow+0xfa>
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f04f 0100 	mov.w	r1, #0
 800640c:	da81      	bge.n	8006312 <__ieee754_pow+0x3a>
 800640e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006412:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006416:	e77c      	b.n	8006312 <__ieee754_pow+0x3a>
 8006418:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800641c:	d106      	bne.n	800642c <__ieee754_pow+0x154>
 800641e:	4632      	mov	r2, r6
 8006420:	463b      	mov	r3, r7
 8006422:	4630      	mov	r0, r6
 8006424:	4639      	mov	r1, r7
 8006426:	f7fa f893 	bl	8000550 <__aeabi_dmul>
 800642a:	e772      	b.n	8006312 <__ieee754_pow+0x3a>
 800642c:	4a51      	ldr	r2, [pc, #324]	@ (8006574 <__ieee754_pow+0x29c>)
 800642e:	4591      	cmp	r9, r2
 8006430:	d109      	bne.n	8006446 <__ieee754_pow+0x16e>
 8006432:	2d00      	cmp	r5, #0
 8006434:	db07      	blt.n	8006446 <__ieee754_pow+0x16e>
 8006436:	ec47 6b10 	vmov	d0, r6, r7
 800643a:	b011      	add	sp, #68	@ 0x44
 800643c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	f000 bd52 	b.w	8006ee8 <__ieee754_sqrt>
 8006444:	2400      	movs	r4, #0
 8006446:	ec47 6b10 	vmov	d0, r6, r7
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	f000 fc88 	bl	8006d60 <fabs>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	ec51 0b10 	vmov	r0, r1, d0
 8006456:	bb53      	cbnz	r3, 80064ae <__ieee754_pow+0x1d6>
 8006458:	4b44      	ldr	r3, [pc, #272]	@ (800656c <__ieee754_pow+0x294>)
 800645a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800645e:	429a      	cmp	r2, r3
 8006460:	d002      	beq.n	8006468 <__ieee754_pow+0x190>
 8006462:	f1b8 0f00 	cmp.w	r8, #0
 8006466:	d122      	bne.n	80064ae <__ieee754_pow+0x1d6>
 8006468:	f1b9 0f00 	cmp.w	r9, #0
 800646c:	da05      	bge.n	800647a <__ieee754_pow+0x1a2>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	2000      	movs	r0, #0
 8006474:	493d      	ldr	r1, [pc, #244]	@ (800656c <__ieee754_pow+0x294>)
 8006476:	f7fa f995 	bl	80007a4 <__aeabi_ddiv>
 800647a:	2d00      	cmp	r5, #0
 800647c:	f6bf af49 	bge.w	8006312 <__ieee754_pow+0x3a>
 8006480:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006484:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006488:	ea58 0804 	orrs.w	r8, r8, r4
 800648c:	d108      	bne.n	80064a0 <__ieee754_pow+0x1c8>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	f7f9 fea3 	bl	80001e0 <__aeabi_dsub>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	e794      	b.n	80063ca <__ieee754_pow+0xf2>
 80064a0:	2c01      	cmp	r4, #1
 80064a2:	f47f af36 	bne.w	8006312 <__ieee754_pow+0x3a>
 80064a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064aa:	4619      	mov	r1, r3
 80064ac:	e731      	b.n	8006312 <__ieee754_pow+0x3a>
 80064ae:	0feb      	lsrs	r3, r5, #31
 80064b0:	3b01      	subs	r3, #1
 80064b2:	ea53 0204 	orrs.w	r2, r3, r4
 80064b6:	d102      	bne.n	80064be <__ieee754_pow+0x1e6>
 80064b8:	4632      	mov	r2, r6
 80064ba:	463b      	mov	r3, r7
 80064bc:	e7e9      	b.n	8006492 <__ieee754_pow+0x1ba>
 80064be:	3c01      	subs	r4, #1
 80064c0:	431c      	orrs	r4, r3
 80064c2:	d016      	beq.n	80064f2 <__ieee754_pow+0x21a>
 80064c4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006550 <__ieee754_pow+0x278>
 80064c8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80064cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064d0:	f240 8112 	bls.w	80066f8 <__ieee754_pow+0x420>
 80064d4:	4b28      	ldr	r3, [pc, #160]	@ (8006578 <__ieee754_pow+0x2a0>)
 80064d6:	459a      	cmp	sl, r3
 80064d8:	4b25      	ldr	r3, [pc, #148]	@ (8006570 <__ieee754_pow+0x298>)
 80064da:	d916      	bls.n	800650a <__ieee754_pow+0x232>
 80064dc:	4598      	cmp	r8, r3
 80064de:	d80b      	bhi.n	80064f8 <__ieee754_pow+0x220>
 80064e0:	f1b9 0f00 	cmp.w	r9, #0
 80064e4:	da0b      	bge.n	80064fe <__ieee754_pow+0x226>
 80064e6:	2000      	movs	r0, #0
 80064e8:	b011      	add	sp, #68	@ 0x44
 80064ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ee:	f000 bcf3 	b.w	8006ed8 <__math_oflow>
 80064f2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006558 <__ieee754_pow+0x280>
 80064f6:	e7e7      	b.n	80064c8 <__ieee754_pow+0x1f0>
 80064f8:	f1b9 0f00 	cmp.w	r9, #0
 80064fc:	dcf3      	bgt.n	80064e6 <__ieee754_pow+0x20e>
 80064fe:	2000      	movs	r0, #0
 8006500:	b011      	add	sp, #68	@ 0x44
 8006502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f000 bcdf 	b.w	8006ec8 <__math_uflow>
 800650a:	4598      	cmp	r8, r3
 800650c:	d20c      	bcs.n	8006528 <__ieee754_pow+0x250>
 800650e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	f7fa fa8d 	bl	8000a34 <__aeabi_dcmplt>
 800651a:	3800      	subs	r0, #0
 800651c:	bf18      	it	ne
 800651e:	2001      	movne	r0, #1
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	daec      	bge.n	8006500 <__ieee754_pow+0x228>
 8006526:	e7df      	b.n	80064e8 <__ieee754_pow+0x210>
 8006528:	4b10      	ldr	r3, [pc, #64]	@ (800656c <__ieee754_pow+0x294>)
 800652a:	4598      	cmp	r8, r3
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	d924      	bls.n	800657c <__ieee754_pow+0x2a4>
 8006532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006536:	2300      	movs	r3, #0
 8006538:	f7fa fa7c 	bl	8000a34 <__aeabi_dcmplt>
 800653c:	3800      	subs	r0, #0
 800653e:	bf18      	it	ne
 8006540:	2001      	movne	r0, #1
 8006542:	f1b9 0f00 	cmp.w	r9, #0
 8006546:	dccf      	bgt.n	80064e8 <__ieee754_pow+0x210>
 8006548:	e7da      	b.n	8006500 <__ieee754_pow+0x228>
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w
 8006550:	00000000 	.word	0x00000000
 8006554:	3ff00000 	.word	0x3ff00000
 8006558:	00000000 	.word	0x00000000
 800655c:	bff00000 	.word	0xbff00000
 8006560:	fff00000 	.word	0xfff00000
 8006564:	7ff00000 	.word	0x7ff00000
 8006568:	433fffff 	.word	0x433fffff
 800656c:	3ff00000 	.word	0x3ff00000
 8006570:	3fefffff 	.word	0x3fefffff
 8006574:	3fe00000 	.word	0x3fe00000
 8006578:	43f00000 	.word	0x43f00000
 800657c:	4b5a      	ldr	r3, [pc, #360]	@ (80066e8 <__ieee754_pow+0x410>)
 800657e:	f7f9 fe2f 	bl	80001e0 <__aeabi_dsub>
 8006582:	a351      	add	r3, pc, #324	@ (adr r3, 80066c8 <__ieee754_pow+0x3f0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	f7f9 ffe0 	bl	8000550 <__aeabi_dmul>
 8006590:	a34f      	add	r3, pc, #316	@ (adr r3, 80066d0 <__ieee754_pow+0x3f8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	4606      	mov	r6, r0
 8006598:	460f      	mov	r7, r1
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	f7f9 ffd7 	bl	8000550 <__aeabi_dmul>
 80065a2:	4b52      	ldr	r3, [pc, #328]	@ (80066ec <__ieee754_pow+0x414>)
 80065a4:	4682      	mov	sl, r0
 80065a6:	468b      	mov	fp, r1
 80065a8:	2200      	movs	r2, #0
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7f9 ffcf 	bl	8000550 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	a148      	add	r1, pc, #288	@ (adr r1, 80066d8 <__ieee754_pow+0x400>)
 80065b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065bc:	f7f9 fe10 	bl	80001e0 <__aeabi_dsub>
 80065c0:	4622      	mov	r2, r4
 80065c2:	462b      	mov	r3, r5
 80065c4:	f7f9 ffc4 	bl	8000550 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	2000      	movs	r0, #0
 80065ce:	4948      	ldr	r1, [pc, #288]	@ (80066f0 <__ieee754_pow+0x418>)
 80065d0:	f7f9 fe06 	bl	80001e0 <__aeabi_dsub>
 80065d4:	4622      	mov	r2, r4
 80065d6:	4680      	mov	r8, r0
 80065d8:	4689      	mov	r9, r1
 80065da:	462b      	mov	r3, r5
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7f9 ffb6 	bl	8000550 <__aeabi_dmul>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7f9 ffb0 	bl	8000550 <__aeabi_dmul>
 80065f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80066e0 <__ieee754_pow+0x408>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 ffab 	bl	8000550 <__aeabi_dmul>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4650      	mov	r0, sl
 8006600:	4659      	mov	r1, fp
 8006602:	f7f9 fded 	bl	80001e0 <__aeabi_dsub>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4680      	mov	r8, r0
 800660c:	4689      	mov	r9, r1
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7f9 fde7 	bl	80001e4 <__adddf3>
 8006616:	2400      	movs	r4, #0
 8006618:	4632      	mov	r2, r6
 800661a:	463b      	mov	r3, r7
 800661c:	4620      	mov	r0, r4
 800661e:	460d      	mov	r5, r1
 8006620:	f7f9 fdde 	bl	80001e0 <__aeabi_dsub>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7f9 fdd8 	bl	80001e0 <__aeabi_dsub>
 8006630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006638:	2300      	movs	r3, #0
 800663a:	9304      	str	r3, [sp, #16]
 800663c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006640:	4606      	mov	r6, r0
 8006642:	460f      	mov	r7, r1
 8006644:	4652      	mov	r2, sl
 8006646:	465b      	mov	r3, fp
 8006648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800664c:	f7f9 fdc8 	bl	80001e0 <__aeabi_dsub>
 8006650:	4622      	mov	r2, r4
 8006652:	462b      	mov	r3, r5
 8006654:	f7f9 ff7c 	bl	8000550 <__aeabi_dmul>
 8006658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665c:	4680      	mov	r8, r0
 800665e:	4689      	mov	r9, r1
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7f9 ff74 	bl	8000550 <__aeabi_dmul>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4640      	mov	r0, r8
 800666e:	4649      	mov	r1, r9
 8006670:	f7f9 fdb8 	bl	80001e4 <__adddf3>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	4606      	mov	r6, r0
 800667a:	460f      	mov	r7, r1
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 ff66 	bl	8000550 <__aeabi_dmul>
 8006684:	460b      	mov	r3, r1
 8006686:	4602      	mov	r2, r0
 8006688:	4680      	mov	r8, r0
 800668a:	4689      	mov	r9, r1
 800668c:	4630      	mov	r0, r6
 800668e:	4639      	mov	r1, r7
 8006690:	f7f9 fda8 	bl	80001e4 <__adddf3>
 8006694:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <__ieee754_pow+0x41c>)
 8006696:	4299      	cmp	r1, r3
 8006698:	4604      	mov	r4, r0
 800669a:	460d      	mov	r5, r1
 800669c:	468a      	mov	sl, r1
 800669e:	468b      	mov	fp, r1
 80066a0:	f340 82ef 	ble.w	8006c82 <__ieee754_pow+0x9aa>
 80066a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80066a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80066ac:	4303      	orrs	r3, r0
 80066ae:	f000 81e8 	beq.w	8006a82 <__ieee754_pow+0x7aa>
 80066b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	2300      	movs	r3, #0
 80066ba:	f7fa f9bb 	bl	8000a34 <__aeabi_dcmplt>
 80066be:	3800      	subs	r0, #0
 80066c0:	bf18      	it	ne
 80066c2:	2001      	movne	r0, #1
 80066c4:	e710      	b.n	80064e8 <__ieee754_pow+0x210>
 80066c6:	bf00      	nop
 80066c8:	60000000 	.word	0x60000000
 80066cc:	3ff71547 	.word	0x3ff71547
 80066d0:	f85ddf44 	.word	0xf85ddf44
 80066d4:	3e54ae0b 	.word	0x3e54ae0b
 80066d8:	55555555 	.word	0x55555555
 80066dc:	3fd55555 	.word	0x3fd55555
 80066e0:	652b82fe 	.word	0x652b82fe
 80066e4:	3ff71547 	.word	0x3ff71547
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	3fd00000 	.word	0x3fd00000
 80066f0:	3fe00000 	.word	0x3fe00000
 80066f4:	408fffff 	.word	0x408fffff
 80066f8:	4bd5      	ldr	r3, [pc, #852]	@ (8006a50 <__ieee754_pow+0x778>)
 80066fa:	402b      	ands	r3, r5
 80066fc:	2200      	movs	r2, #0
 80066fe:	b92b      	cbnz	r3, 800670c <__ieee754_pow+0x434>
 8006700:	4bd4      	ldr	r3, [pc, #848]	@ (8006a54 <__ieee754_pow+0x77c>)
 8006702:	f7f9 ff25 	bl	8000550 <__aeabi_dmul>
 8006706:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800670a:	468b      	mov	fp, r1
 800670c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006710:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006714:	4413      	add	r3, r2
 8006716:	930a      	str	r3, [sp, #40]	@ 0x28
 8006718:	4bcf      	ldr	r3, [pc, #828]	@ (8006a58 <__ieee754_pow+0x780>)
 800671a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800671e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006722:	459b      	cmp	fp, r3
 8006724:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006728:	dd08      	ble.n	800673c <__ieee754_pow+0x464>
 800672a:	4bcc      	ldr	r3, [pc, #816]	@ (8006a5c <__ieee754_pow+0x784>)
 800672c:	459b      	cmp	fp, r3
 800672e:	f340 81a5 	ble.w	8006a7c <__ieee754_pow+0x7a4>
 8006732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006734:	3301      	adds	r3, #1
 8006736:	930a      	str	r3, [sp, #40]	@ 0x28
 8006738:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800673c:	f04f 0a00 	mov.w	sl, #0
 8006740:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006744:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006746:	4bc6      	ldr	r3, [pc, #792]	@ (8006a60 <__ieee754_pow+0x788>)
 8006748:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800674c:	ed93 7b00 	vldr	d7, [r3]
 8006750:	4629      	mov	r1, r5
 8006752:	ec53 2b17 	vmov	r2, r3, d7
 8006756:	ed8d 7b06 	vstr	d7, [sp, #24]
 800675a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800675e:	f7f9 fd3f 	bl	80001e0 <__aeabi_dsub>
 8006762:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006766:	4606      	mov	r6, r0
 8006768:	460f      	mov	r7, r1
 800676a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676e:	f7f9 fd39 	bl	80001e4 <__adddf3>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	2000      	movs	r0, #0
 8006778:	49ba      	ldr	r1, [pc, #744]	@ (8006a64 <__ieee754_pow+0x78c>)
 800677a:	f7fa f813 	bl	80007a4 <__aeabi_ddiv>
 800677e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 fee1 	bl	8000550 <__aeabi_dmul>
 800678e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006792:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006796:	106d      	asrs	r5, r5, #1
 8006798:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800679c:	f04f 0b00 	mov.w	fp, #0
 80067a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80067a4:	4661      	mov	r1, ip
 80067a6:	2200      	movs	r2, #0
 80067a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80067ac:	4658      	mov	r0, fp
 80067ae:	46e1      	mov	r9, ip
 80067b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	f7f9 feca 	bl	8000550 <__aeabi_dmul>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7f9 fd0c 	bl	80001e0 <__aeabi_dsub>
 80067c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	4620      	mov	r0, r4
 80067d2:	4629      	mov	r1, r5
 80067d4:	f7f9 fd04 	bl	80001e0 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067e0:	f7f9 fcfe 	bl	80001e0 <__aeabi_dsub>
 80067e4:	465a      	mov	r2, fp
 80067e6:	464b      	mov	r3, r9
 80067e8:	f7f9 feb2 	bl	8000550 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fcf4 	bl	80001e0 <__aeabi_dsub>
 80067f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80067fc:	f7f9 fea8 	bl	8000550 <__aeabi_dmul>
 8006800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006804:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	f7f9 fea0 	bl	8000550 <__aeabi_dmul>
 8006810:	a37d      	add	r3, pc, #500	@ (adr r3, 8006a08 <__ieee754_pow+0x730>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	4604      	mov	r4, r0
 8006818:	460d      	mov	r5, r1
 800681a:	f7f9 fe99 	bl	8000550 <__aeabi_dmul>
 800681e:	a37c      	add	r3, pc, #496	@ (adr r3, 8006a10 <__ieee754_pow+0x738>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fcde 	bl	80001e4 <__adddf3>
 8006828:	4622      	mov	r2, r4
 800682a:	462b      	mov	r3, r5
 800682c:	f7f9 fe90 	bl	8000550 <__aeabi_dmul>
 8006830:	a379      	add	r3, pc, #484	@ (adr r3, 8006a18 <__ieee754_pow+0x740>)
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	f7f9 fcd5 	bl	80001e4 <__adddf3>
 800683a:	4622      	mov	r2, r4
 800683c:	462b      	mov	r3, r5
 800683e:	f7f9 fe87 	bl	8000550 <__aeabi_dmul>
 8006842:	a377      	add	r3, pc, #476	@ (adr r3, 8006a20 <__ieee754_pow+0x748>)
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f7f9 fccc 	bl	80001e4 <__adddf3>
 800684c:	4622      	mov	r2, r4
 800684e:	462b      	mov	r3, r5
 8006850:	f7f9 fe7e 	bl	8000550 <__aeabi_dmul>
 8006854:	a374      	add	r3, pc, #464	@ (adr r3, 8006a28 <__ieee754_pow+0x750>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fcc3 	bl	80001e4 <__adddf3>
 800685e:	4622      	mov	r2, r4
 8006860:	462b      	mov	r3, r5
 8006862:	f7f9 fe75 	bl	8000550 <__aeabi_dmul>
 8006866:	a372      	add	r3, pc, #456	@ (adr r3, 8006a30 <__ieee754_pow+0x758>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fcba 	bl	80001e4 <__adddf3>
 8006870:	4622      	mov	r2, r4
 8006872:	4606      	mov	r6, r0
 8006874:	460f      	mov	r7, r1
 8006876:	462b      	mov	r3, r5
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 fe68 	bl	8000550 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7f9 fe62 	bl	8000550 <__aeabi_dmul>
 800688c:	465a      	mov	r2, fp
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	464b      	mov	r3, r9
 8006894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006898:	f7f9 fca4 	bl	80001e4 <__adddf3>
 800689c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a0:	f7f9 fe56 	bl	8000550 <__aeabi_dmul>
 80068a4:	4622      	mov	r2, r4
 80068a6:	462b      	mov	r3, r5
 80068a8:	f7f9 fc9c 	bl	80001e4 <__adddf3>
 80068ac:	465a      	mov	r2, fp
 80068ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068b2:	464b      	mov	r3, r9
 80068b4:	4658      	mov	r0, fp
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7f9 fe4a 	bl	8000550 <__aeabi_dmul>
 80068bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006a68 <__ieee754_pow+0x790>)
 80068be:	2200      	movs	r2, #0
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	f7f9 fc8e 	bl	80001e4 <__adddf3>
 80068c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068cc:	f7f9 fc8a 	bl	80001e4 <__adddf3>
 80068d0:	46d8      	mov	r8, fp
 80068d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80068d6:	460d      	mov	r5, r1
 80068d8:	465a      	mov	r2, fp
 80068da:	460b      	mov	r3, r1
 80068dc:	4640      	mov	r0, r8
 80068de:	4649      	mov	r1, r9
 80068e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80068e4:	f7f9 fe34 	bl	8000550 <__aeabi_dmul>
 80068e8:	465c      	mov	r4, fp
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	4b5e      	ldr	r3, [pc, #376]	@ (8006a68 <__ieee754_pow+0x790>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	4620      	mov	r0, r4
 80068f4:	4629      	mov	r1, r5
 80068f6:	f7f9 fc73 	bl	80001e0 <__aeabi_dsub>
 80068fa:	4632      	mov	r2, r6
 80068fc:	463b      	mov	r3, r7
 80068fe:	f7f9 fc6f 	bl	80001e0 <__aeabi_dsub>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800690a:	f7f9 fc69 	bl	80001e0 <__aeabi_dsub>
 800690e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006912:	f7f9 fe1d 	bl	8000550 <__aeabi_dmul>
 8006916:	4622      	mov	r2, r4
 8006918:	4606      	mov	r6, r0
 800691a:	460f      	mov	r7, r1
 800691c:	462b      	mov	r3, r5
 800691e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006922:	f7f9 fe15 	bl	8000550 <__aeabi_dmul>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4630      	mov	r0, r6
 800692c:	4639      	mov	r1, r7
 800692e:	f7f9 fc59 	bl	80001e4 <__adddf3>
 8006932:	4606      	mov	r6, r0
 8006934:	460f      	mov	r7, r1
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4640      	mov	r0, r8
 800693c:	4649      	mov	r1, r9
 800693e:	f7f9 fc51 	bl	80001e4 <__adddf3>
 8006942:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006946:	a33c      	add	r3, pc, #240	@ (adr r3, 8006a38 <__ieee754_pow+0x760>)
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	4658      	mov	r0, fp
 800694e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006952:	460d      	mov	r5, r1
 8006954:	f7f9 fdfc 	bl	8000550 <__aeabi_dmul>
 8006958:	465c      	mov	r4, fp
 800695a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800695e:	4642      	mov	r2, r8
 8006960:	464b      	mov	r3, r9
 8006962:	4620      	mov	r0, r4
 8006964:	4629      	mov	r1, r5
 8006966:	f7f9 fc3b 	bl	80001e0 <__aeabi_dsub>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4630      	mov	r0, r6
 8006970:	4639      	mov	r1, r7
 8006972:	f7f9 fc35 	bl	80001e0 <__aeabi_dsub>
 8006976:	a332      	add	r3, pc, #200	@ (adr r3, 8006a40 <__ieee754_pow+0x768>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f7f9 fde8 	bl	8000550 <__aeabi_dmul>
 8006980:	a331      	add	r3, pc, #196	@ (adr r3, 8006a48 <__ieee754_pow+0x770>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	4606      	mov	r6, r0
 8006988:	460f      	mov	r7, r1
 800698a:	4620      	mov	r0, r4
 800698c:	4629      	mov	r1, r5
 800698e:	f7f9 fddf 	bl	8000550 <__aeabi_dmul>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4630      	mov	r0, r6
 8006998:	4639      	mov	r1, r7
 800699a:	f7f9 fc23 	bl	80001e4 <__adddf3>
 800699e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069a0:	4b32      	ldr	r3, [pc, #200]	@ (8006a6c <__ieee754_pow+0x794>)
 80069a2:	4413      	add	r3, r2
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fc1c 	bl	80001e4 <__adddf3>
 80069ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069b2:	f7f9 fd63 	bl	800047c <__aeabi_i2d>
 80069b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a70 <__ieee754_pow+0x798>)
 80069ba:	4413      	add	r3, r2
 80069bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c0:	4606      	mov	r6, r0
 80069c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069c6:	460f      	mov	r7, r1
 80069c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069cc:	f7f9 fc0a 	bl	80001e4 <__adddf3>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f7f9 fc06 	bl	80001e4 <__adddf3>
 80069d8:	4632      	mov	r2, r6
 80069da:	463b      	mov	r3, r7
 80069dc:	f7f9 fc02 	bl	80001e4 <__adddf3>
 80069e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80069e4:	4632      	mov	r2, r6
 80069e6:	463b      	mov	r3, r7
 80069e8:	4658      	mov	r0, fp
 80069ea:	460d      	mov	r5, r1
 80069ec:	f7f9 fbf8 	bl	80001e0 <__aeabi_dsub>
 80069f0:	4642      	mov	r2, r8
 80069f2:	464b      	mov	r3, r9
 80069f4:	f7f9 fbf4 	bl	80001e0 <__aeabi_dsub>
 80069f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fc:	f7f9 fbf0 	bl	80001e0 <__aeabi_dsub>
 8006a00:	465c      	mov	r4, fp
 8006a02:	4602      	mov	r2, r0
 8006a04:	e036      	b.n	8006a74 <__ieee754_pow+0x79c>
 8006a06:	bf00      	nop
 8006a08:	4a454eef 	.word	0x4a454eef
 8006a0c:	3fca7e28 	.word	0x3fca7e28
 8006a10:	93c9db65 	.word	0x93c9db65
 8006a14:	3fcd864a 	.word	0x3fcd864a
 8006a18:	a91d4101 	.word	0xa91d4101
 8006a1c:	3fd17460 	.word	0x3fd17460
 8006a20:	518f264d 	.word	0x518f264d
 8006a24:	3fd55555 	.word	0x3fd55555
 8006a28:	db6fabff 	.word	0xdb6fabff
 8006a2c:	3fdb6db6 	.word	0x3fdb6db6
 8006a30:	33333303 	.word	0x33333303
 8006a34:	3fe33333 	.word	0x3fe33333
 8006a38:	e0000000 	.word	0xe0000000
 8006a3c:	3feec709 	.word	0x3feec709
 8006a40:	dc3a03fd 	.word	0xdc3a03fd
 8006a44:	3feec709 	.word	0x3feec709
 8006a48:	145b01f5 	.word	0x145b01f5
 8006a4c:	be3e2fe0 	.word	0xbe3e2fe0
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	43400000 	.word	0x43400000
 8006a58:	0003988e 	.word	0x0003988e
 8006a5c:	000bb679 	.word	0x000bb679
 8006a60:	080080f8 	.word	0x080080f8
 8006a64:	3ff00000 	.word	0x3ff00000
 8006a68:	40080000 	.word	0x40080000
 8006a6c:	080080d8 	.word	0x080080d8
 8006a70:	080080e8 	.word	0x080080e8
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a7a:	e5d7      	b.n	800662c <__ieee754_pow+0x354>
 8006a7c:	f04f 0a01 	mov.w	sl, #1
 8006a80:	e65e      	b.n	8006740 <__ieee754_pow+0x468>
 8006a82:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006d54 <__ieee754_pow+0xa7c>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7f9 fbaa 	bl	80001e4 <__adddf3>
 8006a90:	4642      	mov	r2, r8
 8006a92:	e9cd 0100 	strd	r0, r1, [sp]
 8006a96:	464b      	mov	r3, r9
 8006a98:	4620      	mov	r0, r4
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	f7f9 fba0 	bl	80001e0 <__aeabi_dsub>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aa8:	f7f9 ffe2 	bl	8000a70 <__aeabi_dcmpgt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f47f ae00 	bne.w	80066b2 <__ieee754_pow+0x3da>
 8006ab2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006ab6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006aba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006abe:	fa43 fa0a 	asr.w	sl, r3, sl
 8006ac2:	44da      	add	sl, fp
 8006ac4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006ac8:	489d      	ldr	r0, [pc, #628]	@ (8006d40 <__ieee754_pow+0xa68>)
 8006aca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006ace:	4108      	asrs	r0, r1
 8006ad0:	ea00 030a 	and.w	r3, r0, sl
 8006ad4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006ad8:	f1c1 0114 	rsb	r1, r1, #20
 8006adc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006ae0:	fa4a fa01 	asr.w	sl, sl, r1
 8006ae4:	f1bb 0f00 	cmp.w	fp, #0
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	bfb8      	it	lt
 8006af2:	f1ca 0a00 	rsblt	sl, sl, #0
 8006af6:	f7f9 fb73 	bl	80001e0 <__aeabi_dsub>
 8006afa:	4680      	mov	r8, r0
 8006afc:	4689      	mov	r9, r1
 8006afe:	4632      	mov	r2, r6
 8006b00:	463b      	mov	r3, r7
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7f9 fb6d 	bl	80001e4 <__adddf3>
 8006b0a:	2400      	movs	r4, #0
 8006b0c:	a37c      	add	r3, pc, #496	@ (adr r3, 8006d00 <__ieee754_pow+0xa28>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	4620      	mov	r0, r4
 8006b14:	460d      	mov	r5, r1
 8006b16:	f7f9 fd1b 	bl	8000550 <__aeabi_dmul>
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8006b20:	464b      	mov	r3, r9
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 fb5b 	bl	80001e0 <__aeabi_dsub>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 fb55 	bl	80001e0 <__aeabi_dsub>
 8006b36:	a374      	add	r3, pc, #464	@ (adr r3, 8006d08 <__ieee754_pow+0xa30>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f7f9 fd08 	bl	8000550 <__aeabi_dmul>
 8006b40:	a373      	add	r3, pc, #460	@ (adr r3, 8006d10 <__ieee754_pow+0xa38>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	4680      	mov	r8, r0
 8006b48:	4689      	mov	r9, r1
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7f9 fcff 	bl	8000550 <__aeabi_dmul>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4640      	mov	r0, r8
 8006b58:	4649      	mov	r1, r9
 8006b5a:	f7f9 fb43 	bl	80001e4 <__adddf3>
 8006b5e:	4604      	mov	r4, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b6a:	f7f9 fb3b 	bl	80001e4 <__adddf3>
 8006b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b72:	4680      	mov	r8, r0
 8006b74:	4689      	mov	r9, r1
 8006b76:	f7f9 fb33 	bl	80001e0 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fb2d 	bl	80001e0 <__aeabi_dsub>
 8006b86:	4642      	mov	r2, r8
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	4640      	mov	r0, r8
 8006b90:	4649      	mov	r1, r9
 8006b92:	f7f9 fcdd 	bl	8000550 <__aeabi_dmul>
 8006b96:	a360      	add	r3, pc, #384	@ (adr r3, 8006d18 <__ieee754_pow+0xa40>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	f7f9 fcd6 	bl	8000550 <__aeabi_dmul>
 8006ba4:	a35e      	add	r3, pc, #376	@ (adr r3, 8006d20 <__ieee754_pow+0xa48>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fb19 	bl	80001e0 <__aeabi_dsub>
 8006bae:	4622      	mov	r2, r4
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	f7f9 fccd 	bl	8000550 <__aeabi_dmul>
 8006bb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8006d28 <__ieee754_pow+0xa50>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fb12 	bl	80001e4 <__adddf3>
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	f7f9 fcc4 	bl	8000550 <__aeabi_dmul>
 8006bc8:	a359      	add	r3, pc, #356	@ (adr r3, 8006d30 <__ieee754_pow+0xa58>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fb07 	bl	80001e0 <__aeabi_dsub>
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	462b      	mov	r3, r5
 8006bd6:	f7f9 fcbb 	bl	8000550 <__aeabi_dmul>
 8006bda:	a357      	add	r3, pc, #348	@ (adr r3, 8006d38 <__ieee754_pow+0xa60>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fb00 	bl	80001e4 <__adddf3>
 8006be4:	4622      	mov	r2, r4
 8006be6:	462b      	mov	r3, r5
 8006be8:	f7f9 fcb2 	bl	8000550 <__aeabi_dmul>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	f7f9 faf4 	bl	80001e0 <__aeabi_dsub>
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	f7f9 fca4 	bl	8000550 <__aeabi_dmul>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 fae3 	bl	80001e0 <__aeabi_dsub>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c22:	f7f9 fdbf 	bl	80007a4 <__aeabi_ddiv>
 8006c26:	4632      	mov	r2, r6
 8006c28:	4604      	mov	r4, r0
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	4640      	mov	r0, r8
 8006c30:	4649      	mov	r1, r9
 8006c32:	f7f9 fc8d 	bl	8000550 <__aeabi_dmul>
 8006c36:	4632      	mov	r2, r6
 8006c38:	463b      	mov	r3, r7
 8006c3a:	f7f9 fad3 	bl	80001e4 <__adddf3>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4620      	mov	r0, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 facb 	bl	80001e0 <__aeabi_dsub>
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	f7f9 fac7 	bl	80001e0 <__aeabi_dsub>
 8006c52:	460b      	mov	r3, r1
 8006c54:	4602      	mov	r2, r0
 8006c56:	493b      	ldr	r1, [pc, #236]	@ (8006d44 <__ieee754_pow+0xa6c>)
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f7f9 fac1 	bl	80001e0 <__aeabi_dsub>
 8006c5e:	ec41 0b10 	vmov	d0, r0, r1
 8006c62:	ee10 3a90 	vmov	r3, s1
 8006c66:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6e:	da30      	bge.n	8006cd2 <__ieee754_pow+0x9fa>
 8006c70:	4650      	mov	r0, sl
 8006c72:	f000 f87d 	bl	8006d70 <scalbn>
 8006c76:	ec51 0b10 	vmov	r0, r1, d0
 8006c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c7e:	f7ff bbd2 	b.w	8006426 <__ieee754_pow+0x14e>
 8006c82:	4c31      	ldr	r4, [pc, #196]	@ (8006d48 <__ieee754_pow+0xa70>)
 8006c84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d91a      	bls.n	8006cc2 <__ieee754_pow+0x9ea>
 8006c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8006d4c <__ieee754_pow+0xa74>)
 8006c8e:	440b      	add	r3, r1
 8006c90:	4303      	orrs	r3, r0
 8006c92:	d009      	beq.n	8006ca8 <__ieee754_pow+0x9d0>
 8006c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f7f9 feca 	bl	8000a34 <__aeabi_dcmplt>
 8006ca0:	3800      	subs	r0, #0
 8006ca2:	bf18      	it	ne
 8006ca4:	2001      	movne	r0, #1
 8006ca6:	e42b      	b.n	8006500 <__ieee754_pow+0x228>
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	f7f9 fa98 	bl	80001e0 <__aeabi_dsub>
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	f7f9 fed2 	bl	8000a5c <__aeabi_dcmpge>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1eb      	bne.n	8006c94 <__ieee754_pow+0x9bc>
 8006cbc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8006d5c <__ieee754_pow+0xa84>
 8006cc0:	e6f7      	b.n	8006ab2 <__ieee754_pow+0x7da>
 8006cc2:	469a      	mov	sl, r3
 8006cc4:	4b22      	ldr	r3, [pc, #136]	@ (8006d50 <__ieee754_pow+0xa78>)
 8006cc6:	459a      	cmp	sl, r3
 8006cc8:	f63f aef3 	bhi.w	8006ab2 <__ieee754_pow+0x7da>
 8006ccc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006cd0:	e715      	b.n	8006afe <__ieee754_pow+0x826>
 8006cd2:	ec51 0b10 	vmov	r0, r1, d0
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	e7cf      	b.n	8006c7a <__ieee754_pow+0x9a2>
 8006cda:	491a      	ldr	r1, [pc, #104]	@ (8006d44 <__ieee754_pow+0xa6c>)
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7ff bb18 	b.w	8006312 <__ieee754_pow+0x3a>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f7ff bb14 	b.w	8006312 <__ieee754_pow+0x3a>
 8006cea:	4630      	mov	r0, r6
 8006cec:	4639      	mov	r1, r7
 8006cee:	f7ff bb10 	b.w	8006312 <__ieee754_pow+0x3a>
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	f7ff bb5e 	b.w	80063b4 <__ieee754_pow+0xdc>
 8006cf8:	2400      	movs	r4, #0
 8006cfa:	f7ff bb49 	b.w	8006390 <__ieee754_pow+0xb8>
 8006cfe:	bf00      	nop
 8006d00:	00000000 	.word	0x00000000
 8006d04:	3fe62e43 	.word	0x3fe62e43
 8006d08:	fefa39ef 	.word	0xfefa39ef
 8006d0c:	3fe62e42 	.word	0x3fe62e42
 8006d10:	0ca86c39 	.word	0x0ca86c39
 8006d14:	be205c61 	.word	0xbe205c61
 8006d18:	72bea4d0 	.word	0x72bea4d0
 8006d1c:	3e663769 	.word	0x3e663769
 8006d20:	c5d26bf1 	.word	0xc5d26bf1
 8006d24:	3ebbbd41 	.word	0x3ebbbd41
 8006d28:	af25de2c 	.word	0xaf25de2c
 8006d2c:	3f11566a 	.word	0x3f11566a
 8006d30:	16bebd93 	.word	0x16bebd93
 8006d34:	3f66c16c 	.word	0x3f66c16c
 8006d38:	5555553e 	.word	0x5555553e
 8006d3c:	3fc55555 	.word	0x3fc55555
 8006d40:	fff00000 	.word	0xfff00000
 8006d44:	3ff00000 	.word	0x3ff00000
 8006d48:	4090cbff 	.word	0x4090cbff
 8006d4c:	3f6f3400 	.word	0x3f6f3400
 8006d50:	3fe00000 	.word	0x3fe00000
 8006d54:	652b82fe 	.word	0x652b82fe
 8006d58:	3c971547 	.word	0x3c971547
 8006d5c:	4090cc00 	.word	0x4090cc00

08006d60 <fabs>:
 8006d60:	ec51 0b10 	vmov	r0, r1, d0
 8006d64:	4602      	mov	r2, r0
 8006d66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d6a:	ec43 2b10 	vmov	d0, r2, r3
 8006d6e:	4770      	bx	lr

08006d70 <scalbn>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	ec55 4b10 	vmov	r4, r5, d0
 8006d76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	b991      	cbnz	r1, 8006da6 <scalbn+0x36>
 8006d80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006d84:	4323      	orrs	r3, r4
 8006d86:	d03d      	beq.n	8006e04 <scalbn+0x94>
 8006d88:	4b35      	ldr	r3, [pc, #212]	@ (8006e60 <scalbn+0xf0>)
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f7f9 fbde 	bl	8000550 <__aeabi_dmul>
 8006d94:	4b33      	ldr	r3, [pc, #204]	@ (8006e64 <scalbn+0xf4>)
 8006d96:	429e      	cmp	r6, r3
 8006d98:	4604      	mov	r4, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	da0f      	bge.n	8006dbe <scalbn+0x4e>
 8006d9e:	a328      	add	r3, pc, #160	@ (adr r3, 8006e40 <scalbn+0xd0>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	e01e      	b.n	8006de4 <scalbn+0x74>
 8006da6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006daa:	4291      	cmp	r1, r2
 8006dac:	d10b      	bne.n	8006dc6 <scalbn+0x56>
 8006dae:	4622      	mov	r2, r4
 8006db0:	4620      	mov	r0, r4
 8006db2:	4629      	mov	r1, r5
 8006db4:	f7f9 fa16 	bl	80001e4 <__adddf3>
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	e022      	b.n	8006e04 <scalbn+0x94>
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006dc4:	3936      	subs	r1, #54	@ 0x36
 8006dc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006dca:	4296      	cmp	r6, r2
 8006dcc:	dd0d      	ble.n	8006dea <scalbn+0x7a>
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006e48 <scalbn+0xd8>)
 8006dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dd6:	da02      	bge.n	8006dde <scalbn+0x6e>
 8006dd8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006e50 <scalbn+0xe0>)
 8006dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dde:	a31a      	add	r3, pc, #104	@ (adr r3, 8006e48 <scalbn+0xd8>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fbb4 	bl	8000550 <__aeabi_dmul>
 8006de8:	e7e6      	b.n	8006db8 <scalbn+0x48>
 8006dea:	1872      	adds	r2, r6, r1
 8006dec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006df0:	428a      	cmp	r2, r1
 8006df2:	dcec      	bgt.n	8006dce <scalbn+0x5e>
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	dd08      	ble.n	8006e0a <scalbn+0x9a>
 8006df8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006dfc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e04:	ec45 4b10 	vmov	d0, r4, r5
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006e0e:	da08      	bge.n	8006e22 <scalbn+0xb2>
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	a10b      	add	r1, pc, #44	@ (adr r1, 8006e40 <scalbn+0xd0>)
 8006e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e18:	dac1      	bge.n	8006d9e <scalbn+0x2e>
 8006e1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8006e58 <scalbn+0xe8>)
 8006e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e20:	e7bd      	b.n	8006d9e <scalbn+0x2e>
 8006e22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006e26:	3236      	adds	r2, #54	@ 0x36
 8006e28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e30:	4620      	mov	r0, r4
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <scalbn+0xf8>)
 8006e34:	4629      	mov	r1, r5
 8006e36:	2200      	movs	r2, #0
 8006e38:	e7d4      	b.n	8006de4 <scalbn+0x74>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
 8006e40:	c2f8f359 	.word	0xc2f8f359
 8006e44:	01a56e1f 	.word	0x01a56e1f
 8006e48:	8800759c 	.word	0x8800759c
 8006e4c:	7e37e43c 	.word	0x7e37e43c
 8006e50:	8800759c 	.word	0x8800759c
 8006e54:	fe37e43c 	.word	0xfe37e43c
 8006e58:	c2f8f359 	.word	0xc2f8f359
 8006e5c:	81a56e1f 	.word	0x81a56e1f
 8006e60:	43500000 	.word	0x43500000
 8006e64:	ffff3cb0 	.word	0xffff3cb0
 8006e68:	3c900000 	.word	0x3c900000

08006e6c <with_errno>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	ed2d 8b02 	vpush	{d8}
 8006e72:	eeb0 8a40 	vmov.f32	s16, s0
 8006e76:	eef0 8a60 	vmov.f32	s17, s1
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	f7ff f93e 	bl	80060fc <__errno>
 8006e80:	eeb0 0a48 	vmov.f32	s0, s16
 8006e84:	eef0 0a68 	vmov.f32	s1, s17
 8006e88:	ecbd 8b02 	vpop	{d8}
 8006e8c:	6004      	str	r4, [r0, #0]
 8006e8e:	bd10      	pop	{r4, pc}

08006e90 <xflow>:
 8006e90:	4603      	mov	r3, r0
 8006e92:	b507      	push	{r0, r1, r2, lr}
 8006e94:	ec51 0b10 	vmov	r0, r1, d0
 8006e98:	b183      	cbz	r3, 8006ebc <xflow+0x2c>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8006ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ea8:	f7f9 fb52 	bl	8000550 <__aeabi_dmul>
 8006eac:	ec41 0b10 	vmov	d0, r0, r1
 8006eb0:	2022      	movs	r0, #34	@ 0x22
 8006eb2:	b003      	add	sp, #12
 8006eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb8:	f7ff bfd8 	b.w	8006e6c <with_errno>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	e7ee      	b.n	8006ea0 <xflow+0x10>
 8006ec2:	0000      	movs	r0, r0
 8006ec4:	0000      	movs	r0, r0
	...

08006ec8 <__math_uflow>:
 8006ec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ed0 <__math_uflow+0x8>
 8006ecc:	f7ff bfe0 	b.w	8006e90 <xflow>
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	10000000 	.word	0x10000000

08006ed8 <__math_oflow>:
 8006ed8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ee0 <__math_oflow+0x8>
 8006edc:	f7ff bfd8 	b.w	8006e90 <xflow>
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	70000000 	.word	0x70000000

08006ee8 <__ieee754_sqrt>:
 8006ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	4a68      	ldr	r2, [pc, #416]	@ (8007090 <__ieee754_sqrt+0x1a8>)
 8006eee:	ec55 4b10 	vmov	r4, r5, d0
 8006ef2:	43aa      	bics	r2, r5
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	d110      	bne.n	8006f1c <__ieee754_sqrt+0x34>
 8006efa:	4622      	mov	r2, r4
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f7f9 fb26 	bl	8000550 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4620      	mov	r0, r4
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f7f9 f96a 	bl	80001e4 <__adddf3>
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	ec45 4b10 	vmov	d0, r4, r5
 8006f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	dc0e      	bgt.n	8006f3e <__ieee754_sqrt+0x56>
 8006f20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006f24:	4322      	orrs	r2, r4
 8006f26:	d0f5      	beq.n	8006f14 <__ieee754_sqrt+0x2c>
 8006f28:	b19d      	cbz	r5, 8006f52 <__ieee754_sqrt+0x6a>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 f956 	bl	80001e0 <__aeabi_dsub>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	f7f9 fc34 	bl	80007a4 <__aeabi_ddiv>
 8006f3c:	e7e8      	b.n	8006f10 <__ieee754_sqrt+0x28>
 8006f3e:	152a      	asrs	r2, r5, #20
 8006f40:	d115      	bne.n	8006f6e <__ieee754_sqrt+0x86>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e009      	b.n	8006f5a <__ieee754_sqrt+0x72>
 8006f46:	0acb      	lsrs	r3, r1, #11
 8006f48:	3a15      	subs	r2, #21
 8006f4a:	0549      	lsls	r1, r1, #21
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0fa      	beq.n	8006f46 <__ieee754_sqrt+0x5e>
 8006f50:	e7f7      	b.n	8006f42 <__ieee754_sqrt+0x5a>
 8006f52:	462a      	mov	r2, r5
 8006f54:	e7fa      	b.n	8006f4c <__ieee754_sqrt+0x64>
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	3001      	adds	r0, #1
 8006f5a:	02dc      	lsls	r4, r3, #11
 8006f5c:	d5fb      	bpl.n	8006f56 <__ieee754_sqrt+0x6e>
 8006f5e:	1e44      	subs	r4, r0, #1
 8006f60:	1b12      	subs	r2, r2, r4
 8006f62:	f1c0 0420 	rsb	r4, r0, #32
 8006f66:	fa21 f404 	lsr.w	r4, r1, r4
 8006f6a:	4323      	orrs	r3, r4
 8006f6c:	4081      	lsls	r1, r0
 8006f6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f72:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f7a:	07d2      	lsls	r2, r2, #31
 8006f7c:	bf5c      	itt	pl
 8006f7e:	005b      	lslpl	r3, r3, #1
 8006f80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f88:	bf58      	it	pl
 8006f8a:	0049      	lslpl	r1, r1, #1
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006f92:	106d      	asrs	r5, r5, #1
 8006f94:	0049      	lsls	r1, r1, #1
 8006f96:	2016      	movs	r0, #22
 8006f98:	4632      	mov	r2, r6
 8006f9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006f9e:	1917      	adds	r7, r2, r4
 8006fa0:	429f      	cmp	r7, r3
 8006fa2:	bfde      	ittt	le
 8006fa4:	193a      	addle	r2, r7, r4
 8006fa6:	1bdb      	suble	r3, r3, r7
 8006fa8:	1936      	addle	r6, r6, r4
 8006faa:	0fcf      	lsrs	r7, r1, #31
 8006fac:	3801      	subs	r0, #1
 8006fae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006fb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006fb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006fba:	d1f0      	bne.n	8006f9e <__ieee754_sqrt+0xb6>
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	2720      	movs	r7, #32
 8006fc0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	eb00 0e0c 	add.w	lr, r0, ip
 8006fca:	db02      	blt.n	8006fd2 <__ieee754_sqrt+0xea>
 8006fcc:	d113      	bne.n	8006ff6 <__ieee754_sqrt+0x10e>
 8006fce:	458e      	cmp	lr, r1
 8006fd0:	d811      	bhi.n	8006ff6 <__ieee754_sqrt+0x10e>
 8006fd2:	f1be 0f00 	cmp.w	lr, #0
 8006fd6:	eb0e 000c 	add.w	r0, lr, ip
 8006fda:	da42      	bge.n	8007062 <__ieee754_sqrt+0x17a>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	db40      	blt.n	8007062 <__ieee754_sqrt+0x17a>
 8006fe0:	f102 0801 	add.w	r8, r2, #1
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	458e      	cmp	lr, r1
 8006fe8:	bf88      	it	hi
 8006fea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006fee:	eba1 010e 	sub.w	r1, r1, lr
 8006ff2:	4464      	add	r4, ip
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006ffa:	3f01      	subs	r7, #1
 8006ffc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007000:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007004:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007008:	d1dc      	bne.n	8006fc4 <__ieee754_sqrt+0xdc>
 800700a:	4319      	orrs	r1, r3
 800700c:	d01b      	beq.n	8007046 <__ieee754_sqrt+0x15e>
 800700e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007094 <__ieee754_sqrt+0x1ac>
 8007012:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007098 <__ieee754_sqrt+0x1b0>
 8007016:	e9da 0100 	ldrd	r0, r1, [sl]
 800701a:	e9db 2300 	ldrd	r2, r3, [fp]
 800701e:	f7f9 f8df 	bl	80001e0 <__aeabi_dsub>
 8007022:	e9da 8900 	ldrd	r8, r9, [sl]
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 fd0b 	bl	8000a48 <__aeabi_dcmple>
 8007032:	b140      	cbz	r0, 8007046 <__ieee754_sqrt+0x15e>
 8007034:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007038:	e9da 0100 	ldrd	r0, r1, [sl]
 800703c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007040:	d111      	bne.n	8007066 <__ieee754_sqrt+0x17e>
 8007042:	3601      	adds	r6, #1
 8007044:	463c      	mov	r4, r7
 8007046:	1072      	asrs	r2, r6, #1
 8007048:	0863      	lsrs	r3, r4, #1
 800704a:	07f1      	lsls	r1, r6, #31
 800704c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007050:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007054:	bf48      	it	mi
 8007056:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800705a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800705e:	4618      	mov	r0, r3
 8007060:	e756      	b.n	8006f10 <__ieee754_sqrt+0x28>
 8007062:	4690      	mov	r8, r2
 8007064:	e7be      	b.n	8006fe4 <__ieee754_sqrt+0xfc>
 8007066:	f7f9 f8bd 	bl	80001e4 <__adddf3>
 800706a:	e9da 8900 	ldrd	r8, r9, [sl]
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4640      	mov	r0, r8
 8007074:	4649      	mov	r1, r9
 8007076:	f7f9 fcdd 	bl	8000a34 <__aeabi_dcmplt>
 800707a:	b120      	cbz	r0, 8007086 <__ieee754_sqrt+0x19e>
 800707c:	1ca0      	adds	r0, r4, #2
 800707e:	bf08      	it	eq
 8007080:	3601      	addeq	r6, #1
 8007082:	3402      	adds	r4, #2
 8007084:	e7df      	b.n	8007046 <__ieee754_sqrt+0x15e>
 8007086:	1c63      	adds	r3, r4, #1
 8007088:	f023 0401 	bic.w	r4, r3, #1
 800708c:	e7db      	b.n	8007046 <__ieee754_sqrt+0x15e>
 800708e:	bf00      	nop
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	20000068 	.word	0x20000068
 8007098:	20000060 	.word	0x20000060

0800709c <_init>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr

080070a8 <_fini>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr
