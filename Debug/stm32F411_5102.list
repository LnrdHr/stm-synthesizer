
stm32F411_5102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001050  080075b0  080075b0  000085b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800860c  0800860c  0000960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008610  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002410  20000070  08008680  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002480  08008680  0000a480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe78  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002764  00000000  00000000  00019f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  0001d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db2  00000000  00000000  0001deed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013486  00000000  00000000  00035c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009682a  00000000  00000000  00049125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f14  00000000  00000000  000df994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e38a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007594 	.word	0x08007594

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08007594 	.word	0x08007594

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <ADSR_Init>:
float b2=0; //krajnja tocka level segmenta
uint16_t out=0; //amplitudni izlaz

//inicijalizacija ovojnice
void ADSR_Init(ADSR* adsr, int samplingRate, float aTime, float dTime, float sLevel, float rTime)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6178      	str	r0, [r7, #20]
 8000e88:	6139      	str	r1, [r7, #16]
 8000e8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e92:	ed87 1a01 	vstr	s2, [r7, #4]
 8000e96:	edc7 1a00 	vstr	s3, [r7]
 adsr->state=offState;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	751a      	strb	r2, [r3, #20]
 adsr->attackTime=aTime;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]
 adsr->decayTime=dTime;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	609a      	str	r2, [r3, #8]
 adsr->sustainLevel=sLevel;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	60da      	str	r2, [r3, #12]
 adsr->releaseTime=rTime;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	611a      	str	r2, [r3, #16]
 adsr->samplingRate=samplingRate;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	601a      	str	r2, [r3, #0]
 adsr->triggered = 0;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
 adsr->released = 0;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <ADSR_Update>:
 *za svaki segment ovojnice se racuna trajanje u obliku broja uzoraka(Nsamples)
 *
 *
*/
float ADSR_Update(ADSR* adsr, unsigned int in)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
 switch (adsr->state)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7d1b      	ldrb	r3, [r3, #20]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	f200 81a7 	bhi.w	800123a <ADSR_Update+0x362>
 8000eec:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef4 <ADSR_Update+0x1c>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f09 	.word	0x08000f09
 8000ef8:	08000f59 	.word	0x08000f59
 8000efc:	08000ff9 	.word	0x08000ff9
 8000f00:	08001093 	.word	0x08001093
 8000f04:	08001125 	.word	0x08001125
 {
 case offState:
  if(adsr->triggered==1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d11f      	bne.n	8000f50 <ADSR_Update+0x78>
  {
   adsr->state =attackState;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	751a      	strb	r2, [r3, #20]
   counter=0;
 8000f16:	4b9e      	ldr	r3, [pc, #632]	@ (8001190 <ADSR_Update+0x2b8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
   Nsamples = (adsr->samplingRate * adsr->attackTime)  ;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f36:	ee17 3a90 	vmov	r3, s15
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b95      	ldr	r3, [pc, #596]	@ (8001194 <ADSR_Update+0x2bc>)
 8000f3e:	801a      	strh	r2, [r3, #0]
   b1=0;
 8000f40:	4b95      	ldr	r3, [pc, #596]	@ (8001198 <ADSR_Update+0x2c0>)
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
   b2=1;
 8000f48:	4b94      	ldr	r3, [pc, #592]	@ (800119c <ADSR_Update+0x2c4>)
 8000f4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f4e:	601a      	str	r2, [r3, #0]

  }
  out = 0;
 8000f50:	4b93      	ldr	r3, [pc, #588]	@ (80011a0 <ADSR_Update+0x2c8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	801a      	strh	r2, [r3, #0]
  break;
 8000f56:	e170      	b.n	800123a <ADSR_Update+0x362>

 case attackState:
  if(counter==Nsamples)
 8000f58:	4b8e      	ldr	r3, [pc, #568]	@ (8001194 <ADSR_Update+0x2bc>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001190 <ADSR_Update+0x2b8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d120      	bne.n	8000fa8 <ADSR_Update+0xd0>
  {
   adsr->state=decayState;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2202      	movs	r2, #2
 8000f6a:	751a      	strb	r2, [r3, #20]
   counter = 0;
 8000f6c:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <ADSR_Update+0x2b8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
   Nsamples = (adsr->samplingRate * adsr->decayTime)  ;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b80      	ldr	r3, [pc, #512]	@ (8001194 <ADSR_Update+0x2bc>)
 8000f94:	801a      	strh	r2, [r3, #0]
   b1=b2;
 8000f96:	4b81      	ldr	r3, [pc, #516]	@ (800119c <ADSR_Update+0x2c4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a7f      	ldr	r2, [pc, #508]	@ (8001198 <ADSR_Update+0x2c0>)
 8000f9c:	6013      	str	r3, [r2, #0]
   b2=adsr->sustainLevel;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800119c <ADSR_Update+0x2c4>)
 8000fa4:	6013      	str	r3, [r2, #0]
   break;
 8000fa6:	e148      	b.n	800123a <ADSR_Update+0x362>
  }

  out = (int)(counter * in * (b2-b1) / Nsamples);
 8000fa8:	4b79      	ldr	r3, [pc, #484]	@ (8001190 <ADSR_Update+0x2b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fba:	4b78      	ldr	r3, [pc, #480]	@ (800119c <ADSR_Update+0x2c4>)
 8000fbc:	edd3 6a00 	vldr	s13, [r3]
 8000fc0:	4b75      	ldr	r3, [pc, #468]	@ (8001198 <ADSR_Update+0x2c0>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fce:	4b71      	ldr	r3, [pc, #452]	@ (8001194 <ADSR_Update+0x2bc>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b6d      	ldr	r3, [pc, #436]	@ (80011a0 <ADSR_Update+0x2c8>)
 8000fea:	801a      	strh	r2, [r3, #0]
  counter++;
 8000fec:	4b68      	ldr	r3, [pc, #416]	@ (8001190 <ADSR_Update+0x2b8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a67      	ldr	r2, [pc, #412]	@ (8001190 <ADSR_Update+0x2b8>)
 8000ff4:	6013      	str	r3, [r2, #0]
 //    printf("%d\n", counter);
 //    out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);

  break;
 8000ff6:	e120      	b.n	800123a <ADSR_Update+0x362>

 case decayState:
  if(counter==Nsamples)
 8000ff8:	4b66      	ldr	r3, [pc, #408]	@ (8001194 <ADSR_Update+0x2bc>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b64      	ldr	r3, [pc, #400]	@ (8001190 <ADSR_Update+0x2b8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d10d      	bne.n	8001022 <ADSR_Update+0x14a>
  {
   adsr->state=sustainState;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2203      	movs	r2, #3
 800100a:	751a      	strb	r2, [r3, #20]
   counter=0;
 800100c:	4b60      	ldr	r3, [pc, #384]	@ (8001190 <ADSR_Update+0x2b8>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
   b1=b2=adsr->sustainLevel;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	4a61      	ldr	r2, [pc, #388]	@ (800119c <ADSR_Update+0x2c4>)
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b60      	ldr	r3, [pc, #384]	@ (800119c <ADSR_Update+0x2c4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a5e      	ldr	r2, [pc, #376]	@ (8001198 <ADSR_Update+0x2c0>)
 8001020:	6013      	str	r3, [r2, #0]
  }
  out =  (in * b1) -  (int)(counter * in * (b1- b2) / Nsamples);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102c:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <ADSR_Update+0x2c0>)
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	4b56      	ldr	r3, [pc, #344]	@ (8001190 <ADSR_Update+0x2b8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001048:	4b53      	ldr	r3, [pc, #332]	@ (8001198 <ADSR_Update+0x2c0>)
 800104a:	ed93 6a00 	vldr	s12, [r3]
 800104e:	4b53      	ldr	r3, [pc, #332]	@ (800119c <ADSR_Update+0x2c4>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001058:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800105c:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <ADSR_Update+0x2bc>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001068:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800106c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <ADSR_Update+0x2c8>)
 8001084:	801a      	strh	r2, [r3, #0]
    counter++;
 8001086:	4b42      	ldr	r3, [pc, #264]	@ (8001190 <ADSR_Update+0x2b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a40      	ldr	r2, [pc, #256]	@ (8001190 <ADSR_Update+0x2b8>)
 800108e:	6013      	str	r3, [r2, #0]
 //    out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
  break;
 8001090:	e0d3      	b.n	800123a <ADSR_Update+0x362>

 case sustainState:
  if(adsr->released==1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d120      	bne.n	80010dc <ADSR_Update+0x204>
  {
   adsr->state=releaseState;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	751a      	strb	r2, [r3, #20]
   counter=0;
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <ADSR_Update+0x2b8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
   Nsamples = (adsr->samplingRate * adsr->releaseTime) ;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c0:	ee17 3a90 	vmov	r3, s15
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <ADSR_Update+0x2bc>)
 80010c8:	801a      	strh	r2, [r3, #0]
   b1=adsr->sustainLevel;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4a32      	ldr	r2, [pc, #200]	@ (8001198 <ADSR_Update+0x2c0>)
 80010d0:	6013      	str	r3, [r2, #0]
   b2=0;
 80010d2:	4b32      	ldr	r3, [pc, #200]	@ (800119c <ADSR_Update+0x2c4>)
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
   break;
 80010da:	e0ae      	b.n	800123a <ADSR_Update+0x362>
  }
  out = round(in * b2);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <ADSR_Update+0x2c4>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	ee17 0a90 	vmov	r0, s15
 80010f4:	f7ff f9d4 	bl	80004a0 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	ec43 2b10 	vmov	d0, r2, r3
 8001100:	f005 fb1e 	bl	8006740 <round>
 8001104:	ec53 2b10 	vmov	r2, r3, d0
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fcd0 	bl	8000ab0 <__aeabi_d2uiz>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <ADSR_Update+0x2c8>)
 8001116:	801a      	strh	r2, [r3, #0]
   counter++;
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <ADSR_Update+0x2b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <ADSR_Update+0x2b8>)
 8001120:	6013      	str	r3, [r2, #0]
  //out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
  break;
 8001122:	e08a      	b.n	800123a <ADSR_Update+0x362>

 case releaseState:
  //ovojnica ne mora biti u off stanju da bi se mogla ponovno pokrenuti
  if(adsr->triggered==1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d123      	bne.n	8001174 <ADSR_Update+0x29c>
  {
   adsr->state=attackState;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	751a      	strb	r2, [r3, #20]
   counter=0;
 8001132:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <ADSR_Update+0x2b8>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
   Nsamples = (adsr->samplingRate * adsr->attackTime);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 7a01 	vldr	s15, [r3, #4]
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001152:	ee17 3a90 	vmov	r3, s15
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <ADSR_Update+0x2bc>)
 800115a:	801a      	strh	r2, [r3, #0]
   b1=0;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <ADSR_Update+0x2c0>)
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
   b2=1;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <ADSR_Update+0x2c4>)
 8001166:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800116a:	601a      	str	r2, [r3, #0]
   out=0;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <ADSR_Update+0x2c8>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
   break;
 8001172:	e062      	b.n	800123a <ADSR_Update+0x362>
  }
  if(counter==Nsamples)
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <ADSR_Update+0x2bc>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <ADSR_Update+0x2b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d110      	bne.n	80011a4 <ADSR_Update+0x2cc>
  {
   adsr->state=offState;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	751a      	strb	r2, [r3, #20]
   counter=0;
 8001188:	4b01      	ldr	r3, [pc, #4]	@ (8001190 <ADSR_Update+0x2b8>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
   break;
 800118e:	e054      	b.n	800123a <ADSR_Update+0x362>
 8001190:	2000008c 	.word	0x2000008c
 8001194:	20000090 	.word	0x20000090
 8001198:	20000094 	.word	0x20000094
 800119c:	20000098 	.word	0x20000098
 80011a0:	2000009c 	.word	0x2000009c
  }
  out =  (in * b1) - round(counter * in * (b1- b2) / Nsamples);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <ADSR_Update+0x378>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	ee17 0a90 	vmov	r0, s15
 80011bc:	f7ff f970 	bl	80004a0 <__aeabi_f2d>
 80011c0:	4604      	mov	r4, r0
 80011c2:	460d      	mov	r5, r1
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <ADSR_Update+0x37c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <ADSR_Update+0x378>)
 80011d8:	edd3 6a00 	vldr	s13, [r3]
 80011dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <ADSR_Update+0x380>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <ADSR_Update+0x384>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011fa:	ee16 0a90 	vmov	r0, s13
 80011fe:	f7ff f94f 	bl	80004a0 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	ec43 2b10 	vmov	d0, r2, r3
 800120a:	f005 fa99 	bl	8006740 <round>
 800120e:	ec53 2b10 	vmov	r2, r3, d0
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7fe ffe3 	bl	80001e0 <__aeabi_dsub>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fc45 	bl	8000ab0 <__aeabi_d2uiz>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <ADSR_Update+0x388>)
 800122c:	801a      	strh	r2, [r3, #0]
  counter++;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <ADSR_Update+0x37c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <ADSR_Update+0x37c>)
 8001236:	6013      	str	r3, [r2, #0]
 //    out = ADSR_CalculateNextSample(Nsamples, in, b1, b2);
  break;
 8001238:	bf00      	nop
 }
 return out;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <ADSR_Update+0x388>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bdb0      	pop	{r4, r5, r7, pc}
 8001250:	20000094 	.word	0x20000094
 8001254:	2000008c 	.word	0x2000008c
 8001258:	20000098 	.word	0x20000098
 800125c:	20000090 	.word	0x20000090
 8001260:	2000009c 	.word	0x2000009c
 8001264:	00000000 	.word	0x00000000

08001268 <Voice_Init>:
#include "ADSR.h"
#include "Voice.h"
#include "math.h"

void Voice_Init(Voice* voice, ADSR* ovojnica, char nota, char notaVelo)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	460b      	mov	r3, r1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	4613      	mov	r3, r2
 800127c:	71bb      	strb	r3, [r7, #6]
	voice->nota = nota;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	711a      	strb	r2, [r3, #4]
	voice->notaVelo = notaVelo;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	79ba      	ldrb	r2, [r7, #6]
 8001288:	715a      	strb	r2, [r3, #5]
	voice->frekvencija_f = 440.0f * (pow(2,((voice->nota - 69) * 0.0833333f ))) / 2;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	3b45      	subs	r3, #69	@ 0x45
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001338 <Voice_Init+0xd0>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	ee17 0a90 	vmov	r0, s15
 80012a4:	f7ff f8fc 	bl	80004a0 <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	ec43 2b11 	vmov	d1, r2, r3
 80012b0:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001330 <Voice_Init+0xc8>
 80012b4:	f005 f9c8 	bl	8006648 <pow>
 80012b8:	ec51 0b10 	vmov	r0, r1, d0
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <Voice_Init+0xd4>)
 80012c2:	f7ff f945 	bl	8000550 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d6:	f7ff fa65 	bl	80007a4 <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc05 	bl	8000af0 <__aeabi_d2f>
 80012e6:	4602      	mov	r2, r0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	609a      	str	r2, [r3, #8]
	voice->notaStanje = 1;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
	voice->pomakRadnogPolja_f = 2048.0f * voice->frekvencija_f / 44000.0f;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001340 <Voice_Init+0xd8>
 80012fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001300:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001344 <Voice_Init+0xdc>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	edc3 7a03 	vstr	s15, [r3, #12]
	voice->accFaze_f = 0;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
	voice->ovojnica = ovojnica;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	615a      	str	r2, [r3, #20]
	voice->ovojnica->triggered = 1;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	2201      	movs	r2, #1
 8001322:	61da      	str	r2, [r3, #28]
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	00000000 	.word	0x00000000
 8001334:	40000000 	.word	0x40000000
 8001338:	3daaaaa6 	.word	0x3daaaaa6
 800133c:	407b8000 	.word	0x407b8000
 8001340:	45000000 	.word	0x45000000
 8001344:	472be000 	.word	0x472be000

08001348 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//DMA za citanje analognih ulaza - potenciometri
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 uint16_t ad_rez = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	81fb      	strh	r3, [r7, #14]
				  	sumAdc = sumAdc + adc1_buf[0];
 8001354:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_ADC_ConvCpltCallback+0x74>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x78>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001362:	6013      	str	r3, [r2, #0]
				  	numADCconvert ++;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 800136e:	801a      	strh	r2, [r3, #0]
				  	if (numADCconvert >= 250)
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	2bf9      	cmp	r3, #249	@ 0xf9
 8001376:	d91b      	bls.n	80013b0 <HAL_ADC_ConvCpltCallback+0x68>
				  	{
				  		ad_rez = sumAdc / 250;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x78>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <HAL_ADC_ConvCpltCallback+0x80>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	81fb      	strh	r3, [r7, #14]
				  		ad_rez = ad_rez >> 2;
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	81fb      	strh	r3, [r7, #14]
				  		numADCconvert = 0;
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 800138e:	2200      	movs	r2, #0
 8001390:	801a      	strh	r2, [r3, #0]
				  		sumAdc = 0;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
				  		ADCGain = ad_rez /1024.0f;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80013cc <HAL_ADC_ConvCpltCallback+0x84>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_ADC_ConvCpltCallback+0x88>)
 80013ac:	edc3 7a00 	vstr	s15, [r3]
				  	}
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	200012ec 	.word	0x200012ec
 80013c0:	200012f4 	.word	0x200012f4
 80013c4:	200012fc 	.word	0x200012fc
 80013c8:	10624dd3 	.word	0x10624dd3
 80013cc:	44800000 	.word	0x44800000
 80013d0:	20001300 	.word	0x20001300

080013d4 <HAL_I2S_TxHalfCpltCallback>:
////////////////////////////////////////////////////
//DMA slanja prve polovice buffera na DAC
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef* hi2s2)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
   ArangeSamplesInHalfBuff();
 80013dc:	f000 f8d2 	bl	8001584 <ArangeSamplesInHalfBuff>
	ADCGain = 0.3; // samo za debug dok nema potenciometra
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_I2S_TxHalfCpltCallback+0x64>)
 80013e2:	4a16      	ldr	r2, [pc, #88]	@ (800143c <HAL_I2S_TxHalfCpltCallback+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
	for (int i =0; i < HALF_BUFFER_SIZE; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e01c      	b.n	8001426 <HAL_I2S_TxHalfCpltCallback+0x52>
	  {
			  dma_out[i] =  (0.1f * ADCGain *(WorkingBuffer[i]))  ;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_I2S_TxHalfCpltCallback+0x64>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001440 <HAL_I2S_TxHalfCpltCallback+0x6c>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_I2S_TxHalfCpltCallback+0x70>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001412:	ee17 3a90 	vmov	r3, s15
 8001416:	b299      	uxth	r1, r3
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <HAL_I2S_TxHalfCpltCallback+0x74>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i =0; i < HALF_BUFFER_SIZE; i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142c:	dbde      	blt.n	80013ec <HAL_I2S_TxHalfCpltCallback+0x18>
	  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20001300 	.word	0x20001300
 800143c:	3e99999a 	.word	0x3e99999a
 8001440:	3dcccccd 	.word	0x3dcccccd
 8001444:	20001304 	.word	0x20001304
 8001448:	200002ec 	.word	0x200002ec

0800144c <HAL_I2S_TxCpltCallback>:
////////////////////////////////////////////////////
//DMA slanja druge polovice buffera na DAC
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s2)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

 	 ArangeSamplesInFullBuff();
 8001454:	f000 f96c 	bl	8001730 <ArangeSamplesInFullBuff>
 	ADCGain = 0.3; // samo za debug dok nema potenciometra
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_I2S_TxCpltCallback+0x68>)
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_I2S_TxCpltCallback+0x6c>)
 800145c:	601a      	str	r2, [r3, #0]
	for (int i = HALF_BUFFER_SIZE; i < FULL_BUFFER_SIZE; i++)
 800145e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e01c      	b.n	80014a0 <HAL_I2S_TxCpltCallback+0x54>
	  {
			  dma_out[i] =  (0.1f * ADCGain *(WorkingBuffer[i]))  ;
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_I2S_TxCpltCallback+0x68>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80014bc <HAL_I2S_TxCpltCallback+0x70>
 8001470:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001474:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <HAL_I2S_TxCpltCallback+0x74>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148c:	ee17 3a90 	vmov	r3, s15
 8001490:	b299      	uxth	r1, r3
 8001492:	4a0c      	ldr	r2, [pc, #48]	@ (80014c4 <HAL_I2S_TxCpltCallback+0x78>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = HALF_BUFFER_SIZE; i < FULL_BUFFER_SIZE; i++)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014a6:	dbde      	blt.n	8001466 <HAL_I2S_TxCpltCallback+0x1a>
	  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20001300 	.word	0x20001300
 80014b8:	3e99999a 	.word	0x3e99999a
 80014bc:	3dcccccd 	.word	0x3dcccccd
 80014c0:	20001304 	.word	0x20001304
 80014c4:	200002ec 	.word	0x200002ec

080014c8 <HAL_UART_RxCpltCallback>:
////////////////////////////////////////////////////
// MIDI IN obrada
void  HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart1)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
   char notaStanje = rxBuff[0];  // ON ili OFF
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <HAL_UART_RxCpltCallback+0xb4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	75fb      	strb	r3, [r7, #23]
   char nota = rxBuff[1];  // koja tipka u MIDI sustavu
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <HAL_UART_RxCpltCallback+0xb4>)
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	75bb      	strb	r3, [r7, #22]
   char notaVelo = rxBuff[2];   // glasnoca
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <HAL_UART_RxCpltCallback+0xb4>)
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	757b      	strb	r3, [r7, #21]

   if (notaStanje==0x90) // nota ON
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b90      	cmp	r3, #144	@ 0x90
 80014e6:	d127      	bne.n	8001538 <HAL_UART_RxCpltCallback+0x70>
   {
	   for(int i=0; i<16; ++i)
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	e021      	b.n	8001532 <HAL_UART_RxCpltCallback+0x6a>
	   {
		   if(voices[i] == NULL) //nailazak prvog praznog mjesta u polju
 80014ee:	4a24      	ldr	r2, [pc, #144]	@ (8001580 <HAL_UART_RxCpltCallback+0xb8>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d118      	bne.n	800152c <HAL_UART_RxCpltCallback+0x64>
		   {
			   ADSR* adsr;
			   ADSR_Init(adsr, SAMPLING_FREQ, A_TIME_MS,D_TIME_MS,S_LEVEL, R_TIME_MS);
 80014fa:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 80014fe:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001502:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001506:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800150a:	f64a 31e0 	movw	r1, #44000	@ 0xabe0
 800150e:	6938      	ldr	r0, [r7, #16]
 8001510:	f7ff fcb6 	bl	8000e80 <ADSR_Init>
			   Voice* v;
			   Voice_Init(v, adsr, nota, notaVelo);
 8001514:	7d7b      	ldrb	r3, [r7, #21]
 8001516:	7dba      	ldrb	r2, [r7, #22]
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fea4 	bl	8001268 <Voice_Init>
			   voices[i] = v;
 8001520:	4917      	ldr	r1, [pc, #92]	@ (8001580 <HAL_UART_RxCpltCallback+0xb8>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   break;
 800152a:	e005      	b.n	8001538 <HAL_UART_RxCpltCallback+0x70>
	   for(int i=0; i<16; ++i)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3301      	adds	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	ddda      	ble.n	80014ee <HAL_UART_RxCpltCallback+0x26>
		   }
	   }

   }

   if (notaStanje == 0x80)  // nota OFF
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b80      	cmp	r3, #128	@ 0x80
 800153c:	d119      	bne.n	8001572 <HAL_UART_RxCpltCallback+0xaa>
    {
  	   for(int i=0; i<16; ++i){
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	e013      	b.n	800156c <HAL_UART_RxCpltCallback+0xa4>
  		   if(voices[i]->nota == nota){
 8001544:	4a0e      	ldr	r2, [pc, #56]	@ (8001580 <HAL_UART_RxCpltCallback+0xb8>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	7dba      	ldrb	r2, [r7, #22]
 8001550:	429a      	cmp	r2, r3
 8001552:	d108      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x9e>
  			   voices[i]->ovojnica->released = 1;
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_UART_RxCpltCallback+0xb8>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2201      	movs	r2, #1
 8001560:	621a      	str	r2, [r3, #32]
  			   break;
 8001562:	bf00      	nop
  		   }
  	   }
     }

}
 8001564:	e005      	b.n	8001572 <HAL_UART_RxCpltCallback+0xaa>
  	   for(int i=0; i<16; ++i){
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	3301      	adds	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	dde8      	ble.n	8001544 <HAL_UART_RxCpltCallback+0x7c>
}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200012f0 	.word	0x200012f0
 8001580:	20002304 	.word	0x20002304

08001584 <ArangeSamplesInHalfBuff>:
////////////////////////////////////////////////////
// Priprema prve polovice buffera dok traje DMA druge polovice
void  ArangeSamplesInHalfBuff(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
   //
	indeksRadnogPolja = 0;
 800158a:	4b64      	ldr	r3, [pc, #400]	@ (800171c <ArangeSamplesInHalfBuff+0x198>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
	    while(indeksRadnogPolja < HALF_BUFFER_SIZE)
 8001590:	e0b8      	b.n	8001704 <ArangeSamplesInHalfBuff+0x180>
	    {
	    	for(int i=0; i<16; ++i)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e026      	b.n	80015e6 <ArangeSamplesInHalfBuff+0x62>
	    	{
	    		if(voices[i] != NULL)
 8001598:	4a61      	ldr	r2, [pc, #388]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01d      	beq.n	80015e0 <ArangeSamplesInHalfBuff+0x5c>
	    		{
	    			while(voices[i]->accFaze_f > FULL_BUFFER_SIZE)
 80015a4:	e00f      	b.n	80015c6 <ArangeSamplesInHalfBuff+0x42>
	    			{
	    				voices[i]->accFaze_f -= FULL_BUFFER_SIZE;
 80015a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001724 <ArangeSamplesInHalfBuff+0x1a0>
 80015be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015c2:	edc3 7a04 	vstr	s15, [r3, #16]
	    			while(voices[i]->accFaze_f > FULL_BUFFER_SIZE)
 80015c6:	4a56      	ldr	r2, [pc, #344]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80015d2:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001724 <ArangeSamplesInHalfBuff+0x1a0>
 80015d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	dce2      	bgt.n	80015a6 <ArangeSamplesInHalfBuff+0x22>
	    	for(int i=0; i<16; ++i)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	ddd5      	ble.n	8001598 <ArangeSamplesInHalfBuff+0x14>
	    			}
	    		}
	    	}

			uint16_t sumOfVoices_ui=0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	827b      	strh	r3, [r7, #18]
			uint16_t numOfVoices_ui=0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	823b      	strh	r3, [r7, #16]
			for(int i=0;i<16;++i)
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e04a      	b.n	8001690 <ArangeSamplesInHalfBuff+0x10c>
			{
				if(voices[i] != NULL)
 80015fa:	4a49      	ldr	r2, [pc, #292]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d041      	beq.n	800168a <ArangeSamplesInHalfBuff+0x106>
				{
					if(voices[i]->ovojnica->state == offState)
 8001606:	4a46      	ldr	r2, [pc, #280]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	7d1b      	ldrb	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <ArangeSamplesInHalfBuff+0x9e>
					{
						voices[i] = NULL;
 8001616:	4a42      	ldr	r2, [pc, #264]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2100      	movs	r1, #0
 800161c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001620:	e033      	b.n	800168a <ArangeSamplesInHalfBuff+0x106>
					}
					else
					{
						uint16_t accFaze_ui = round(voices[i]->accFaze_f);
 8001622:	4a3f      	ldr	r2, [pc, #252]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff37 	bl	80004a0 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	ec43 2b10 	vmov	d0, r2, r3
 800163a:	f005 f881 	bl	8006740 <round>
 800163e:	ec53 2b10 	vmov	r2, r3, d0
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa33 	bl	8000ab0 <__aeabi_d2uiz>
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
						sumOfVoices_ui += ADSR_Update(voices[i]->ovojnica, CURRENT_LUT[accFaze_ui]);
 800164e:	4a34      	ldr	r2, [pc, #208]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4933      	ldr	r1, [pc, #204]	@ (8001728 <ArangeSamplesInHalfBuff+0x1a4>)
 800165c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f7ff fc38 	bl	8000ed8 <ADSR_Update>
 8001668:	eeb0 7a40 	vmov.f32	s14, s0
 800166c:	8a7b      	ldrh	r3, [r7, #18]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167e:	ee17 3a90 	vmov	r3, s15
 8001682:	827b      	strh	r3, [r7, #18]
						numOfVoices_ui++;
 8001684:	8a3b      	ldrh	r3, [r7, #16]
 8001686:	3301      	adds	r3, #1
 8001688:	823b      	strh	r3, [r7, #16]
			for(int i=0;i<16;++i)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	ddb1      	ble.n	80015fa <ArangeSamplesInHalfBuff+0x76>
					}
				}

			}
			WorkingBuffer[indeksRadnogPolja] = sumOfVoices_ui/numOfVoices_ui;
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <ArangeSamplesInHalfBuff+0x198>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	8a79      	ldrh	r1, [r7, #18]
 800169c:	8a3a      	ldrh	r2, [r7, #16]
 800169e:	fbb1 f2f2 	udiv	r2, r1, r2
 80016a2:	b291      	uxth	r1, r2
 80016a4:	4a21      	ldr	r2, [pc, #132]	@ (800172c <ArangeSamplesInHalfBuff+0x1a8>)
 80016a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	    	if (indeksRadnogPolja < FULL_BUFFER_SIZE)
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <ArangeSamplesInHalfBuff+0x198>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016b2:	d204      	bcs.n	80016be <ArangeSamplesInHalfBuff+0x13a>
	    		indeksRadnogPolja++;
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <ArangeSamplesInHalfBuff+0x198>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a18      	ldr	r2, [pc, #96]	@ (800171c <ArangeSamplesInHalfBuff+0x198>)
 80016bc:	6013      	str	r3, [r2, #0]

	    	for(int i=0; i<16; ++i)
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	e01c      	b.n	80016fe <ArangeSamplesInHalfBuff+0x17a>
	    	{
	    		if(voices[i] != NULL)
 80016c4:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <ArangeSamplesInHalfBuff+0x174>
	    		{
	    			voices[i]->accFaze_f += voices[i]->pomakRadnogPolja_f;
 80016d0:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80016dc:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <ArangeSamplesInHalfBuff+0x19c>)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc3 7a04 	vstr	s15, [r3, #16]
	    	for(int i=0; i<16; ++i)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	dddf      	ble.n	80016c4 <ArangeSamplesInHalfBuff+0x140>
	    while(indeksRadnogPolja < HALF_BUFFER_SIZE)
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <ArangeSamplesInHalfBuff+0x198>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170c:	f4ff af41 	bcc.w	8001592 <ArangeSamplesInHalfBuff+0xe>
	    		}
	    	}
	    }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200012f8 	.word	0x200012f8
 8001720:	20002304 	.word	0x20002304
 8001724:	45000000 	.word	0x45000000
 8001728:	080075b0 	.word	0x080075b0
 800172c:	20001304 	.word	0x20001304

08001730 <ArangeSamplesInFullBuff>:
////////////////////////////////////////////////////
// Priprema druge polovice buffera dok traje DMA prve polovice
void  ArangeSamplesInFullBuff(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
   //
	    while (indeksRadnogPolja < FULL_BUFFER_SIZE)  //priprema radnog buffera
 8001736:	e0b8      	b.n	80018aa <ArangeSamplesInFullBuff+0x17a>
	    {
	    	for(int i=0; i<16; ++i)
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e026      	b.n	800178c <ArangeSamplesInFullBuff+0x5c>
	    	{
	    		if(voices[i] != NULL)
 800173e:	4a60      	ldr	r2, [pc, #384]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01d      	beq.n	8001786 <ArangeSamplesInFullBuff+0x56>
	    		{
	    			while(voices[i]->accFaze_f > FULL_BUFFER_SIZE)
 800174a:	e00f      	b.n	800176c <ArangeSamplesInFullBuff+0x3c>
	    			{
	    				voices[i]->accFaze_f -= FULL_BUFFER_SIZE;
 800174c:	4a5c      	ldr	r2, [pc, #368]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	edd3 7a04 	vldr	s15, [r3, #16]
 8001758:	4a59      	ldr	r2, [pc, #356]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80018c4 <ArangeSamplesInFullBuff+0x194>
 8001764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001768:	edc3 7a04 	vstr	s15, [r3, #16]
	    			while(voices[i]->accFaze_f > FULL_BUFFER_SIZE)
 800176c:	4a54      	ldr	r2, [pc, #336]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	edd3 7a04 	vldr	s15, [r3, #16]
 8001778:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80018c4 <ArangeSamplesInFullBuff+0x194>
 800177c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	dce2      	bgt.n	800174c <ArangeSamplesInFullBuff+0x1c>
	    	for(int i=0; i<16; ++i)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	ddd5      	ble.n	800173e <ArangeSamplesInFullBuff+0xe>
	    			}
	    		}
	    	}

	    	uint16_t sumOfVoices_ui=0;
 8001792:	2300      	movs	r3, #0
 8001794:	827b      	strh	r3, [r7, #18]
			uint16_t numOfVoices_ui=0;
 8001796:	2300      	movs	r3, #0
 8001798:	823b      	strh	r3, [r7, #16]
			for(int i=0;i<16;++i)
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e04a      	b.n	8001836 <ArangeSamplesInFullBuff+0x106>
			{
				if(voices[i] != NULL)
 80017a0:	4a47      	ldr	r2, [pc, #284]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d041      	beq.n	8001830 <ArangeSamplesInFullBuff+0x100>
				{
					if(voices[i]->ovojnica->state == offState)
 80017ac:	4a44      	ldr	r2, [pc, #272]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	7d1b      	ldrb	r3, [r3, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <ArangeSamplesInFullBuff+0x98>
					{
						voices[i] = NULL;
 80017bc:	4a40      	ldr	r2, [pc, #256]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2100      	movs	r1, #0
 80017c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017c6:	e033      	b.n	8001830 <ArangeSamplesInFullBuff+0x100>
					}
					else
					{
						uint16_t accFaze_ui = round(voices[i]->accFaze_f);
 80017c8:	4a3d      	ldr	r2, [pc, #244]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe64 	bl	80004a0 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b10 	vmov	d0, r2, r3
 80017e0:	f004 ffae 	bl	8006740 <round>
 80017e4:	ec53 2b10 	vmov	r2, r3, d0
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f960 	bl	8000ab0 <__aeabi_d2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	80fb      	strh	r3, [r7, #6]
						sumOfVoices_ui += ADSR_Update(voices[i]->ovojnica, CURRENT_LUT[accFaze_ui]);
 80017f4:	4a32      	ldr	r2, [pc, #200]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4931      	ldr	r1, [pc, #196]	@ (80018c8 <ArangeSamplesInFullBuff+0x198>)
 8001802:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7ff fb65 	bl	8000ed8 <ADSR_Update>
 800180e:	eeb0 7a40 	vmov.f32	s14, s0
 8001812:	8a7b      	ldrh	r3, [r7, #18]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	827b      	strh	r3, [r7, #18]
						numOfVoices_ui++;
 800182a:	8a3b      	ldrh	r3, [r7, #16]
 800182c:	3301      	adds	r3, #1
 800182e:	823b      	strh	r3, [r7, #16]
			for(int i=0;i<16;++i)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	ddb1      	ble.n	80017a0 <ArangeSamplesInFullBuff+0x70>
					}
				}

			}
			WorkingBuffer[indeksRadnogPolja] = sumOfVoices_ui/numOfVoices_ui;
 800183c:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <ArangeSamplesInFullBuff+0x19c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	8a79      	ldrh	r1, [r7, #18]
 8001842:	8a3a      	ldrh	r2, [r7, #16]
 8001844:	fbb1 f2f2 	udiv	r2, r1, r2
 8001848:	b291      	uxth	r1, r2
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <ArangeSamplesInFullBuff+0x1a0>)
 800184c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	    	if (indeksRadnogPolja < FULL_BUFFER_SIZE)
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <ArangeSamplesInFullBuff+0x19c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001858:	d204      	bcs.n	8001864 <ArangeSamplesInFullBuff+0x134>
	    		indeksRadnogPolja++;
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <ArangeSamplesInFullBuff+0x19c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a1a      	ldr	r2, [pc, #104]	@ (80018cc <ArangeSamplesInFullBuff+0x19c>)
 8001862:	6013      	str	r3, [r2, #0]

	    	for(int i=0; i<16; ++i)
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e01c      	b.n	80018a4 <ArangeSamplesInFullBuff+0x174>
	    	{
	    		if(voices[i] != NULL)
 800186a:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d013      	beq.n	800189e <ArangeSamplesInFullBuff+0x16e>
	    		{
	    			voices[i]->accFaze_f += voices[i]->pomakRadnogPolja_f;
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001882:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	edd3 7a03 	vldr	s15, [r3, #12]
 800188e:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <ArangeSamplesInFullBuff+0x190>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	edc3 7a04 	vstr	s15, [r3, #16]
	    	for(int i=0; i<16; ++i)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	dddf      	ble.n	800186a <ArangeSamplesInFullBuff+0x13a>
	    while (indeksRadnogPolja < FULL_BUFFER_SIZE)  //priprema radnog buffera
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <ArangeSamplesInFullBuff+0x19c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b2:	f4ff af41 	bcc.w	8001738 <ArangeSamplesInFullBuff+0x8>
	    		}
	    	}
	    }
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20002304 	.word	0x20002304
 80018c4:	45000000 	.word	0x45000000
 80018c8:	080075b0 	.word	0x080075b0
 80018cc:	200012f8 	.word	0x200012f8
 80018d0:	20001304 	.word	0x20001304

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f000 fcba 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f82e 	bl	800193c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f000 f9b8 	bl	8001c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f000 f978 	bl	8001bd8 <MX_DMA_Init>
  MX_I2S2_Init();
 80018e8:	f000 f91e 	bl	8001b28 <MX_I2S2_Init>
  MX_ADC1_Init();
 80018ec:	f000 f88e 	bl	8001a0c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80018f0:	f000 f948 	bl	8001b84 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80018f4:	f000 f8ea 	bl	8001acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) dma_out, FULL_BUFFER_SIZE);
 80018f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018fc:	4909      	ldr	r1, [pc, #36]	@ (8001924 <main+0x50>)
 80018fe:	480a      	ldr	r0, [pc, #40]	@ (8001928 <main+0x54>)
 8001900:	f002 fb74 	bl	8003fec <HAL_I2S_Transmit_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_buf, ADC_BUFFER_SIZE);
 8001904:	2202      	movs	r2, #2
 8001906:	4909      	ldr	r1, [pc, #36]	@ (800192c <main+0x58>)
 8001908:	4809      	ldr	r0, [pc, #36]	@ (8001930 <main+0x5c>)
 800190a:	f000 fe8b 	bl	8002624 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_DMA(&huart1, rxBuff, 3);
 800190e:	2203      	movs	r2, #3
 8001910:	4908      	ldr	r1, [pc, #32]	@ (8001934 <main+0x60>)
 8001912:	4809      	ldr	r0, [pc, #36]	@ (8001938 <main+0x64>)
 8001914:	f003 fdb2 	bl	800547c <HAL_UART_Receive_DMA>
  while (1)
  {
	//


	  HAL_Delay(1000);
 8001918:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800191c:	f000 fd0a 	bl	8002334 <HAL_Delay>
 8001920:	e7fa      	b.n	8001918 <main+0x44>
 8001922:	bf00      	nop
 8001924:	200002ec 	.word	0x200002ec
 8001928:	2000019c 	.word	0x2000019c
 800192c:	200012ec 	.word	0x200012ec
 8001930:	200000a0 	.word	0x200000a0
 8001934:	200012f0 	.word	0x200012f0
 8001938:	20000244 	.word	0x20000244

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	@ 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	2230      	movs	r2, #48	@ 0x30
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fe4a 	bl	80065e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <SystemClock_Config+0xc8>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <SystemClock_Config+0xc8>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001970:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <SystemClock_Config+0xc8>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <SystemClock_Config+0xcc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a20      	ldr	r2, [pc, #128]	@ (8001a08 <SystemClock_Config+0xcc>)
 8001986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <SystemClock_Config+0xcc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001998:	2301      	movs	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800199c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	2302      	movs	r3, #2
 80019a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80019ac:	230c      	movs	r3, #12
 80019ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019b0:	2360      	movs	r3, #96	@ 0x60
 80019b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019b8:	2304      	movs	r3, #4
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 ff61 	bl	8004888 <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019cc:	f000 f990 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2302      	movs	r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2103      	movs	r1, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f9c3 	bl	8004d78 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019f8:	f000 f97a 	bl	8001cf0 <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	@ 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <MX_ADC1_Init+0xb8>)
 8001a22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001a24:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <MX_ADC1_Init+0xbc>)
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a6c:	4814      	ldr	r0, [pc, #80]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a6e:	f000 fc85 	bl	800237c <HAL_ADC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a78:	f000 f93a 	bl	8001cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001a84:	2302      	movs	r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001a8e:	f000 fed7 	bl	8002840 <HAL_ADC_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a98:	f000 f92a 	bl	8001cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_ADC1_Init+0xb4>)
 8001aaa:	f000 fec9 	bl	8002840 <HAL_ADC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ab4:	f000 f91c 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200000a0 	.word	0x200000a0
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <MX_I2C1_Init+0x54>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ad8:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <MX_I2C1_Init+0x58>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001aea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001b0a:	f001 ffeb 	bl	8003ae4 <HAL_I2C_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 f8ec 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000148 	.word	0x20000148
 8001b20:	40005400 	.word	0x40005400
 8001b24:	000186a0 	.word	0x000186a0

08001b28 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b2e:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <MX_I2S2_Init+0x58>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b38:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b4e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001b52:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_I2S2_Init+0x54>)
 8001b68:	f002 f900 	bl	8003d6c <HAL_I2S_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001b72:	f000 f8bd 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000019c 	.word	0x2000019c
 8001b80:	40003800 	.word	0x40003800

08001b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <MX_USART1_UART_Init+0x50>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001b90:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8001b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001baa:	2204      	movs	r2, #4
 8001bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	f003 fc0e 	bl	80053dc <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bc6:	f000 f893 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000244 	.word	0x20000244
 8001bd4:	40011000 	.word	0x40011000

08001bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <MX_DMA_Init+0x78>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c50 <MX_DMA_Init+0x78>)
 8001be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MX_DMA_Init+0x78>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <MX_DMA_Init+0x78>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <MX_DMA_Init+0x78>)
 8001c04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_DMA_Init+0x78>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f001 f9a5 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c20:	200f      	movs	r0, #15
 8001c22:	f001 f9be 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2038      	movs	r0, #56	@ 0x38
 8001c2c:	f001 f99d 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c30:	2038      	movs	r0, #56	@ 0x38
 8001c32:	f001 f9b6 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	203a      	movs	r0, #58	@ 0x3a
 8001c3c:	f001 f995 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c40:	203a      	movs	r0, #58	@ 0x3a
 8001c42:	f001 f9ae 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <MX_GPIO_Init+0x94>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <MX_GPIO_Init+0x98>)
 8001cda:	f001 fd7f 	bl	80037dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020000 	.word	0x40020000

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <Error_Handler+0x8>

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a33      	ldr	r2, [pc, #204]	@ (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d15f      	bne.n	8001e2e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a31      	ldr	r2, [pc, #196]	@ (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a2a      	ldr	r2, [pc, #168]	@ (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001da6:	2303      	movs	r3, #3
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001daa:	2303      	movs	r3, #3
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4821      	ldr	r0, [pc, #132]	@ (8001e40 <HAL_ADC_MspInit+0xf4>)
 8001dba:	f001 fd0f 	bl	80037dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dc0:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <HAL_ADC_MspInit+0xfc>)
 8001dc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ddc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001de0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e02:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e04:	f001 f8e8 	bl	8002fd8 <HAL_DMA_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e0e:	f7ff ff6f 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2012      	movs	r0, #18
 8001e24:	f001 f8a1 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e28:	2012      	movs	r0, #18
 8001e2a:	f001 f8ba 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40012000 	.word	0x40012000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	200000e8 	.word	0x200000e8
 8001e48:	40026410 	.word	0x40026410

08001e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_I2C_MspInit+0x84>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12b      	bne.n	8001ec6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e8a:	23c0      	movs	r3, #192	@ 0xc0
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8e:	2312      	movs	r3, #18
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <HAL_I2C_MspInit+0x8c>)
 8001ea6:	f001 fc99 	bl	80037dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001eb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	@ 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020400 	.word	0x40020400

08001edc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b090      	sub	sp, #64	@ 0x40
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff8 <HAL_I2S_MspInit+0x11c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d16e      	bne.n	8001fee <HAL_I2S_MspInit+0x112>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001f10:	2301      	movs	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001f14:	23c0      	movs	r3, #192	@ 0xc0
 8001f16:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 25;
 8001f18:	2319      	movs	r3, #25
 8001f1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f907 	bl	8005138 <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001f30:	f7ff fede 	bl	8001cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <HAL_I2S_MspInit+0x120>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001ffc <HAL_I2S_MspInit+0x120>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f44:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <HAL_I2S_MspInit+0x120>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <HAL_I2S_MspInit+0x120>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	4a28      	ldr	r2, [pc, #160]	@ (8001ffc <HAL_I2S_MspInit+0x120>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f60:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <HAL_I2S_MspInit+0x120>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8001f6c:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f86:	4619      	mov	r1, r3
 8001f88:	481d      	ldr	r0, [pc, #116]	@ (8002000 <HAL_I2S_MspInit+0x124>)
 8001f8a:	f001 fc27 	bl	80037dc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001f90:	4a1d      	ldr	r2, [pc, #116]	@ (8002008 <HAL_I2S_MspInit+0x12c>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001f9c:	2240      	movs	r2, #64	@ 0x40
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fb4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fbc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001fd2:	480c      	ldr	r0, [pc, #48]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fd4:	f001 f800 	bl	8002fd8 <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 8001fde:	f7ff fe87 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_I2S_MspInit+0x128>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001fee:	bf00      	nop
 8001ff0:	3740      	adds	r7, #64	@ 0x40
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40003800 	.word	0x40003800
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020400 	.word	0x40020400
 8002004:	200001e4 	.word	0x200001e4
 8002008:	40026070 	.word	0x40026070

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a35      	ldr	r2, [pc, #212]	@ (8002100 <HAL_UART_MspInit+0xf4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d163      	bne.n	80020f6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a33      	ldr	r2, [pc, #204]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b31      	ldr	r3, [pc, #196]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a2c      	ldr	r2, [pc, #176]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <HAL_UART_MspInit+0xf8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002066:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002078:	2307      	movs	r3, #7
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4821      	ldr	r0, [pc, #132]	@ (8002108 <HAL_UART_MspInit+0xfc>)
 8002084:	f001 fbaa 	bl	80037dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002088:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_UART_MspInit+0x100>)
 800208a:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <HAL_UART_MspInit+0x104>)
 800208c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_UART_MspInit+0x100>)
 8002090:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002094:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002096:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_UART_MspInit+0x100>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_UART_MspInit+0x100>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b0:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020ca:	4810      	ldr	r0, [pc, #64]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020cc:	f000 ff84 	bl	8002fd8 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80020d6:	f7ff fe0b 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a0b      	ldr	r2, [pc, #44]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e0:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <HAL_UART_MspInit+0x100>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2025      	movs	r0, #37	@ 0x25
 80020ec:	f000 ff3d 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020f0:	2025      	movs	r0, #37	@ 0x25
 80020f2:	f000 ff56 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	@ 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40011000 	.word	0x40011000
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000
 800210c:	2000028c 	.word	0x2000028c
 8002110:	40026440 	.word	0x40026440

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <NMI_Handler+0x4>

0800211c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <MemManage_Handler+0x4>

0800212c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <UsageFault_Handler+0x4>

0800213c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f8c3 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <DMA1_Stream4_IRQHandler+0x10>)
 800217a:	f001 f8c5 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001e4 	.word	0x200001e4

08002188 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <ADC_IRQHandler+0x10>)
 800218e:	f000 f938 	bl	8002402 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000a0 	.word	0x200000a0

0800219c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021a0:	4802      	ldr	r0, [pc, #8]	@ (80021ac <USART1_IRQHandler+0x10>)
 80021a2:	f003 f991 	bl	80054c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000244 	.word	0x20000244

080021b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <DMA2_Stream0_IRQHandler+0x10>)
 80021b6:	f001 f8a7 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200000e8 	.word	0x200000e8

080021c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <DMA2_Stream2_IRQHandler+0x10>)
 80021ca:	f001 f89d 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000028c 	.word	0x2000028c

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002234 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002200:	f7ff ffea 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480c      	ldr	r0, [pc, #48]	@ (8002238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002206:	490d      	ldr	r1, [pc, #52]	@ (800223c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002208:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800221c:	4c0a      	ldr	r4, [pc, #40]	@ (8002248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f004 f9e9 	bl	8006600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222e:	f7ff fb51 	bl	80018d4 <main>
  bx  lr    
 8002232:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800223c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002240:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 8002244:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002248:	20002480 	.word	0x20002480

0800224c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800224c:	e7fe      	b.n	800224c <DMA1_Stream0_IRQHandler>
	...

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0d      	ldr	r2, [pc, #52]	@ (8002290 <HAL_Init+0x40>)
 800225a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <HAL_Init+0x40>)
 8002266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800226a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <HAL_Init+0x40>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 fe6b 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	200f      	movs	r0, #15
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff fd3a 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023c00 	.word	0x40023c00

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fe83 	bl	8002fbe <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 fe4b 	bl	8002f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	20002344 	.word	0x20002344

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	@ (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20002344 	.word	0x20002344

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e033      	b.n	80023fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fcd6 	bl	8001d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023c2:	f023 0302 	bic.w	r3, r3, #2
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fb68 	bl	8002aa4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023ea:	e001      	b.n	80023f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d049      	beq.n	80024cc <HAL_ADC_IRQHandler+0xca>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d046      	beq.n	80024cc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12b      	bne.n	80024bc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	d127      	bne.n	80024bc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002484:	2b00      	cmp	r3, #0
 8002486:	d119      	bne.n	80024bc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0220 	bic.w	r2, r2, #32
 8002496:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7fe ff43 	bl	8001348 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0212 	mvn.w	r2, #18
 80024ca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024da:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d057      	beq.n	8002592 <HAL_ADC_IRQHandler+0x190>
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d054      	beq.n	8002592 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d139      	bne.n	8002582 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002526:	2b00      	cmp	r3, #0
 8002528:	d12b      	bne.n	8002582 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002534:	2b00      	cmp	r3, #0
 8002536:	d124      	bne.n	8002582 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11d      	bne.n	8002582 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d119      	bne.n	8002582 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800255c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fc0c 	bl	8002da0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 020c 	mvn.w	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d017      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x1d6>
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d014      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10d      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f925 	bl	8002818 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0201 	mvn.w	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d015      	beq.n	800261a <HAL_ADC_IRQHandler+0x218>
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	f043 0202 	orr.w	r2, r3, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f90e 	bl	800282c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0220 	mvn.w	r2, #32
 8002618:	601a      	str	r2, [r3, #0]
  }
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e0ce      	b.n	80027e0 <HAL_ADC_Start_DMA+0x1bc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d018      	beq.n	800268a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002668:	4b5f      	ldr	r3, [pc, #380]	@ (80027e8 <HAL_ADC_Start_DMA+0x1c4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5f      	ldr	r2, [pc, #380]	@ (80027ec <HAL_ADC_Start_DMA+0x1c8>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0c9a      	lsrs	r2, r3, #18
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800267c:	e002      	b.n	8002684 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3b01      	subs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f9      	bne.n	800267e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002698:	d107      	bne.n	80026aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026a8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f040 8086 	bne.w	80027c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f8:	d106      	bne.n	8002708 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f023 0206 	bic.w	r2, r3, #6
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44
 8002706:	e002      	b.n	800270e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002716:	4b36      	ldr	r3, [pc, #216]	@ (80027f0 <HAL_ADC_Start_DMA+0x1cc>)
 8002718:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271e:	4a35      	ldr	r2, [pc, #212]	@ (80027f4 <HAL_ADC_Start_DMA+0x1d0>)
 8002720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002726:	4a34      	ldr	r2, [pc, #208]	@ (80027f8 <HAL_ADC_Start_DMA+0x1d4>)
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	4a33      	ldr	r2, [pc, #204]	@ (80027fc <HAL_ADC_Start_DMA+0x1d8>)
 8002730:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800273a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800274a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800275a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	334c      	adds	r3, #76	@ 0x4c
 8002766:	4619      	mov	r1, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f000 fce2 	bl	8003134 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10f      	bne.n	800279c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d129      	bne.n	80027de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	e020      	b.n	80027de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_ADC_Start_DMA+0x1dc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11b      	bne.n	80027de <HAL_ADC_Start_DMA+0x1ba>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d114      	bne.n	80027de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	e00b      	b.n	80027de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000000 	.word	0x20000000
 80027ec:	431bde83 	.word	0x431bde83
 80027f0:	40012300 	.word	0x40012300
 80027f4:	08002c9d 	.word	0x08002c9d
 80027f8:	08002d57 	.word	0x08002d57
 80027fc:	08002d73 	.word	0x08002d73
 8002800:	40012000 	.word	0x40012000

08002804 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e113      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x244>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b09      	cmp	r3, #9
 800286a:	d925      	bls.n	80028b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68d9      	ldr	r1, [r3, #12]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	3b1e      	subs	r3, #30
 8002882:	2207      	movs	r2, #7
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43da      	mvns	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	400a      	ands	r2, r1
 8002890:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68d9      	ldr	r1, [r3, #12]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	4603      	mov	r3, r0
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4403      	add	r3, r0
 80028aa:	3b1e      	subs	r3, #30
 80028ac:	409a      	lsls	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	e022      	b.n	80028fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6919      	ldr	r1, [r3, #16]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	2207      	movs	r2, #7
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	400a      	ands	r2, r1
 80028da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6919      	ldr	r1, [r3, #16]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4403      	add	r3, r0
 80028f4:	409a      	lsls	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b06      	cmp	r3, #6
 8002904:	d824      	bhi.n	8002950 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b05      	subs	r3, #5
 8002918:	221f      	movs	r2, #31
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	400a      	ands	r2, r1
 8002926:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b05      	subs	r3, #5
 8002942:	fa00 f203 	lsl.w	r2, r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	635a      	str	r2, [r3, #52]	@ 0x34
 800294e:	e04c      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d824      	bhi.n	80029a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	3b23      	subs	r3, #35	@ 0x23
 800296a:	221f      	movs	r2, #31
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43da      	mvns	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	400a      	ands	r2, r1
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	3b23      	subs	r3, #35	@ 0x23
 8002994:	fa00 f203 	lsl.w	r2, r0, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
 80029a0:	e023      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b41      	subs	r3, #65	@ 0x41
 80029b4:	221f      	movs	r2, #31
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	4618      	mov	r0, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b41      	subs	r3, #65	@ 0x41
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ea:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_ADC_ConfigChannel+0x250>)
 80029ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a28      	ldr	r2, [pc, #160]	@ (8002a94 <HAL_ADC_ConfigChannel+0x254>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10f      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1d8>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b12      	cmp	r3, #18
 80029fe:	d10b      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a94 <HAL_ADC_ConfigChannel+0x254>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d12b      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x23a>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <HAL_ADC_ConfigChannel+0x258>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x1f4>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b11      	cmp	r3, #17
 8002a32:	d122      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a11      	ldr	r2, [pc, #68]	@ (8002a98 <HAL_ADC_ConfigChannel+0x258>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d111      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <HAL_ADC_ConfigChannel+0x25c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x260>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	0c9a      	lsrs	r2, r3, #18
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40012300 	.word	0x40012300
 8002a94:	40012000 	.word	0x40012000
 8002a98:	10000012 	.word	0x10000012
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	431bde83 	.word	0x431bde83

08002aa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aac:	4b79      	ldr	r3, [pc, #484]	@ (8002c94 <ADC_Init+0x1f0>)
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6899      	ldr	r1, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	4a58      	ldr	r2, [pc, #352]	@ (8002c98 <ADC_Init+0x1f4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	e00f      	b.n	8002ba2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ba0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0202 	bic.w	r2, r2, #2
 8002bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6899      	ldr	r1, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e1b      	ldrb	r3, [r3, #24]
 8002bbc:	005a      	lsls	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	035a      	lsls	r2, r3, #13
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	e007      	b.n	8002c18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	051a      	lsls	r2, r3, #20
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c5a:	025a      	lsls	r2, r3, #9
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	029a      	lsls	r2, r3, #10
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40012300 	.word	0x40012300
 8002c98:	0f000001 	.word	0x0f000001

08002c9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d13c      	bne.n	8002d30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12b      	bne.n	8002d28 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d127      	bne.n	8002d28 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d119      	bne.n	8002d28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0220 	bic.w	r2, r2, #32
 8002d02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7fe fb0d 	bl	8001348 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d2e:	e00e      	b.n	8002d4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff fd75 	bl	800282c <HAL_ADC_ErrorCallback>
}
 8002d42:	e004      	b.n	8002d4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fd4d 	bl	8002804 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2240      	movs	r2, #64	@ 0x40
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fd4a 	bl	800282c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db0b      	blt.n	8002e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4907      	ldr	r1, [pc, #28]	@ (8002e50 <__NVIC_EnableIRQ+0x38>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	@ (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f20:	d301      	bcc.n	8002f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00f      	b.n	8002f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <SysTick_Config+0x40>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f7ff ff8e 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <SysTick_Config+0x40>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <SysTick_Config+0x40>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010

08002f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff29 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7c:	f7ff ff3e 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ff8e 	bl	8002ea8 <NVIC_EncodePriority>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff31 	bl	8002e18 <__NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ffa2 	bl	8002f10 <SysTick_Config>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff f99a 	bl	800231c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e099      	b.n	8003128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003014:	e00f      	b.n	8003036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003016:	f7ff f981 	bl	800231c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b05      	cmp	r3, #5
 8003022:	d908      	bls.n	8003036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2203      	movs	r2, #3
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e078      	b.n	8003128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e8      	bne.n	8003016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_DMA_Init+0x158>)
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	2b04      	cmp	r3, #4
 800308e:	d107      	bne.n	80030a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	4313      	orrs	r3, r2
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d117      	bne.n	80030fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fb01 	bl	80036e4 <DMA_CheckFifoParam>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2240      	movs	r2, #64	@ 0x40
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030f6:	2301      	movs	r3, #1
 80030f8:	e016      	b.n	8003128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fab8 	bl	8003678 <DMA_CalcBaseAndBitshift>
 8003108:	4603      	mov	r3, r0
 800310a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	223f      	movs	r2, #63	@ 0x3f
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	f010803f 	.word	0xf010803f

08003134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_DMA_Start_IT+0x26>
 8003156:	2302      	movs	r3, #2
 8003158:	e040      	b.n	80031dc <HAL_DMA_Start_IT+0xa8>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d12f      	bne.n	80031ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa4a 	bl	800361c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	223f      	movs	r2, #63	@ 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0216 	orr.w	r2, r2, #22
 80031a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e005      	b.n	80031da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031f2:	f7ff f893 	bl	800231c <HAL_GetTick>
 80031f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d008      	beq.n	8003216 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e052      	b.n	80032bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0216 	bic.w	r2, r2, #22
 8003224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003234:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_DMA_Abort+0x62>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0208 	bic.w	r2, r2, #8
 8003254:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003266:	e013      	b.n	8003290 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003268:	f7ff f858 	bl	800231c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b05      	cmp	r3, #5
 8003274:	d90c      	bls.n	8003290 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2203      	movs	r2, #3
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e015      	b.n	80032bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e4      	bne.n	8003268 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	223f      	movs	r2, #63	@ 0x3f
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	@ 0x80
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00c      	b.n	80032fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2205      	movs	r2, #5
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003314:	4b8e      	ldr	r3, [pc, #568]	@ (8003550 <HAL_DMA_IRQHandler+0x248>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8e      	ldr	r2, [pc, #568]	@ (8003554 <HAL_DMA_IRQHandler+0x24c>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2208      	movs	r2, #8
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01a      	beq.n	8003374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	2208      	movs	r2, #8
 8003362:	409a      	lsls	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f043 0202 	orr.w	r2, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2204      	movs	r2, #4
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	2204      	movs	r2, #4
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2210      	movs	r2, #16
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d043      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	2210      	movs	r2, #16
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d018      	beq.n	800344a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d024      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e01f      	b.n	8003478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
 8003448:	e016      	b.n	8003478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0208 	bic.w	r2, r2, #8
 8003466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	2220      	movs	r2, #32
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 808f 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8087 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	2220      	movs	r2, #32
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d136      	bne.n	8003520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0216 	bic.w	r2, r2, #22
 80034c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x1da>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0208 	bic.w	r2, r2, #8
 80034f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	223f      	movs	r2, #63	@ 0x3f
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d07e      	beq.n	8003614 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
        }
        return;
 800351e:	e079      	b.n	8003614 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01d      	beq.n	800356a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	2b00      	cmp	r3, #0
 8003542:	d031      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e02c      	b.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
 800354e:	bf00      	nop
 8003550:	20000000 	.word	0x20000000
 8003554:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d023      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	e01e      	b.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0210 	bic.w	r2, r2, #16
 8003586:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d032      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2205      	movs	r2, #5
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d307      	bcc.n	80035f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f2      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x2cc>
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
 8003612:	e000      	b.n	8003616 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003614:	bf00      	nop
    }
  }
}
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003638:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b40      	cmp	r3, #64	@ 0x40
 8003648:	d108      	bne.n	800365c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800365a:	e007      	b.n	800366c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3b10      	subs	r3, #16
 8003688:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <DMA_CalcBaseAndBitshift+0x64>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003692:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d909      	bls.n	80036ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036b8:	e007      	b.n	80036ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	aaaaaaab 	.word	0xaaaaaaab
 80036e0:	080085c8 	.word	0x080085c8

080036e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d856      	bhi.n	80037b2 <DMA_CheckFifoParam+0xce>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <DMA_CheckFifoParam+0x28>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	0800372f 	.word	0x0800372f
 8003714:	0800371d 	.word	0x0800371d
 8003718:	080037b3 	.word	0x080037b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d046      	beq.n	80037b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e043      	b.n	80037b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003736:	d140      	bne.n	80037ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373c:	e03d      	b.n	80037ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003746:	d121      	bne.n	800378c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d837      	bhi.n	80037be <DMA_CheckFifoParam+0xda>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <DMA_CheckFifoParam+0x70>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	0800376b 	.word	0x0800376b
 800375c:	08003765 	.word	0x08003765
 8003760:	0800377d 	.word	0x0800377d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e030      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d025      	beq.n	80037c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377a:	e022      	b.n	80037c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003784:	d11f      	bne.n	80037c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800378a:	e01c      	b.n	80037c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d903      	bls.n	800379a <DMA_CheckFifoParam+0xb6>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d003      	beq.n	80037a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003798:	e018      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      break;
 800379e:	e015      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e00b      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037b2:	bf00      	nop
 80037b4:	e00a      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e008      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e006      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e004      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;   
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
    }
  } 
  
  return status; 
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e159      	b.n	8003aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	429a      	cmp	r2, r3
 8003812:	f040 8148 	bne.w	8003aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d005      	beq.n	800382e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	2b02      	cmp	r3, #2
 800382c:	d130      	bne.n	8003890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003864:	2201      	movs	r2, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 0201 	and.w	r2, r3, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b03      	cmp	r3, #3
 800389a:	d017      	beq.n	80038cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d123      	bne.n	8003920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	08da      	lsrs	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3208      	adds	r2, #8
 80038e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	08da      	lsrs	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3208      	adds	r2, #8
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0203 	and.w	r2, r3, #3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a2 	beq.w	8003aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b57      	ldr	r3, [pc, #348]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	4a56      	ldr	r2, [pc, #344]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 800396c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003970:	6453      	str	r3, [r2, #68]	@ 0x44
 8003972:	4b54      	ldr	r3, [pc, #336]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800397e:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_GPIO_Init+0x2ec>)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a49      	ldr	r2, [pc, #292]	@ (8003acc <HAL_GPIO_Init+0x2f0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x202>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a48      	ldr	r2, [pc, #288]	@ (8003ad0 <HAL_GPIO_Init+0x2f4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x1fe>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a47      	ldr	r2, [pc, #284]	@ (8003ad4 <HAL_GPIO_Init+0x2f8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x1fa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a46      	ldr	r2, [pc, #280]	@ (8003ad8 <HAL_GPIO_Init+0x2fc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x1f6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a45      	ldr	r2, [pc, #276]	@ (8003adc <HAL_GPIO_Init+0x300>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x1f2>
 80039ca:	2304      	movs	r3, #4
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4935      	ldr	r1, [pc, #212]	@ (8003ac8 <HAL_GPIO_Init+0x2ec>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fe:	4b38      	ldr	r3, [pc, #224]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a52:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a76:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f aea2 	bls.w	80037f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	@ 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e12b      	b.n	8003d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe f99e 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2224      	movs	r2, #36	@ 0x24
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b48:	f001 face 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a81      	ldr	r2, [pc, #516]	@ (8003d58 <HAL_I2C_Init+0x274>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d807      	bhi.n	8003b68 <HAL_I2C_Init+0x84>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a80      	ldr	r2, [pc, #512]	@ (8003d5c <HAL_I2C_Init+0x278>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e006      	b.n	8003b76 <HAL_I2C_Init+0x92>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d60 <HAL_I2C_Init+0x27c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf94      	ite	ls
 8003b70:	2301      	movls	r3, #1
 8003b72:	2300      	movhi	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0e7      	b.n	8003d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a78      	ldr	r2, [pc, #480]	@ (8003d64 <HAL_I2C_Init+0x280>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0c9b      	lsrs	r3, r3, #18
 8003b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a6a      	ldr	r2, [pc, #424]	@ (8003d58 <HAL_I2C_Init+0x274>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d802      	bhi.n	8003bb8 <HAL_I2C_Init+0xd4>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	e009      	b.n	8003bcc <HAL_I2C_Init+0xe8>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	4a69      	ldr	r2, [pc, #420]	@ (8003d68 <HAL_I2C_Init+0x284>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	3301      	adds	r3, #1
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	495c      	ldr	r1, [pc, #368]	@ (8003d58 <HAL_I2C_Init+0x274>)
 8003be8:	428b      	cmp	r3, r1
 8003bea:	d819      	bhi.n	8003c20 <HAL_I2C_Init+0x13c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e59      	subs	r1, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c00:	400b      	ands	r3, r1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_I2C_Init+0x138>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1e59      	subs	r1, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1a:	e051      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	e04f      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d111      	bne.n	8003c4c <HAL_I2C_Init+0x168>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e012      	b.n	8003c72 <HAL_I2C_Init+0x18e>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x196>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e022      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10e      	bne.n	8003ca0 <HAL_I2C_Init+0x1bc>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1e58      	subs	r0, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	440b      	add	r3, r1
 8003c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c9e:	e00f      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e58      	subs	r0, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	0099      	lsls	r1, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	6809      	ldr	r1, [r1, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6911      	ldr	r1, [r2, #16]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68d2      	ldr	r2, [r2, #12]
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	000186a0 	.word	0x000186a0
 8003d5c:	001e847f 	.word	0x001e847f
 8003d60:	003d08ff 	.word	0x003d08ff
 8003d64:	431bde83 	.word	0x431bde83
 8003d68:	10624dd3 	.word	0x10624dd3

08003d6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e128      	b.n	8003fd0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a90      	ldr	r2, [pc, #576]	@ (8003fd8 <HAL_I2S_Init+0x26c>)
 8003d96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fe f89f 	bl	8001edc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003db4:	f023 030f 	bic.w	r3, r3, #15
 8003db8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d060      	beq.n	8003e8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e001      	b.n	8003ddc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d802      	bhi.n	8003dea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dea:	2001      	movs	r0, #1
 8003dec:	f001 fa94 	bl	8005318 <HAL_RCCEx_GetPeriphCLKFreq>
 8003df0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dfa:	d125      	bne.n	8003e48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d010      	beq.n	8003e26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	3305      	adds	r3, #5
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e01f      	b.n	8003e66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	3305      	adds	r3, #5
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e00e      	b.n	8003e66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	3305      	adds	r3, #5
 8003e64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4a5c      	ldr	r2, [pc, #368]	@ (8003fdc <HAL_I2S_Init+0x270>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	08db      	lsrs	r3, r3, #3
 8003e70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e003      	b.n	8003e94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d902      	bls.n	8003ea0 <HAL_I2S_Init+0x134>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2bff      	cmp	r3, #255	@ 0xff
 8003e9e:	d907      	bls.n	8003eb0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	f043 0210 	orr.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e08f      	b.n	8003fd0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	ea42 0103 	orr.w	r1, r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ece:	f023 030f 	bic.w	r3, r3, #15
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6851      	ldr	r1, [r2, #4]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6892      	ldr	r2, [r2, #8]
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68d2      	ldr	r2, [r2, #12]
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6992      	ldr	r2, [r2, #24]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ef2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d161      	bne.n	8003fc0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a38      	ldr	r2, [pc, #224]	@ (8003fe0 <HAL_I2S_Init+0x274>)
 8003f00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a37      	ldr	r2, [pc, #220]	@ (8003fe4 <HAL_I2S_Init+0x278>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2S_Init+0x1a4>
 8003f0c:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_I2S_Init+0x27c>)
 8003f0e:	e001      	b.n	8003f14 <HAL_I2S_Init+0x1a8>
 8003f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4932      	ldr	r1, [pc, #200]	@ (8003fe4 <HAL_I2S_Init+0x278>)
 8003f1c:	428a      	cmp	r2, r1
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2S_Init+0x1b8>
 8003f20:	4a31      	ldr	r2, [pc, #196]	@ (8003fe8 <HAL_I2S_Init+0x27c>)
 8003f22:	e001      	b.n	8003f28 <HAL_I2S_Init+0x1bc>
 8003f24:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f28:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe4 <HAL_I2S_Init+0x278>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2S_Init+0x1d4>
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe8 <HAL_I2S_Init+0x27c>)
 8003f3e:	e001      	b.n	8003f44 <HAL_I2S_Init+0x1d8>
 8003f40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f44:	2202      	movs	r2, #2
 8003f46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a25      	ldr	r2, [pc, #148]	@ (8003fe4 <HAL_I2S_Init+0x278>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_I2S_Init+0x1ea>
 8003f52:	4b25      	ldr	r3, [pc, #148]	@ (8003fe8 <HAL_I2S_Init+0x27c>)
 8003f54:	e001      	b.n	8003f5a <HAL_I2S_Init+0x1ee>
 8003f56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f66:	d003      	beq.n	8003f70 <HAL_I2S_Init+0x204>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	e001      	b.n	8003f7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f90:	4313      	orrs	r3, r2
 8003f92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fa8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe4 <HAL_I2S_Init+0x278>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2S_Init+0x24c>
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <HAL_I2S_Init+0x27c>)
 8003fb6:	e001      	b.n	8003fbc <HAL_I2S_Init+0x250>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fbc:	897a      	ldrh	r2, [r7, #10]
 8003fbe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	080042c1 	.word	0x080042c1
 8003fdc:	cccccccd 	.word	0xcccccccd
 8003fe0:	080043d5 	.word	0x080043d5
 8003fe4:	40003800 	.word	0x40003800
 8003fe8:	40003400 	.word	0x40003400

08003fec <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_I2S_Transmit_DMA+0x1a>
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e08a      	b.n	8004120 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	e082      	b.n	8004120 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_I2S_Transmit_DMA+0x3e>
 8004026:	2302      	movs	r3, #2
 8004028:	e07a      	b.n	8004120 <HAL_I2S_Transmit_DMA+0x134>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2203      	movs	r2, #3
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d002      	beq.n	800405e <HAL_I2S_Transmit_DMA+0x72>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b05      	cmp	r3, #5
 800405c:	d10a      	bne.n	8004074 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004072:	e005      	b.n	8004080 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	4a28      	ldr	r2, [pc, #160]	@ (8004128 <HAL_I2S_Transmit_DMA+0x13c>)
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	4a27      	ldr	r2, [pc, #156]	@ (800412c <HAL_I2S_Transmit_DMA+0x140>)
 800408e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	4a26      	ldr	r2, [pc, #152]	@ (8004130 <HAL_I2S_Transmit_DMA+0x144>)
 8004096:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80040a0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80040a8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80040b0:	f7ff f840 	bl	8003134 <HAL_DMA_Start_IT>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00f      	beq.n	80040da <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f043 0208 	orr.w	r2, r3, #8
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0202 	orr.w	r2, r2, #2
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800411c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	0800419f 	.word	0x0800419f
 800412c:	0800415d 	.word	0x0800415d
 8004130:	080041bb 	.word	0x080041bb

08004134 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10e      	bne.n	8004190 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0202 	bic.w	r2, r2, #2
 8004180:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7fd f95b 	bl	800144c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7fd f911 	bl	80013d4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0203 	bic.w	r2, r2, #3
 80041d6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f0:	f043 0208 	orr.w	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ffa5 	bl	8004148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10e      	bne.n	800425a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800424a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fd f8f9 	bl	800144c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	b292      	uxth	r2, r2
 8004276:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10e      	bne.n	80042b8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff3e 	bl	8004134 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d13a      	bne.n	8004352 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d109      	bne.n	80042fa <I2S_IRQHandler+0x3a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d102      	bne.n	80042fa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ffb4 	bl	8004262 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d126      	bne.n	8004352 <I2S_IRQHandler+0x92>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d11f      	bne.n	8004352 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004320:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	f043 0202 	orr.w	r2, r3, #2
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fefb 	bl	8004148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d136      	bne.n	80043cc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d109      	bne.n	800437c <I2S_IRQHandler+0xbc>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b80      	cmp	r3, #128	@ 0x80
 8004374:	d102      	bne.n	800437c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ff45 	bl	8004206 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d122      	bne.n	80043cc <I2S_IRQHandler+0x10c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d11b      	bne.n	80043cc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f043 0204 	orr.w	r2, r3, #4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff febe 	bl	8004148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a92      	ldr	r2, [pc, #584]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043ee:	4b92      	ldr	r3, [pc, #584]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f0:	e001      	b.n	80043f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80043f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a8b      	ldr	r2, [pc, #556]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800440c:	4b8a      	ldr	r3, [pc, #552]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800440e:	e001      	b.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004410:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004420:	d004      	beq.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 8099 	bne.w	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d107      	bne.n	8004446 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f925 	bl	8004690 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9c8 	bl	80047f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d13a      	bne.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d035      	beq.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800447e:	4b6e      	ldr	r3, [pc, #440]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004480:	e001      	b.n	8004486 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004482:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4969      	ldr	r1, [pc, #420]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800448e:	428b      	cmp	r3, r1
 8004490:	d101      	bne.n	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004492:	4b69      	ldr	r3, [pc, #420]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004494:	e001      	b.n	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004496:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800449a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800449e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f043 0202 	orr.w	r2, r3, #2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fe34 	bl	8004148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	f040 80c3 	bne.w	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80bd 	beq.w	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004506:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a49      	ldr	r2, [pc, #292]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004512:	4b49      	ldr	r3, [pc, #292]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004514:	e001      	b.n	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004516:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4944      	ldr	r1, [pc, #272]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004522:	428b      	cmp	r3, r1
 8004524:	d101      	bne.n	800452a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004526:	4b44      	ldr	r3, [pc, #272]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004528:	e001      	b.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800452a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800452e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004532:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff fdf6 	bl	8004148 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800455c:	e089      	b.n	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d107      	bne.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8be 	bl	80046f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d107      	bne.n	8004592 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8fd 	bl	800478c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004598:	2b40      	cmp	r3, #64	@ 0x40
 800459a:	d12f      	bne.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02a      	beq.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045c2:	e001      	b.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4919      	ldr	r1, [pc, #100]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d0:	428b      	cmp	r3, r1
 80045d2:	d101      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045d4:	4b18      	ldr	r3, [pc, #96]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d6:	e001      	b.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ee:	f043 0202 	orr.w	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fda6 	bl	8004148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b08      	cmp	r3, #8
 8004604:	d136      	bne.n	8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d031      	beq.n	8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800461a:	4b07      	ldr	r3, [pc, #28]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461c:	e001      	b.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4902      	ldr	r1, [pc, #8]	@ (8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800462a:	428b      	cmp	r3, r1
 800462c:	d106      	bne.n	800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800462e:	4b02      	ldr	r3, [pc, #8]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004630:	e006      	b.n	8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004632:	bf00      	nop
 8004634:	40003800 	.word	0x40003800
 8004638:	40003400 	.word	0x40003400
 800463c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004640:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004644:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004654:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fd6c 	bl	8004148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004670:	e000      	b.n	8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004672:	bf00      	nop
}
 8004674:	bf00      	nop
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	1c99      	adds	r1, r3, #2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d113      	bne.n	80046ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ffc9 	bl	800467c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c99      	adds	r1, r3, #2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6251      	str	r1, [r2, #36]	@ 0x24
 8004706:	8819      	ldrh	r1, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <I2SEx_TxISR_I2SExt+0x90>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x22>
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <I2SEx_TxISR_I2SExt+0x94>)
 8004714:	e001      	b.n	800471a <I2SEx_TxISR_I2SExt+0x26>
 8004716:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471a:	460a      	mov	r2, r1
 800471c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <I2SEx_TxISR_I2SExt+0x90>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <I2SEx_TxISR_I2SExt+0x50>
 8004740:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <I2SEx_TxISR_I2SExt+0x94>)
 8004742:	e001      	b.n	8004748 <I2SEx_TxISR_I2SExt+0x54>
 8004744:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	490d      	ldr	r1, [pc, #52]	@ (8004784 <I2SEx_TxISR_I2SExt+0x90>)
 8004750:	428b      	cmp	r3, r1
 8004752:	d101      	bne.n	8004758 <I2SEx_TxISR_I2SExt+0x64>
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <I2SEx_TxISR_I2SExt+0x94>)
 8004756:	e001      	b.n	800475c <I2SEx_TxISR_I2SExt+0x68>
 8004758:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800475c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004760:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff81 	bl	800467c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40003800 	.word	0x40003800
 8004788:	40003400 	.word	0x40003400

0800478c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68d8      	ldr	r0, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	1c99      	adds	r1, r3, #2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80047a4:	b282      	uxth	r2, r0
 80047a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d113      	bne.n	80047e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ff4a 	bl	800467c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a20      	ldr	r2, [pc, #128]	@ (8004880 <I2SEx_RxISR_I2SExt+0x90>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <I2SEx_RxISR_I2SExt+0x16>
 8004802:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <I2SEx_RxISR_I2SExt+0x94>)
 8004804:	e001      	b.n	800480a <I2SEx_RxISR_I2SExt+0x1a>
 8004806:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800480a:	68d8      	ldr	r0, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	1c99      	adds	r1, r3, #2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004816:	b282      	uxth	r2, r0
 8004818:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d121      	bne.n	8004876 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a12      	ldr	r2, [pc, #72]	@ (8004880 <I2SEx_RxISR_I2SExt+0x90>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <I2SEx_RxISR_I2SExt+0x50>
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <I2SEx_RxISR_I2SExt+0x94>)
 800483e:	e001      	b.n	8004844 <I2SEx_RxISR_I2SExt+0x54>
 8004840:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	490d      	ldr	r1, [pc, #52]	@ (8004880 <I2SEx_RxISR_I2SExt+0x90>)
 800484c:	428b      	cmp	r3, r1
 800484e:	d101      	bne.n	8004854 <I2SEx_RxISR_I2SExt+0x64>
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <I2SEx_RxISR_I2SExt+0x94>)
 8004852:	e001      	b.n	8004858 <I2SEx_RxISR_I2SExt+0x68>
 8004854:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004858:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800485c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ff03 	bl	800467c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40003800 	.word	0x40003800
 8004884:	40003400 	.word	0x40003400

08004888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e267      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d075      	beq.n	8004992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048a6:	4b88      	ldr	r3, [pc, #544]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d00c      	beq.n	80048cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b2:	4b85      	ldr	r3, [pc, #532]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d112      	bne.n	80048e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048be:	4b82      	ldr	r3, [pc, #520]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ca:	d10b      	bne.n	80048e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048cc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d05b      	beq.n	8004990 <HAL_RCC_OscConfig+0x108>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d157      	bne.n	8004990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e242      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ec:	d106      	bne.n	80048fc <HAL_RCC_OscConfig+0x74>
 80048ee:	4b76      	ldr	r3, [pc, #472]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a75      	ldr	r2, [pc, #468]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e01d      	b.n	8004938 <HAL_RCC_OscConfig+0xb0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x98>
 8004906:	4b70      	ldr	r3, [pc, #448]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 800490c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a6c      	ldr	r2, [pc, #432]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0xb0>
 8004920:	4b69      	ldr	r3, [pc, #420]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a68      	ldr	r2, [pc, #416]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	4b66      	ldr	r3, [pc, #408]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a65      	ldr	r2, [pc, #404]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d013      	beq.n	8004968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fd fcec 	bl	800231c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004948:	f7fd fce8 	bl	800231c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	@ 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e207      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0xc0>
 8004966:	e014      	b.n	8004992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fd fcd8 	bl	800231c <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004970:	f7fd fcd4 	bl	800231c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	@ 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e1f3      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	4b51      	ldr	r3, [pc, #324]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0xe8>
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d063      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800499e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049aa:	4b47      	ldr	r3, [pc, #284]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d11c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049b6:	4b44      	ldr	r3, [pc, #272]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c2:	4b41      	ldr	r3, [pc, #260]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_RCC_OscConfig+0x152>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d001      	beq.n	80049da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e1c7      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049da:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4937      	ldr	r1, [pc, #220]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	e03a      	b.n	8004a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f8:	4b34      	ldr	r3, [pc, #208]	@ (8004acc <HAL_RCC_OscConfig+0x244>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fd fc8d 	bl	800231c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a06:	f7fd fc89 	bl	800231c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e1a8      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a24:	4b28      	ldr	r3, [pc, #160]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4925      	ldr	r1, [pc, #148]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]
 8004a38:	e015      	b.n	8004a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3a:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_RCC_OscConfig+0x244>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fd fc6c 	bl	800231c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a48:	f7fd fc68 	bl	800231c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e187      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d036      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <HAL_RCC_OscConfig+0x248>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fd fc4c 	bl	800231c <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a88:	f7fd fc48 	bl	800231c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e167      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x200>
 8004aa6:	e01b      	b.n	8004ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa8:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <HAL_RCC_OscConfig+0x248>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aae:	f7fd fc35 	bl	800231c <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab4:	e00e      	b.n	8004ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab6:	f7fd fc31 	bl	800231c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d907      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e150      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	42470000 	.word	0x42470000
 8004ad0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	4b88      	ldr	r3, [pc, #544]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ea      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8097 	beq.w	8004c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af2:	4b81      	ldr	r3, [pc, #516]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	4b7d      	ldr	r3, [pc, #500]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1e:	4b77      	ldr	r3, [pc, #476]	@ (8004cfc <HAL_RCC_OscConfig+0x474>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d118      	bne.n	8004b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2a:	4b74      	ldr	r3, [pc, #464]	@ (8004cfc <HAL_RCC_OscConfig+0x474>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a73      	ldr	r2, [pc, #460]	@ (8004cfc <HAL_RCC_OscConfig+0x474>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b36:	f7fd fbf1 	bl	800231c <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3e:	f7fd fbed 	bl	800231c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e10c      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	4b6a      	ldr	r3, [pc, #424]	@ (8004cfc <HAL_RCC_OscConfig+0x474>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d106      	bne.n	8004b72 <HAL_RCC_OscConfig+0x2ea>
 8004b64:	4b64      	ldr	r3, [pc, #400]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b68:	4a63      	ldr	r2, [pc, #396]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b70:	e01c      	b.n	8004bac <HAL_RCC_OscConfig+0x324>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b05      	cmp	r3, #5
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCC_OscConfig+0x30c>
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b80:	f043 0304 	orr.w	r3, r3, #4
 8004b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b86:	4b5c      	ldr	r3, [pc, #368]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b92:	e00b      	b.n	8004bac <HAL_RCC_OscConfig+0x324>
 8004b94:	4b58      	ldr	r3, [pc, #352]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b98:	4a57      	ldr	r2, [pc, #348]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba0:	4b55      	ldr	r3, [pc, #340]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	4a54      	ldr	r2, [pc, #336]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	f023 0304 	bic.w	r3, r3, #4
 8004baa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d015      	beq.n	8004be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fbb2 	bl	800231c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fbae 	bl	800231c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e0cb      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd2:	4b49      	ldr	r3, [pc, #292]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0ee      	beq.n	8004bbc <HAL_RCC_OscConfig+0x334>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be0:	f7fd fb9c 	bl	800231c <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd fb98 	bl	800231c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0b5      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1ee      	bne.n	8004be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c10:	4b39      	ldr	r3, [pc, #228]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	4a38      	ldr	r2, [pc, #224]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80a1 	beq.w	8004d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c26:	4b34      	ldr	r3, [pc, #208]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d05c      	beq.n	8004cec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d141      	bne.n	8004cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b31      	ldr	r3, [pc, #196]	@ (8004d00 <HAL_RCC_OscConfig+0x478>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fd fb6c 	bl	800231c <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fd fb68 	bl	800231c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e087      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	491b      	ldr	r1, [pc, #108]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c90:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <HAL_RCC_OscConfig+0x478>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c96:	f7fd fb41 	bl	800231c <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9e:	f7fd fb3d 	bl	800231c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e05c      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb0:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x416>
 8004cbc:	e054      	b.n	8004d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <HAL_RCC_OscConfig+0x478>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fb2a 	bl	800231c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd fb26 	bl	800231c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e045      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x444>
 8004cea:	e03d      	b.n	8004d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e038      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d04:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <HAL_RCC_OscConfig+0x4ec>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d028      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d121      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d11a      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d111      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800

08004d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0cc      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b68      	ldr	r3, [pc, #416]	@ (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d90c      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b65      	ldr	r3, [pc, #404]	@ (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b63      	ldr	r3, [pc, #396]	@ (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de4:	4b53      	ldr	r3, [pc, #332]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a52      	ldr	r2, [pc, #328]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b50      	ldr	r3, [pc, #320]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	494d      	ldr	r1, [pc, #308]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d044      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b47      	ldr	r3, [pc, #284]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d119      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e36:	4b3f      	ldr	r3, [pc, #252]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e06f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e067      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	4b37      	ldr	r3, [pc, #220]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 0203 	bic.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4934      	ldr	r1, [pc, #208]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e68:	f7fd fa58 	bl	800231c <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e70:	f7fd fa54 	bl	800231c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e04f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	4b2b      	ldr	r3, [pc, #172]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 020c 	and.w	r2, r3, #12
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1eb      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e98:	4b25      	ldr	r3, [pc, #148]	@ (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d20c      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b22      	ldr	r3, [pc, #136]	@ (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e032      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4916      	ldr	r1, [pc, #88]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eea:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490e      	ldr	r1, [pc, #56]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004efe:	f000 f821 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	490a      	ldr	r1, [pc, #40]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004f10:	5ccb      	ldrb	r3, [r1, r3]
 8004f12:	fa22 f303 	lsr.w	r3, r2, r3
 8004f16:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd f9b8 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	080085b0 	.word	0x080085b0
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	20000004 	.word	0x20000004

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f48:	b090      	sub	sp, #64	@ 0x40
 8004f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5c:	4b59      	ldr	r3, [pc, #356]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d00d      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x40>
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	f200 80a1 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x34>
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f76:	e09b      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f78:	4b53      	ldr	r3, [pc, #332]	@ (80050c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f7c:	e09b      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f7e:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004f80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f82:	e098      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f84:	4b4f      	ldr	r3, [pc, #316]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f8e:	4b4d      	ldr	r3, [pc, #308]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d028      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	099b      	lsrs	r3, r3, #6
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fac:	2100      	movs	r1, #0
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb0:	fb03 f201 	mul.w	r2, r3, r1
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	4a43      	ldr	r2, [pc, #268]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8004fc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fca:	4413      	add	r3, r2
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	61fa      	str	r2, [r7, #28]
 8004fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004fde:	f7fb fdd7 	bl	8000b90 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fea:	e053      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fec:	4b35      	ldr	r3, [pc, #212]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	099b      	lsrs	r3, r3, #6
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	617a      	str	r2, [r7, #20]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ffe:	f04f 0b00 	mov.w	fp, #0
 8005002:	4652      	mov	r2, sl
 8005004:	465b      	mov	r3, fp
 8005006:	f04f 0000 	mov.w	r0, #0
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	0159      	lsls	r1, r3, #5
 8005010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005014:	0150      	lsls	r0, r2, #5
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	ebb2 080a 	subs.w	r8, r2, sl
 800501e:	eb63 090b 	sbc.w	r9, r3, fp
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800502e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005036:	ebb2 0408 	subs.w	r4, r2, r8
 800503a:	eb63 0509 	sbc.w	r5, r3, r9
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	00eb      	lsls	r3, r5, #3
 8005048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504c:	00e2      	lsls	r2, r4, #3
 800504e:	4614      	mov	r4, r2
 8005050:	461d      	mov	r5, r3
 8005052:	eb14 030a 	adds.w	r3, r4, sl
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	eb45 030b 	adc.w	r3, r5, fp
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506a:	4629      	mov	r1, r5
 800506c:	028b      	lsls	r3, r1, #10
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005074:	4621      	mov	r1, r4
 8005076:	028a      	lsls	r2, r1, #10
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507e:	2200      	movs	r2, #0
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	60fa      	str	r2, [r7, #12]
 8005084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005088:	f7fb fd82 	bl	8000b90 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005094:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80050a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80050b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3740      	adds	r7, #64	@ 0x40
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	017d7840 	.word	0x017d7840

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	@ (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	@ (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	080085c0 	.word	0x080085c0

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005114:	f7ff ffdc 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	@ (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	080085c0 	.word	0x080085c0

08005138 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800515c:	2b00      	cmp	r3, #0
 800515e:	d038      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005160:	4b68      	ldr	r3, [pc, #416]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005166:	f7fd f8d9 	bl	800231c <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800516e:	f7fd f8d5 	bl	800231c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0bd      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005180:	4b61      	ldr	r3, [pc, #388]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f0      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	071b      	lsls	r3, r3, #28
 800519e:	495a      	ldr	r1, [pc, #360]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051a6:	4b57      	ldr	r3, [pc, #348]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ac:	f7fd f8b6 	bl	800231c <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051b4:	f7fd f8b2 	bl	800231c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e09a      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c6:	4b50      	ldr	r3, [pc, #320]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8083 	beq.w	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	4b48      	ldr	r3, [pc, #288]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	4a47      	ldr	r2, [pc, #284]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80051f0:	4b45      	ldr	r3, [pc, #276]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051fc:	4b43      	ldr	r3, [pc, #268]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a42      	ldr	r2, [pc, #264]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005206:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005208:	f7fd f888 	bl	800231c <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005210:	f7fd f884 	bl	800231c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e06c      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005222:	4b3a      	ldr	r3, [pc, #232]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800522e:	4b36      	ldr	r3, [pc, #216]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005236:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d02f      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d028      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800524c:	4b2e      	ldr	r3, [pc, #184]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005254:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005256:	4b2e      	ldr	r3, [pc, #184]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800525c:	4b2c      	ldr	r3, [pc, #176]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005262:	4a29      	ldr	r2, [pc, #164]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005268:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d114      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005274:	f7fd f852 	bl	800231c <HAL_GetTick>
 8005278:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527a:	e00a      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7fd f84e 	bl	800231c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e034      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005292:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0ee      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052aa:	d10d      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80052ac:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80052bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c0:	4911      	ldr	r1, [pc, #68]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
 80052c6:	e005      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80052c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052d2:	6093      	str	r3, [r2, #8]
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	4909      	ldr	r1, [pc, #36]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7d1a      	ldrb	r2, [r3, #20]
 80052f6:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80052f8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	42470068 	.word	0x42470068
 8005308:	40023800 	.word	0x40023800
 800530c:	40007000 	.word	0x40007000
 8005310:	42470e40 	.word	0x42470e40
 8005314:	424711e0 	.word	0x424711e0

08005318 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d141      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005336:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800534c:	d131      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800534e:	4b20      	ldr	r3, [pc, #128]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005350:	617b      	str	r3, [r7, #20]
          break;
 8005352:	e031      	b.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005354:	4b1d      	ldr	r3, [pc, #116]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800535c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005360:	d109      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005362:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800536c:	4a19      	ldr	r2, [pc, #100]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	e008      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005380:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005388:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800538a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800539c:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a2:	0f1b      	lsrs	r3, r3, #28
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	617b      	str	r3, [r7, #20]
          break;
 80053b0:	e002      	b.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
          break;
 80053b6:	bf00      	nop
        }
      }
      break;
 80053b8:	e000      	b.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80053ba:	bf00      	nop
    }
  }
  return frequency;
 80053bc:	697b      	ldr	r3, [r7, #20]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	00bb8000 	.word	0x00bb8000
 80053d4:	017d7840 	.word	0x017d7840
 80053d8:	00f42400 	.word	0x00f42400

080053dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e042      	b.n	8005474 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc fe02 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	@ 0x24
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800541e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fe6b 	bl	80060fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b20      	cmp	r3, #32
 8005494:	d112      	bne.n	80054bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_UART_Receive_DMA+0x26>
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00b      	b.n	80054be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	461a      	mov	r2, r3
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fbc2 	bl	8005c3c <UART_Start_Receive_DMA>
 80054b8:	4603      	mov	r3, r0
 80054ba:	e000      	b.n	80054be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b0ba      	sub	sp, #232	@ 0xe8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_UART_IRQHandler+0x66>
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fd29 	bl	8005f7e <UART_Receive_IT>
      return;
 800552c:	e25b      	b.n	80059e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800552e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80de 	beq.w	80056f4 <HAL_UART_IRQHandler+0x22c>
 8005538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005548:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80d1 	beq.w	80056f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_UART_IRQHandler+0xae>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	f043 0201 	orr.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_UART_IRQHandler+0xd2>
 8005582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_UART_IRQHandler+0xf6>
 80055a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d011      	beq.n	80055ee <HAL_UART_IRQHandler+0x126>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f043 0208 	orr.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 81f2 	beq.w	80059dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x14e>
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fcb4 	bl	8005f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <HAL_UART_IRQHandler+0x17a>
 800563a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04f      	beq.n	80056e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fbbc 	bl	8005dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005652:	2b40      	cmp	r3, #64	@ 0x40
 8005654:	d141      	bne.n	80056da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800566c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800568e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800569a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1d9      	bne.n	8005656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d013      	beq.n	80056d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	4a7e      	ldr	r2, [pc, #504]	@ (80058a8 <HAL_UART_IRQHandler+0x3e0>)
 80056b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd fe04 	bl	80032c4 <HAL_DMA_Abort_IT>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	e00e      	b.n	80056f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f99e 	bl	8005a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e00a      	b.n	80056f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f99a 	bl	8005a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e006      	b.n	80056f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f996 	bl	8005a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056ee:	e175      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	bf00      	nop
    return;
 80056f2:	e173      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 814f 	bne.w	800599c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8148 	beq.w	800599c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8141 	beq.w	800599c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	f040 80b6 	bne.w	80058ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800574c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8145 	beq.w	80059e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800575a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800575e:	429a      	cmp	r2, r3
 8005760:	f080 813e 	bcs.w	80059e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800576a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005776:	f000 8088 	beq.w	800588a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1d9      	bne.n	800577a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e1      	bne.n	80057c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005828:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800582c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e3      	bne.n	8005802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800585a:	f023 0310 	bic.w	r3, r3, #16
 800585e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800586c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800586e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005872:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800587a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e3      	bne.n	8005848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	4618      	mov	r0, r3
 8005886:	f7fd fcad 	bl	80031e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005898:	b29b      	uxth	r3, r3
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	b29b      	uxth	r3, r3
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8c1 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058a6:	e09b      	b.n	80059e0 <HAL_UART_IRQHandler+0x518>
 80058a8:	08005e87 	.word	0x08005e87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 808e 	beq.w	80059e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8089 	beq.w	80059e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80058f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e3      	bne.n	80058d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	623b      	str	r3, [r7, #32]
   return(result);
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3314      	adds	r3, #20
 800592a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800592e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e3      	bne.n	800590a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005974:	61fa      	str	r2, [r7, #28]
 8005976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	69b9      	ldr	r1, [r7, #24]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	617b      	str	r3, [r7, #20]
   return(result);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e3      	bne.n	8005950 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800598e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f847 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800599a:	e023      	b.n	80059e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <HAL_UART_IRQHandler+0x4f4>
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fa7a 	bl	8005eae <UART_Transmit_IT>
    return;
 80059ba:	e014      	b.n	80059e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <HAL_UART_IRQHandler+0x51e>
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 faba 	bl	8005f4e <UART_EndTransmit_IT>
    return;
 80059da:	e004      	b.n	80059e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80059e4:	bf00      	nop
  }
}
 80059e6:	37e8      	adds	r7, #232	@ 0xe8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b09c      	sub	sp, #112	@ 0x70
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d172      	bne.n	8005b42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a5e:	2200      	movs	r2, #0
 8005a60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e5      	bne.n	8005a62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3314      	adds	r3, #20
 8005ab4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e5      	bne.n	8005a96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005aea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d119      	bne.n	8005b42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b2e:	61fa      	str	r2, [r7, #28]
 8005b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	69b9      	ldr	r1, [r7, #24]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b44:	2200      	movs	r2, #0
 8005b46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d106      	bne.n	8005b5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b54:	4619      	mov	r1, r3
 8005b56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b58:	f7ff ff66 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b5c:	e002      	b.n	8005b64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b60:	f7fb fcb2 	bl	80014c8 <HAL_UART_RxCpltCallback>
}
 8005b64:	bf00      	nop
 8005b66:	3770      	adds	r7, #112	@ 0x70
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d108      	bne.n	8005b9a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4619      	mov	r1, r3
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff ff48 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b98:	e002      	b.n	8005ba0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7ff ff30 	bl	8005a00 <HAL_UART_RxHalfCpltCallback>
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc4:	2b80      	cmp	r3, #128	@ 0x80
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b21      	cmp	r3, #33	@ 0x21
 8005bda:	d108      	bne.n	8005bee <UART_DMAError+0x46>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005be8:	68b8      	ldr	r0, [r7, #8]
 8005bea:	f000 f8c1 	bl	8005d70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b22      	cmp	r3, #34	@ 0x22
 8005c0e:	d108      	bne.n	8005c22 <UART_DMAError+0x7a>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	f000 f8cf 	bl	8005dc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	f043 0210 	orr.w	r2, r3, #16
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2e:	68b8      	ldr	r0, [r7, #8]
 8005c30:	f7ff fef0 	bl	8005a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b098      	sub	sp, #96	@ 0x60
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2222      	movs	r2, #34	@ 0x22
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c68:	4a3e      	ldr	r2, [pc, #248]	@ (8005d64 <UART_Start_Receive_DMA+0x128>)
 8005c6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c70:	4a3d      	ldr	r2, [pc, #244]	@ (8005d68 <UART_Start_Receive_DMA+0x12c>)
 8005c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	4a3c      	ldr	r2, [pc, #240]	@ (8005d6c <UART_Start_Receive_DMA+0x130>)
 8005c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	2200      	movs	r2, #0
 8005c82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c84:	f107 0308 	add.w	r3, r7, #8
 8005c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	f7fd fa4a 	bl	8003134 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d019      	beq.n	8005cf2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cde:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ce4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d12:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	617b      	str	r3, [r7, #20]
   return(result);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d46:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6a39      	ldr	r1, [r7, #32]
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e5      	bne.n	8005d26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3760      	adds	r7, #96	@ 0x60
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	08005a41 	.word	0x08005a41
 8005d68:	08005b6d 	.word	0x08005b6d
 8005d6c:	08005ba9 	.word	0x08005ba9

08005d70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	@ 0x24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	61ba      	str	r2, [r7, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005db4:	bf00      	nop
 8005db6:	3724      	adds	r7, #36	@ 0x24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b095      	sub	sp, #84	@ 0x54
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005de8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e5      	bne.n	8005dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f023 0301 	bic.w	r3, r3, #1
 8005e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d119      	bne.n	8005e6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f023 0310 	bic.w	r3, r3, #16
 8005e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e58:	61ba      	str	r2, [r7, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6979      	ldr	r1, [r7, #20]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	613b      	str	r3, [r7, #16]
   return(result);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e7a:	bf00      	nop
 8005e7c:	3754      	adds	r7, #84	@ 0x54
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff fdb7 	bl	8005a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b21      	cmp	r3, #33	@ 0x21
 8005ec0:	d13e      	bne.n	8005f40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eca:	d114      	bne.n	8005ef6 <UART_Transmit_IT+0x48>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d110      	bne.n	8005ef6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	621a      	str	r2, [r3, #32]
 8005ef4:	e008      	b.n	8005f08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6211      	str	r1, [r2, #32]
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fd3c 	bl	80059ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b08c      	sub	sp, #48	@ 0x30
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b22      	cmp	r3, #34	@ 0x22
 8005f90:	f040 80ae 	bne.w	80060f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9c:	d117      	bne.n	8005fce <UART_Receive_IT+0x50>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d113      	bne.n	8005fce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fcc:	e026      	b.n	800601c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe0:	d007      	beq.n	8005ff2 <UART_Receive_IT+0x74>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <UART_Receive_IT+0x82>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e008      	b.n	8006012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4619      	mov	r1, r3
 800602a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800602c:	2b00      	cmp	r3, #0
 800602e:	d15d      	bne.n	80060ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0220 	bic.w	r2, r2, #32
 800603e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800604e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	2b01      	cmp	r3, #1
 8006074:	d135      	bne.n	80060e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	613b      	str	r3, [r7, #16]
   return(result);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f023 0310 	bic.w	r3, r3, #16
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	623a      	str	r2, [r7, #32]
 800609e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	69f9      	ldr	r1, [r7, #28]
 80060a2:	6a3a      	ldr	r2, [r7, #32]
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e5      	bne.n	800607c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d10a      	bne.n	80060d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fca4 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
 80060e0:	e002      	b.n	80060e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb f9f0 	bl	80014c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e002      	b.n	80060f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3730      	adds	r7, #48	@ 0x30
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006100:	b0c0      	sub	sp, #256	@ 0x100
 8006102:	af00      	add	r7, sp, #0
 8006104:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	ea40 0301 	orr.w	r3, r0, r1
 8006124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	431a      	orrs	r2, r3
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	431a      	orrs	r2, r3
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006154:	f021 010c 	bic.w	r1, r1, #12
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006162:	430b      	orrs	r3, r1
 8006164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006176:	6999      	ldr	r1, [r3, #24]
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	ea40 0301 	orr.w	r3, r0, r1
 8006182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b8f      	ldr	r3, [pc, #572]	@ (80063c8 <UART_SetConfig+0x2cc>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d005      	beq.n	800619c <UART_SetConfig+0xa0>
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b8d      	ldr	r3, [pc, #564]	@ (80063cc <UART_SetConfig+0x2d0>)
 8006198:	429a      	cmp	r2, r3
 800619a:	d104      	bne.n	80061a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800619c:	f7fe ffb8 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 80061a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061a4:	e003      	b.n	80061ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a6:	f7fe ff9f 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 80061aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b8:	f040 810c 	bne.w	80063d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061ce:	4622      	mov	r2, r4
 80061d0:	462b      	mov	r3, r5
 80061d2:	1891      	adds	r1, r2, r2
 80061d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061d6:	415b      	adcs	r3, r3
 80061d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061de:	4621      	mov	r1, r4
 80061e0:	eb12 0801 	adds.w	r8, r2, r1
 80061e4:	4629      	mov	r1, r5
 80061e6:	eb43 0901 	adc.w	r9, r3, r1
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fe:	4690      	mov	r8, r2
 8006200:	4699      	mov	r9, r3
 8006202:	4623      	mov	r3, r4
 8006204:	eb18 0303 	adds.w	r3, r8, r3
 8006208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800620c:	462b      	mov	r3, r5
 800620e:	eb49 0303 	adc.w	r3, r9, r3
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006222:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800622a:	460b      	mov	r3, r1
 800622c:	18db      	adds	r3, r3, r3
 800622e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006230:	4613      	mov	r3, r2
 8006232:	eb42 0303 	adc.w	r3, r2, r3
 8006236:	657b      	str	r3, [r7, #84]	@ 0x54
 8006238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800623c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006240:	f7fa fca6 	bl	8000b90 <__aeabi_uldivmod>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4b61      	ldr	r3, [pc, #388]	@ (80063d0 <UART_SetConfig+0x2d4>)
 800624a:	fba3 2302 	umull	r2, r3, r3, r2
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	011c      	lsls	r4, r3, #4
 8006252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800625c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006264:	4642      	mov	r2, r8
 8006266:	464b      	mov	r3, r9
 8006268:	1891      	adds	r1, r2, r2
 800626a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800626c:	415b      	adcs	r3, r3
 800626e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006274:	4641      	mov	r1, r8
 8006276:	eb12 0a01 	adds.w	sl, r2, r1
 800627a:	4649      	mov	r1, r9
 800627c:	eb43 0b01 	adc.w	fp, r3, r1
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800628c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006294:	4692      	mov	sl, r2
 8006296:	469b      	mov	fp, r3
 8006298:	4643      	mov	r3, r8
 800629a:	eb1a 0303 	adds.w	r3, sl, r3
 800629e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb4b 0303 	adc.w	r3, fp, r3
 80062a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062c0:	460b      	mov	r3, r1
 80062c2:	18db      	adds	r3, r3, r3
 80062c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c6:	4613      	mov	r3, r2
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062d6:	f7fa fc5b 	bl	8000b90 <__aeabi_uldivmod>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	4b3b      	ldr	r3, [pc, #236]	@ (80063d0 <UART_SetConfig+0x2d4>)
 80062e2:	fba3 2301 	umull	r2, r3, r3, r1
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2264      	movs	r2, #100	@ 0x64
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	1acb      	subs	r3, r1, r3
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <UART_SetConfig+0x2d4>)
 80062f8:	fba3 2302 	umull	r2, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006304:	441c      	add	r4, r3
 8006306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006310:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	1891      	adds	r1, r2, r2
 800631e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006320:	415b      	adcs	r3, r3
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006328:	4641      	mov	r1, r8
 800632a:	1851      	adds	r1, r2, r1
 800632c:	6339      	str	r1, [r7, #48]	@ 0x30
 800632e:	4649      	mov	r1, r9
 8006330:	414b      	adcs	r3, r1
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006340:	4659      	mov	r1, fp
 8006342:	00cb      	lsls	r3, r1, #3
 8006344:	4651      	mov	r1, sl
 8006346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634a:	4651      	mov	r1, sl
 800634c:	00ca      	lsls	r2, r1, #3
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	4603      	mov	r3, r0
 8006354:	4642      	mov	r2, r8
 8006356:	189b      	adds	r3, r3, r2
 8006358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800635c:	464b      	mov	r3, r9
 800635e:	460a      	mov	r2, r1
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006374:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800637c:	460b      	mov	r3, r1
 800637e:	18db      	adds	r3, r3, r3
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006382:	4613      	mov	r3, r2
 8006384:	eb42 0303 	adc.w	r3, r2, r3
 8006388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800638a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800638e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006392:	f7fa fbfd 	bl	8000b90 <__aeabi_uldivmod>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <UART_SetConfig+0x2d4>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	2164      	movs	r1, #100	@ 0x64
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	3332      	adds	r3, #50	@ 0x32
 80063ae:	4a08      	ldr	r2, [pc, #32]	@ (80063d0 <UART_SetConfig+0x2d4>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f003 0207 	and.w	r2, r3, #7
 80063ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4422      	add	r2, r4
 80063c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c4:	e106      	b.n	80065d4 <UART_SetConfig+0x4d8>
 80063c6:	bf00      	nop
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063e6:	4642      	mov	r2, r8
 80063e8:	464b      	mov	r3, r9
 80063ea:	1891      	adds	r1, r2, r2
 80063ec:	6239      	str	r1, [r7, #32]
 80063ee:	415b      	adcs	r3, r3
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f6:	4641      	mov	r1, r8
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	4649      	mov	r1, r9
 80063fc:	eb43 0501 	adc.w	r5, r3, r1
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	00eb      	lsls	r3, r5, #3
 800640a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640e:	00e2      	lsls	r2, r4, #3
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	4643      	mov	r3, r8
 8006416:	18e3      	adds	r3, r4, r3
 8006418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800641c:	464b      	mov	r3, r9
 800641e:	eb45 0303 	adc.w	r3, r5, r3
 8006422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006442:	4629      	mov	r1, r5
 8006444:	008b      	lsls	r3, r1, #2
 8006446:	4621      	mov	r1, r4
 8006448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644c:	4621      	mov	r1, r4
 800644e:	008a      	lsls	r2, r1, #2
 8006450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006454:	f7fa fb9c 	bl	8000b90 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4b60      	ldr	r3, [pc, #384]	@ (80065e0 <UART_SetConfig+0x4e4>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	011c      	lsls	r4, r3, #4
 8006466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646a:	2200      	movs	r2, #0
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	1891      	adds	r1, r2, r2
 800647e:	61b9      	str	r1, [r7, #24]
 8006480:	415b      	adcs	r3, r3
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006488:	4641      	mov	r1, r8
 800648a:	1851      	adds	r1, r2, r1
 800648c:	6139      	str	r1, [r7, #16]
 800648e:	4649      	mov	r1, r9
 8006490:	414b      	adcs	r3, r1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a0:	4659      	mov	r1, fp
 80064a2:	00cb      	lsls	r3, r1, #3
 80064a4:	4651      	mov	r1, sl
 80064a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064aa:	4651      	mov	r1, sl
 80064ac:	00ca      	lsls	r2, r1, #3
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	4642      	mov	r2, r8
 80064b6:	189b      	adds	r3, r3, r2
 80064b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064bc:	464b      	mov	r3, r9
 80064be:	460a      	mov	r2, r1
 80064c0:	eb42 0303 	adc.w	r3, r2, r3
 80064c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064e0:	4649      	mov	r1, r9
 80064e2:	008b      	lsls	r3, r1, #2
 80064e4:	4641      	mov	r1, r8
 80064e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ea:	4641      	mov	r1, r8
 80064ec:	008a      	lsls	r2, r1, #2
 80064ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064f2:	f7fa fb4d 	bl	8000b90 <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	4b38      	ldr	r3, [pc, #224]	@ (80065e0 <UART_SetConfig+0x4e4>)
 80064fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2264      	movs	r2, #100	@ 0x64
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	1acb      	subs	r3, r1, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	3332      	adds	r3, #50	@ 0x32
 8006510:	4a33      	ldr	r2, [pc, #204]	@ (80065e0 <UART_SetConfig+0x4e4>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800651c:	441c      	add	r4, r3
 800651e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006522:	2200      	movs	r2, #0
 8006524:	673b      	str	r3, [r7, #112]	@ 0x70
 8006526:	677a      	str	r2, [r7, #116]	@ 0x74
 8006528:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	1891      	adds	r1, r2, r2
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	415b      	adcs	r3, r3
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653c:	4641      	mov	r1, r8
 800653e:	1851      	adds	r1, r2, r1
 8006540:	6039      	str	r1, [r7, #0]
 8006542:	4649      	mov	r1, r9
 8006544:	414b      	adcs	r3, r1
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006554:	4659      	mov	r1, fp
 8006556:	00cb      	lsls	r3, r1, #3
 8006558:	4651      	mov	r1, sl
 800655a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655e:	4651      	mov	r1, sl
 8006560:	00ca      	lsls	r2, r1, #3
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	4603      	mov	r3, r0
 8006568:	4642      	mov	r2, r8
 800656a:	189b      	adds	r3, r3, r2
 800656c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800656e:	464b      	mov	r3, r9
 8006570:	460a      	mov	r2, r1
 8006572:	eb42 0303 	adc.w	r3, r2, r3
 8006576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	663b      	str	r3, [r7, #96]	@ 0x60
 8006582:	667a      	str	r2, [r7, #100]	@ 0x64
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006590:	4649      	mov	r1, r9
 8006592:	008b      	lsls	r3, r1, #2
 8006594:	4641      	mov	r1, r8
 8006596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800659a:	4641      	mov	r1, r8
 800659c:	008a      	lsls	r2, r1, #2
 800659e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065a2:	f7fa faf5 	bl	8000b90 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <UART_SetConfig+0x4e4>)
 80065ac:	fba3 1302 	umull	r1, r3, r3, r2
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	2164      	movs	r1, #100	@ 0x64
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	3332      	adds	r3, #50	@ 0x32
 80065be:	4a08      	ldr	r2, [pc, #32]	@ (80065e0 <UART_SetConfig+0x4e4>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f003 020f 	and.w	r2, r3, #15
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4422      	add	r2, r4
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065da:	46bd      	mov	sp, r7
 80065dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e0:	51eb851f 	.word	0x51eb851f

080065e4 <memset>:
 80065e4:	4402      	add	r2, r0
 80065e6:	4603      	mov	r3, r0
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d100      	bne.n	80065ee <memset+0xa>
 80065ec:	4770      	bx	lr
 80065ee:	f803 1b01 	strb.w	r1, [r3], #1
 80065f2:	e7f9      	b.n	80065e8 <memset+0x4>

080065f4 <__errno>:
 80065f4:	4b01      	ldr	r3, [pc, #4]	@ (80065fc <__errno+0x8>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000000c 	.word	0x2000000c

08006600 <__libc_init_array>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4d0d      	ldr	r5, [pc, #52]	@ (8006638 <__libc_init_array+0x38>)
 8006604:	4c0d      	ldr	r4, [pc, #52]	@ (800663c <__libc_init_array+0x3c>)
 8006606:	1b64      	subs	r4, r4, r5
 8006608:	10a4      	asrs	r4, r4, #2
 800660a:	2600      	movs	r6, #0
 800660c:	42a6      	cmp	r6, r4
 800660e:	d109      	bne.n	8006624 <__libc_init_array+0x24>
 8006610:	4d0b      	ldr	r5, [pc, #44]	@ (8006640 <__libc_init_array+0x40>)
 8006612:	4c0c      	ldr	r4, [pc, #48]	@ (8006644 <__libc_init_array+0x44>)
 8006614:	f000 ffbe 	bl	8007594 <_init>
 8006618:	1b64      	subs	r4, r4, r5
 800661a:	10a4      	asrs	r4, r4, #2
 800661c:	2600      	movs	r6, #0
 800661e:	42a6      	cmp	r6, r4
 8006620:	d105      	bne.n	800662e <__libc_init_array+0x2e>
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	f855 3b04 	ldr.w	r3, [r5], #4
 8006628:	4798      	blx	r3
 800662a:	3601      	adds	r6, #1
 800662c:	e7ee      	b.n	800660c <__libc_init_array+0xc>
 800662e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006632:	4798      	blx	r3
 8006634:	3601      	adds	r6, #1
 8006636:	e7f2      	b.n	800661e <__libc_init_array+0x1e>
 8006638:	08008608 	.word	0x08008608
 800663c:	08008608 	.word	0x08008608
 8006640:	08008608 	.word	0x08008608
 8006644:	0800860c 	.word	0x0800860c

08006648 <pow>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	ed2d 8b02 	vpush	{d8}
 800664e:	eeb0 8a40 	vmov.f32	s16, s0
 8006652:	eef0 8a60 	vmov.f32	s17, s1
 8006656:	ec55 4b11 	vmov	r4, r5, d1
 800665a:	f000 f8b9 	bl	80067d0 <__ieee754_pow>
 800665e:	4622      	mov	r2, r4
 8006660:	462b      	mov	r3, r5
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	ec57 6b10 	vmov	r6, r7, d0
 800666a:	f7fa fa0b 	bl	8000a84 <__aeabi_dcmpun>
 800666e:	2800      	cmp	r0, #0
 8006670:	d13b      	bne.n	80066ea <pow+0xa2>
 8006672:	ec51 0b18 	vmov	r0, r1, d8
 8006676:	2200      	movs	r2, #0
 8006678:	2300      	movs	r3, #0
 800667a:	f7fa f9d1 	bl	8000a20 <__aeabi_dcmpeq>
 800667e:	b1b8      	cbz	r0, 80066b0 <pow+0x68>
 8006680:	2200      	movs	r2, #0
 8006682:	2300      	movs	r3, #0
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7fa f9ca 	bl	8000a20 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d146      	bne.n	800671e <pow+0xd6>
 8006690:	ec45 4b10 	vmov	d0, r4, r5
 8006694:	f000 f848 	bl	8006728 <finite>
 8006698:	b338      	cbz	r0, 80066ea <pow+0xa2>
 800669a:	2200      	movs	r2, #0
 800669c:	2300      	movs	r3, #0
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7fa f9c7 	bl	8000a34 <__aeabi_dcmplt>
 80066a6:	b300      	cbz	r0, 80066ea <pow+0xa2>
 80066a8:	f7ff ffa4 	bl	80065f4 <__errno>
 80066ac:	2322      	movs	r3, #34	@ 0x22
 80066ae:	e01b      	b.n	80066e8 <pow+0xa0>
 80066b0:	ec47 6b10 	vmov	d0, r6, r7
 80066b4:	f000 f838 	bl	8006728 <finite>
 80066b8:	b9e0      	cbnz	r0, 80066f4 <pow+0xac>
 80066ba:	eeb0 0a48 	vmov.f32	s0, s16
 80066be:	eef0 0a68 	vmov.f32	s1, s17
 80066c2:	f000 f831 	bl	8006728 <finite>
 80066c6:	b1a8      	cbz	r0, 80066f4 <pow+0xac>
 80066c8:	ec45 4b10 	vmov	d0, r4, r5
 80066cc:	f000 f82c 	bl	8006728 <finite>
 80066d0:	b180      	cbz	r0, 80066f4 <pow+0xac>
 80066d2:	4632      	mov	r2, r6
 80066d4:	463b      	mov	r3, r7
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7fa f9d3 	bl	8000a84 <__aeabi_dcmpun>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d0e2      	beq.n	80066a8 <pow+0x60>
 80066e2:	f7ff ff87 	bl	80065f4 <__errno>
 80066e6:	2321      	movs	r3, #33	@ 0x21
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	ecbd 8b02 	vpop	{d8}
 80066ee:	ec47 6b10 	vmov	d0, r6, r7
 80066f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa f990 	bl	8000a20 <__aeabi_dcmpeq>
 8006700:	2800      	cmp	r0, #0
 8006702:	d0f2      	beq.n	80066ea <pow+0xa2>
 8006704:	eeb0 0a48 	vmov.f32	s0, s16
 8006708:	eef0 0a68 	vmov.f32	s1, s17
 800670c:	f000 f80c 	bl	8006728 <finite>
 8006710:	2800      	cmp	r0, #0
 8006712:	d0ea      	beq.n	80066ea <pow+0xa2>
 8006714:	ec45 4b10 	vmov	d0, r4, r5
 8006718:	f000 f806 	bl	8006728 <finite>
 800671c:	e7c3      	b.n	80066a6 <pow+0x5e>
 800671e:	4f01      	ldr	r7, [pc, #4]	@ (8006724 <pow+0xdc>)
 8006720:	2600      	movs	r6, #0
 8006722:	e7e2      	b.n	80066ea <pow+0xa2>
 8006724:	3ff00000 	.word	0x3ff00000

08006728 <finite>:
 8006728:	b082      	sub	sp, #8
 800672a:	ed8d 0b00 	vstr	d0, [sp]
 800672e:	9801      	ldr	r0, [sp, #4]
 8006730:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006734:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006738:	0fc0      	lsrs	r0, r0, #31
 800673a:	b002      	add	sp, #8
 800673c:	4770      	bx	lr
	...

08006740 <round>:
 8006740:	ec51 0b10 	vmov	r0, r1, d0
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800674a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800674e:	2a13      	cmp	r2, #19
 8006750:	460b      	mov	r3, r1
 8006752:	4605      	mov	r5, r0
 8006754:	dc1b      	bgt.n	800678e <round+0x4e>
 8006756:	2a00      	cmp	r2, #0
 8006758:	da0b      	bge.n	8006772 <round+0x32>
 800675a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800675e:	3201      	adds	r2, #1
 8006760:	bf04      	itt	eq
 8006762:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8006766:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800676a:	2200      	movs	r2, #0
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	e015      	b.n	800679e <round+0x5e>
 8006772:	4c15      	ldr	r4, [pc, #84]	@ (80067c8 <round+0x88>)
 8006774:	4114      	asrs	r4, r2
 8006776:	ea04 0601 	and.w	r6, r4, r1
 800677a:	4306      	orrs	r6, r0
 800677c:	d00f      	beq.n	800679e <round+0x5e>
 800677e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006782:	fa41 f202 	asr.w	r2, r1, r2
 8006786:	4413      	add	r3, r2
 8006788:	ea23 0304 	bic.w	r3, r3, r4
 800678c:	e7ed      	b.n	800676a <round+0x2a>
 800678e:	2a33      	cmp	r2, #51	@ 0x33
 8006790:	dd08      	ble.n	80067a4 <round+0x64>
 8006792:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006796:	d102      	bne.n	800679e <round+0x5e>
 8006798:	4602      	mov	r2, r0
 800679a:	f7f9 fd23 	bl	80001e4 <__adddf3>
 800679e:	ec41 0b10 	vmov	d0, r0, r1
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80067a8:	f04f 34ff 	mov.w	r4, #4294967295
 80067ac:	40f4      	lsrs	r4, r6
 80067ae:	4204      	tst	r4, r0
 80067b0:	d0f5      	beq.n	800679e <round+0x5e>
 80067b2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80067b6:	2201      	movs	r2, #1
 80067b8:	408a      	lsls	r2, r1
 80067ba:	1952      	adds	r2, r2, r5
 80067bc:	bf28      	it	cs
 80067be:	3301      	addcs	r3, #1
 80067c0:	ea22 0204 	bic.w	r2, r2, r4
 80067c4:	e7d2      	b.n	800676c <round+0x2c>
 80067c6:	bf00      	nop
 80067c8:	000fffff 	.word	0x000fffff
 80067cc:	00000000 	.word	0x00000000

080067d0 <__ieee754_pow>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	b091      	sub	sp, #68	@ 0x44
 80067d6:	ed8d 1b00 	vstr	d1, [sp]
 80067da:	e9dd 1900 	ldrd	r1, r9, [sp]
 80067de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80067e2:	ea5a 0001 	orrs.w	r0, sl, r1
 80067e6:	ec57 6b10 	vmov	r6, r7, d0
 80067ea:	d113      	bne.n	8006814 <__ieee754_pow+0x44>
 80067ec:	19b3      	adds	r3, r6, r6
 80067ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80067f2:	4152      	adcs	r2, r2
 80067f4:	4298      	cmp	r0, r3
 80067f6:	4b98      	ldr	r3, [pc, #608]	@ (8006a58 <__ieee754_pow+0x288>)
 80067f8:	4193      	sbcs	r3, r2
 80067fa:	f080 84ea 	bcs.w	80071d2 <__ieee754_pow+0xa02>
 80067fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006802:	4630      	mov	r0, r6
 8006804:	4639      	mov	r1, r7
 8006806:	f7f9 fced 	bl	80001e4 <__adddf3>
 800680a:	ec41 0b10 	vmov	d0, r0, r1
 800680e:	b011      	add	sp, #68	@ 0x44
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	4a91      	ldr	r2, [pc, #580]	@ (8006a5c <__ieee754_pow+0x28c>)
 8006816:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800681a:	4590      	cmp	r8, r2
 800681c:	463d      	mov	r5, r7
 800681e:	4633      	mov	r3, r6
 8006820:	d806      	bhi.n	8006830 <__ieee754_pow+0x60>
 8006822:	d101      	bne.n	8006828 <__ieee754_pow+0x58>
 8006824:	2e00      	cmp	r6, #0
 8006826:	d1ea      	bne.n	80067fe <__ieee754_pow+0x2e>
 8006828:	4592      	cmp	sl, r2
 800682a:	d801      	bhi.n	8006830 <__ieee754_pow+0x60>
 800682c:	d10e      	bne.n	800684c <__ieee754_pow+0x7c>
 800682e:	b169      	cbz	r1, 800684c <__ieee754_pow+0x7c>
 8006830:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006834:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006838:	431d      	orrs	r5, r3
 800683a:	d1e0      	bne.n	80067fe <__ieee754_pow+0x2e>
 800683c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006840:	18db      	adds	r3, r3, r3
 8006842:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006846:	4152      	adcs	r2, r2
 8006848:	429d      	cmp	r5, r3
 800684a:	e7d4      	b.n	80067f6 <__ieee754_pow+0x26>
 800684c:	2d00      	cmp	r5, #0
 800684e:	46c3      	mov	fp, r8
 8006850:	da3a      	bge.n	80068c8 <__ieee754_pow+0xf8>
 8006852:	4a83      	ldr	r2, [pc, #524]	@ (8006a60 <__ieee754_pow+0x290>)
 8006854:	4592      	cmp	sl, r2
 8006856:	d84d      	bhi.n	80068f4 <__ieee754_pow+0x124>
 8006858:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800685c:	4592      	cmp	sl, r2
 800685e:	f240 84c7 	bls.w	80071f0 <__ieee754_pow+0xa20>
 8006862:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006866:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800686a:	2a14      	cmp	r2, #20
 800686c:	dd0f      	ble.n	800688e <__ieee754_pow+0xbe>
 800686e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006872:	fa21 f402 	lsr.w	r4, r1, r2
 8006876:	fa04 f202 	lsl.w	r2, r4, r2
 800687a:	428a      	cmp	r2, r1
 800687c:	f040 84b8 	bne.w	80071f0 <__ieee754_pow+0xa20>
 8006880:	f004 0401 	and.w	r4, r4, #1
 8006884:	f1c4 0402 	rsb	r4, r4, #2
 8006888:	2900      	cmp	r1, #0
 800688a:	d158      	bne.n	800693e <__ieee754_pow+0x16e>
 800688c:	e00e      	b.n	80068ac <__ieee754_pow+0xdc>
 800688e:	2900      	cmp	r1, #0
 8006890:	d154      	bne.n	800693c <__ieee754_pow+0x16c>
 8006892:	f1c2 0214 	rsb	r2, r2, #20
 8006896:	fa4a f402 	asr.w	r4, sl, r2
 800689a:	fa04 f202 	lsl.w	r2, r4, r2
 800689e:	4552      	cmp	r2, sl
 80068a0:	f040 84a3 	bne.w	80071ea <__ieee754_pow+0xa1a>
 80068a4:	f004 0401 	and.w	r4, r4, #1
 80068a8:	f1c4 0402 	rsb	r4, r4, #2
 80068ac:	4a6d      	ldr	r2, [pc, #436]	@ (8006a64 <__ieee754_pow+0x294>)
 80068ae:	4592      	cmp	sl, r2
 80068b0:	d12e      	bne.n	8006910 <__ieee754_pow+0x140>
 80068b2:	f1b9 0f00 	cmp.w	r9, #0
 80068b6:	f280 8494 	bge.w	80071e2 <__ieee754_pow+0xa12>
 80068ba:	496a      	ldr	r1, [pc, #424]	@ (8006a64 <__ieee754_pow+0x294>)
 80068bc:	4632      	mov	r2, r6
 80068be:	463b      	mov	r3, r7
 80068c0:	2000      	movs	r0, #0
 80068c2:	f7f9 ff6f 	bl	80007a4 <__aeabi_ddiv>
 80068c6:	e7a0      	b.n	800680a <__ieee754_pow+0x3a>
 80068c8:	2400      	movs	r4, #0
 80068ca:	bbc1      	cbnz	r1, 800693e <__ieee754_pow+0x16e>
 80068cc:	4a63      	ldr	r2, [pc, #396]	@ (8006a5c <__ieee754_pow+0x28c>)
 80068ce:	4592      	cmp	sl, r2
 80068d0:	d1ec      	bne.n	80068ac <__ieee754_pow+0xdc>
 80068d2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80068d6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80068da:	431a      	orrs	r2, r3
 80068dc:	f000 8479 	beq.w	80071d2 <__ieee754_pow+0xa02>
 80068e0:	4b61      	ldr	r3, [pc, #388]	@ (8006a68 <__ieee754_pow+0x298>)
 80068e2:	4598      	cmp	r8, r3
 80068e4:	d908      	bls.n	80068f8 <__ieee754_pow+0x128>
 80068e6:	f1b9 0f00 	cmp.w	r9, #0
 80068ea:	f2c0 8476 	blt.w	80071da <__ieee754_pow+0xa0a>
 80068ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f2:	e78a      	b.n	800680a <__ieee754_pow+0x3a>
 80068f4:	2402      	movs	r4, #2
 80068f6:	e7e8      	b.n	80068ca <__ieee754_pow+0xfa>
 80068f8:	f1b9 0f00 	cmp.w	r9, #0
 80068fc:	f04f 0000 	mov.w	r0, #0
 8006900:	f04f 0100 	mov.w	r1, #0
 8006904:	da81      	bge.n	800680a <__ieee754_pow+0x3a>
 8006906:	e9dd 0300 	ldrd	r0, r3, [sp]
 800690a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800690e:	e77c      	b.n	800680a <__ieee754_pow+0x3a>
 8006910:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006914:	d106      	bne.n	8006924 <__ieee754_pow+0x154>
 8006916:	4632      	mov	r2, r6
 8006918:	463b      	mov	r3, r7
 800691a:	4630      	mov	r0, r6
 800691c:	4639      	mov	r1, r7
 800691e:	f7f9 fe17 	bl	8000550 <__aeabi_dmul>
 8006922:	e772      	b.n	800680a <__ieee754_pow+0x3a>
 8006924:	4a51      	ldr	r2, [pc, #324]	@ (8006a6c <__ieee754_pow+0x29c>)
 8006926:	4591      	cmp	r9, r2
 8006928:	d109      	bne.n	800693e <__ieee754_pow+0x16e>
 800692a:	2d00      	cmp	r5, #0
 800692c:	db07      	blt.n	800693e <__ieee754_pow+0x16e>
 800692e:	ec47 6b10 	vmov	d0, r6, r7
 8006932:	b011      	add	sp, #68	@ 0x44
 8006934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	f000 bd52 	b.w	80073e0 <__ieee754_sqrt>
 800693c:	2400      	movs	r4, #0
 800693e:	ec47 6b10 	vmov	d0, r6, r7
 8006942:	9302      	str	r3, [sp, #8]
 8006944:	f000 fc88 	bl	8007258 <fabs>
 8006948:	9b02      	ldr	r3, [sp, #8]
 800694a:	ec51 0b10 	vmov	r0, r1, d0
 800694e:	bb53      	cbnz	r3, 80069a6 <__ieee754_pow+0x1d6>
 8006950:	4b44      	ldr	r3, [pc, #272]	@ (8006a64 <__ieee754_pow+0x294>)
 8006952:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006956:	429a      	cmp	r2, r3
 8006958:	d002      	beq.n	8006960 <__ieee754_pow+0x190>
 800695a:	f1b8 0f00 	cmp.w	r8, #0
 800695e:	d122      	bne.n	80069a6 <__ieee754_pow+0x1d6>
 8006960:	f1b9 0f00 	cmp.w	r9, #0
 8006964:	da05      	bge.n	8006972 <__ieee754_pow+0x1a2>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	2000      	movs	r0, #0
 800696c:	493d      	ldr	r1, [pc, #244]	@ (8006a64 <__ieee754_pow+0x294>)
 800696e:	f7f9 ff19 	bl	80007a4 <__aeabi_ddiv>
 8006972:	2d00      	cmp	r5, #0
 8006974:	f6bf af49 	bge.w	800680a <__ieee754_pow+0x3a>
 8006978:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800697c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006980:	ea58 0804 	orrs.w	r8, r8, r4
 8006984:	d108      	bne.n	8006998 <__ieee754_pow+0x1c8>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4610      	mov	r0, r2
 800698c:	4619      	mov	r1, r3
 800698e:	f7f9 fc27 	bl	80001e0 <__aeabi_dsub>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	e794      	b.n	80068c2 <__ieee754_pow+0xf2>
 8006998:	2c01      	cmp	r4, #1
 800699a:	f47f af36 	bne.w	800680a <__ieee754_pow+0x3a>
 800699e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069a2:	4619      	mov	r1, r3
 80069a4:	e731      	b.n	800680a <__ieee754_pow+0x3a>
 80069a6:	0feb      	lsrs	r3, r5, #31
 80069a8:	3b01      	subs	r3, #1
 80069aa:	ea53 0204 	orrs.w	r2, r3, r4
 80069ae:	d102      	bne.n	80069b6 <__ieee754_pow+0x1e6>
 80069b0:	4632      	mov	r2, r6
 80069b2:	463b      	mov	r3, r7
 80069b4:	e7e9      	b.n	800698a <__ieee754_pow+0x1ba>
 80069b6:	3c01      	subs	r4, #1
 80069b8:	431c      	orrs	r4, r3
 80069ba:	d016      	beq.n	80069ea <__ieee754_pow+0x21a>
 80069bc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006a48 <__ieee754_pow+0x278>
 80069c0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80069c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069c8:	f240 8112 	bls.w	8006bf0 <__ieee754_pow+0x420>
 80069cc:	4b28      	ldr	r3, [pc, #160]	@ (8006a70 <__ieee754_pow+0x2a0>)
 80069ce:	459a      	cmp	sl, r3
 80069d0:	4b25      	ldr	r3, [pc, #148]	@ (8006a68 <__ieee754_pow+0x298>)
 80069d2:	d916      	bls.n	8006a02 <__ieee754_pow+0x232>
 80069d4:	4598      	cmp	r8, r3
 80069d6:	d80b      	bhi.n	80069f0 <__ieee754_pow+0x220>
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	da0b      	bge.n	80069f6 <__ieee754_pow+0x226>
 80069de:	2000      	movs	r0, #0
 80069e0:	b011      	add	sp, #68	@ 0x44
 80069e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e6:	f000 bcf3 	b.w	80073d0 <__math_oflow>
 80069ea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006a50 <__ieee754_pow+0x280>
 80069ee:	e7e7      	b.n	80069c0 <__ieee754_pow+0x1f0>
 80069f0:	f1b9 0f00 	cmp.w	r9, #0
 80069f4:	dcf3      	bgt.n	80069de <__ieee754_pow+0x20e>
 80069f6:	2000      	movs	r0, #0
 80069f8:	b011      	add	sp, #68	@ 0x44
 80069fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fe:	f000 bcdf 	b.w	80073c0 <__math_uflow>
 8006a02:	4598      	cmp	r8, r3
 8006a04:	d20c      	bcs.n	8006a20 <__ieee754_pow+0x250>
 8006a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f7fa f811 	bl	8000a34 <__aeabi_dcmplt>
 8006a12:	3800      	subs	r0, #0
 8006a14:	bf18      	it	ne
 8006a16:	2001      	movne	r0, #1
 8006a18:	f1b9 0f00 	cmp.w	r9, #0
 8006a1c:	daec      	bge.n	80069f8 <__ieee754_pow+0x228>
 8006a1e:	e7df      	b.n	80069e0 <__ieee754_pow+0x210>
 8006a20:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <__ieee754_pow+0x294>)
 8006a22:	4598      	cmp	r8, r3
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	d924      	bls.n	8006a74 <__ieee754_pow+0x2a4>
 8006a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f7fa f800 	bl	8000a34 <__aeabi_dcmplt>
 8006a34:	3800      	subs	r0, #0
 8006a36:	bf18      	it	ne
 8006a38:	2001      	movne	r0, #1
 8006a3a:	f1b9 0f00 	cmp.w	r9, #0
 8006a3e:	dccf      	bgt.n	80069e0 <__ieee754_pow+0x210>
 8006a40:	e7da      	b.n	80069f8 <__ieee754_pow+0x228>
 8006a42:	bf00      	nop
 8006a44:	f3af 8000 	nop.w
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	3ff00000 	.word	0x3ff00000
 8006a50:	00000000 	.word	0x00000000
 8006a54:	bff00000 	.word	0xbff00000
 8006a58:	fff00000 	.word	0xfff00000
 8006a5c:	7ff00000 	.word	0x7ff00000
 8006a60:	433fffff 	.word	0x433fffff
 8006a64:	3ff00000 	.word	0x3ff00000
 8006a68:	3fefffff 	.word	0x3fefffff
 8006a6c:	3fe00000 	.word	0x3fe00000
 8006a70:	43f00000 	.word	0x43f00000
 8006a74:	4b5a      	ldr	r3, [pc, #360]	@ (8006be0 <__ieee754_pow+0x410>)
 8006a76:	f7f9 fbb3 	bl	80001e0 <__aeabi_dsub>
 8006a7a:	a351      	add	r3, pc, #324	@ (adr r3, 8006bc0 <__ieee754_pow+0x3f0>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	f7f9 fd64 	bl	8000550 <__aeabi_dmul>
 8006a88:	a34f      	add	r3, pc, #316	@ (adr r3, 8006bc8 <__ieee754_pow+0x3f8>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	4606      	mov	r6, r0
 8006a90:	460f      	mov	r7, r1
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7f9 fd5b 	bl	8000550 <__aeabi_dmul>
 8006a9a:	4b52      	ldr	r3, [pc, #328]	@ (8006be4 <__ieee754_pow+0x414>)
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	468b      	mov	fp, r1
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7f9 fd53 	bl	8000550 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	a148      	add	r1, pc, #288	@ (adr r1, 8006bd0 <__ieee754_pow+0x400>)
 8006ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab4:	f7f9 fb94 	bl	80001e0 <__aeabi_dsub>
 8006ab8:	4622      	mov	r2, r4
 8006aba:	462b      	mov	r3, r5
 8006abc:	f7f9 fd48 	bl	8000550 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	4948      	ldr	r1, [pc, #288]	@ (8006be8 <__ieee754_pow+0x418>)
 8006ac8:	f7f9 fb8a 	bl	80001e0 <__aeabi_dsub>
 8006acc:	4622      	mov	r2, r4
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7f9 fd3a 	bl	8000550 <__aeabi_dmul>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	f7f9 fd34 	bl	8000550 <__aeabi_dmul>
 8006ae8:	a33b      	add	r3, pc, #236	@ (adr r3, 8006bd8 <__ieee754_pow+0x408>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fd2f 	bl	8000550 <__aeabi_dmul>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4650      	mov	r0, sl
 8006af8:	4659      	mov	r1, fp
 8006afa:	f7f9 fb71 	bl	80001e0 <__aeabi_dsub>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4680      	mov	r8, r0
 8006b04:	4689      	mov	r9, r1
 8006b06:	4630      	mov	r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	f7f9 fb6b 	bl	80001e4 <__adddf3>
 8006b0e:	2400      	movs	r4, #0
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	4620      	mov	r0, r4
 8006b16:	460d      	mov	r5, r1
 8006b18:	f7f9 fb62 	bl	80001e0 <__aeabi_dsub>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7f9 fb5c 	bl	80001e0 <__aeabi_dsub>
 8006b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b30:	2300      	movs	r3, #0
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	4652      	mov	r2, sl
 8006b3e:	465b      	mov	r3, fp
 8006b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b44:	f7f9 fb4c 	bl	80001e0 <__aeabi_dsub>
 8006b48:	4622      	mov	r2, r4
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	f7f9 fd00 	bl	8000550 <__aeabi_dmul>
 8006b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b54:	4680      	mov	r8, r0
 8006b56:	4689      	mov	r9, r1
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 fcf8 	bl	8000550 <__aeabi_dmul>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 fb3c 	bl	80001e4 <__adddf3>
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	465b      	mov	r3, fp
 8006b70:	4606      	mov	r6, r0
 8006b72:	460f      	mov	r7, r1
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	f7f9 fcea 	bl	8000550 <__aeabi_dmul>
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4680      	mov	r8, r0
 8006b82:	4689      	mov	r9, r1
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 fb2c 	bl	80001e4 <__adddf3>
 8006b8c:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <__ieee754_pow+0x41c>)
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	4604      	mov	r4, r0
 8006b92:	460d      	mov	r5, r1
 8006b94:	468a      	mov	sl, r1
 8006b96:	468b      	mov	fp, r1
 8006b98:	f340 82ef 	ble.w	800717a <__ieee754_pow+0x9aa>
 8006b9c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006ba0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006ba4:	4303      	orrs	r3, r0
 8006ba6:	f000 81e8 	beq.w	8006f7a <__ieee754_pow+0x7aa>
 8006baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f7f9 ff3f 	bl	8000a34 <__aeabi_dcmplt>
 8006bb6:	3800      	subs	r0, #0
 8006bb8:	bf18      	it	ne
 8006bba:	2001      	movne	r0, #1
 8006bbc:	e710      	b.n	80069e0 <__ieee754_pow+0x210>
 8006bbe:	bf00      	nop
 8006bc0:	60000000 	.word	0x60000000
 8006bc4:	3ff71547 	.word	0x3ff71547
 8006bc8:	f85ddf44 	.word	0xf85ddf44
 8006bcc:	3e54ae0b 	.word	0x3e54ae0b
 8006bd0:	55555555 	.word	0x55555555
 8006bd4:	3fd55555 	.word	0x3fd55555
 8006bd8:	652b82fe 	.word	0x652b82fe
 8006bdc:	3ff71547 	.word	0x3ff71547
 8006be0:	3ff00000 	.word	0x3ff00000
 8006be4:	3fd00000 	.word	0x3fd00000
 8006be8:	3fe00000 	.word	0x3fe00000
 8006bec:	408fffff 	.word	0x408fffff
 8006bf0:	4bd5      	ldr	r3, [pc, #852]	@ (8006f48 <__ieee754_pow+0x778>)
 8006bf2:	402b      	ands	r3, r5
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	b92b      	cbnz	r3, 8006c04 <__ieee754_pow+0x434>
 8006bf8:	4bd4      	ldr	r3, [pc, #848]	@ (8006f4c <__ieee754_pow+0x77c>)
 8006bfa:	f7f9 fca9 	bl	8000550 <__aeabi_dmul>
 8006bfe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006c02:	468b      	mov	fp, r1
 8006c04:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006c08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006c0c:	4413      	add	r3, r2
 8006c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c10:	4bcf      	ldr	r3, [pc, #828]	@ (8006f50 <__ieee754_pow+0x780>)
 8006c12:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006c16:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006c1a:	459b      	cmp	fp, r3
 8006c1c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c20:	dd08      	ble.n	8006c34 <__ieee754_pow+0x464>
 8006c22:	4bcc      	ldr	r3, [pc, #816]	@ (8006f54 <__ieee754_pow+0x784>)
 8006c24:	459b      	cmp	fp, r3
 8006c26:	f340 81a5 	ble.w	8006f74 <__ieee754_pow+0x7a4>
 8006c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c30:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006c34:	f04f 0a00 	mov.w	sl, #0
 8006c38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c3e:	4bc6      	ldr	r3, [pc, #792]	@ (8006f58 <__ieee754_pow+0x788>)
 8006c40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c44:	ed93 7b00 	vldr	d7, [r3]
 8006c48:	4629      	mov	r1, r5
 8006c4a:	ec53 2b17 	vmov	r2, r3, d7
 8006c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006c52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c56:	f7f9 fac3 	bl	80001e0 <__aeabi_dsub>
 8006c5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c66:	f7f9 fabd 	bl	80001e4 <__adddf3>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	2000      	movs	r0, #0
 8006c70:	49ba      	ldr	r1, [pc, #744]	@ (8006f5c <__ieee754_pow+0x78c>)
 8006c72:	f7f9 fd97 	bl	80007a4 <__aeabi_ddiv>
 8006c76:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fc65 	bl	8000550 <__aeabi_dmul>
 8006c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006c8e:	106d      	asrs	r5, r5, #1
 8006c90:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006c94:	f04f 0b00 	mov.w	fp, #0
 8006c98:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006c9c:	4661      	mov	r1, ip
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	46e1      	mov	r9, ip
 8006ca8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006cac:	4614      	mov	r4, r2
 8006cae:	461d      	mov	r5, r3
 8006cb0:	f7f9 fc4e 	bl	8000550 <__aeabi_dmul>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4630      	mov	r0, r6
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f7f9 fa90 	bl	80001e0 <__aeabi_dsub>
 8006cc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7f9 fa88 	bl	80001e0 <__aeabi_dsub>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cd8:	f7f9 fa82 	bl	80001e0 <__aeabi_dsub>
 8006cdc:	465a      	mov	r2, fp
 8006cde:	464b      	mov	r3, r9
 8006ce0:	f7f9 fc36 	bl	8000550 <__aeabi_dmul>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fa78 	bl	80001e0 <__aeabi_dsub>
 8006cf0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006cf4:	f7f9 fc2c 	bl	8000550 <__aeabi_dmul>
 8006cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	f7f9 fc24 	bl	8000550 <__aeabi_dmul>
 8006d08:	a37d      	add	r3, pc, #500	@ (adr r3, 8006f00 <__ieee754_pow+0x730>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	f7f9 fc1d 	bl	8000550 <__aeabi_dmul>
 8006d16:	a37c      	add	r3, pc, #496	@ (adr r3, 8006f08 <__ieee754_pow+0x738>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 fa62 	bl	80001e4 <__adddf3>
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	f7f9 fc14 	bl	8000550 <__aeabi_dmul>
 8006d28:	a379      	add	r3, pc, #484	@ (adr r3, 8006f10 <__ieee754_pow+0x740>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fa59 	bl	80001e4 <__adddf3>
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	f7f9 fc0b 	bl	8000550 <__aeabi_dmul>
 8006d3a:	a377      	add	r3, pc, #476	@ (adr r3, 8006f18 <__ieee754_pow+0x748>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f7f9 fa50 	bl	80001e4 <__adddf3>
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	f7f9 fc02 	bl	8000550 <__aeabi_dmul>
 8006d4c:	a374      	add	r3, pc, #464	@ (adr r3, 8006f20 <__ieee754_pow+0x750>)
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f7f9 fa47 	bl	80001e4 <__adddf3>
 8006d56:	4622      	mov	r2, r4
 8006d58:	462b      	mov	r3, r5
 8006d5a:	f7f9 fbf9 	bl	8000550 <__aeabi_dmul>
 8006d5e:	a372      	add	r3, pc, #456	@ (adr r3, 8006f28 <__ieee754_pow+0x758>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f7f9 fa3e 	bl	80001e4 <__adddf3>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	462b      	mov	r3, r5
 8006d70:	4620      	mov	r0, r4
 8006d72:	4629      	mov	r1, r5
 8006d74:	f7f9 fbec 	bl	8000550 <__aeabi_dmul>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	4639      	mov	r1, r7
 8006d80:	f7f9 fbe6 	bl	8000550 <__aeabi_dmul>
 8006d84:	465a      	mov	r2, fp
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d90:	f7f9 fa28 	bl	80001e4 <__adddf3>
 8006d94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d98:	f7f9 fbda 	bl	8000550 <__aeabi_dmul>
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	462b      	mov	r3, r5
 8006da0:	f7f9 fa20 	bl	80001e4 <__adddf3>
 8006da4:	465a      	mov	r2, fp
 8006da6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006daa:	464b      	mov	r3, r9
 8006dac:	4658      	mov	r0, fp
 8006dae:	4649      	mov	r1, r9
 8006db0:	f7f9 fbce 	bl	8000550 <__aeabi_dmul>
 8006db4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f60 <__ieee754_pow+0x790>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	4606      	mov	r6, r0
 8006dba:	460f      	mov	r7, r1
 8006dbc:	f7f9 fa12 	bl	80001e4 <__adddf3>
 8006dc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006dc4:	f7f9 fa0e 	bl	80001e4 <__adddf3>
 8006dc8:	46d8      	mov	r8, fp
 8006dca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006dce:	460d      	mov	r5, r1
 8006dd0:	465a      	mov	r2, fp
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006ddc:	f7f9 fbb8 	bl	8000550 <__aeabi_dmul>
 8006de0:	465c      	mov	r4, fp
 8006de2:	4680      	mov	r8, r0
 8006de4:	4689      	mov	r9, r1
 8006de6:	4b5e      	ldr	r3, [pc, #376]	@ (8006f60 <__ieee754_pow+0x790>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	4620      	mov	r0, r4
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7f9 f9f7 	bl	80001e0 <__aeabi_dsub>
 8006df2:	4632      	mov	r2, r6
 8006df4:	463b      	mov	r3, r7
 8006df6:	f7f9 f9f3 	bl	80001e0 <__aeabi_dsub>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e02:	f7f9 f9ed 	bl	80001e0 <__aeabi_dsub>
 8006e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e0a:	f7f9 fba1 	bl	8000550 <__aeabi_dmul>
 8006e0e:	4622      	mov	r2, r4
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	462b      	mov	r3, r5
 8006e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e1a:	f7f9 fb99 	bl	8000550 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 f9dd 	bl	80001e4 <__adddf3>
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4640      	mov	r0, r8
 8006e34:	4649      	mov	r1, r9
 8006e36:	f7f9 f9d5 	bl	80001e4 <__adddf3>
 8006e3a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006e3e:	a33c      	add	r3, pc, #240	@ (adr r3, 8006f30 <__ieee754_pow+0x760>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	4658      	mov	r0, fp
 8006e46:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	f7f9 fb80 	bl	8000550 <__aeabi_dmul>
 8006e50:	465c      	mov	r4, fp
 8006e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e56:	4642      	mov	r2, r8
 8006e58:	464b      	mov	r3, r9
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	f7f9 f9bf 	bl	80001e0 <__aeabi_dsub>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4630      	mov	r0, r6
 8006e68:	4639      	mov	r1, r7
 8006e6a:	f7f9 f9b9 	bl	80001e0 <__aeabi_dsub>
 8006e6e:	a332      	add	r3, pc, #200	@ (adr r3, 8006f38 <__ieee754_pow+0x768>)
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 fb6c 	bl	8000550 <__aeabi_dmul>
 8006e78:	a331      	add	r3, pc, #196	@ (adr r3, 8006f40 <__ieee754_pow+0x770>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460f      	mov	r7, r1
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 fb63 	bl	8000550 <__aeabi_dmul>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	f7f9 f9a7 	bl	80001e4 <__adddf3>
 8006e96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e98:	4b32      	ldr	r3, [pc, #200]	@ (8006f64 <__ieee754_pow+0x794>)
 8006e9a:	4413      	add	r3, r2
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f7f9 f9a0 	bl	80001e4 <__adddf3>
 8006ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ea8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006eaa:	f7f9 fae7 	bl	800047c <__aeabi_i2d>
 8006eae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f68 <__ieee754_pow+0x798>)
 8006eb2:	4413      	add	r3, r2
 8006eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb8:	4606      	mov	r6, r0
 8006eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec4:	f7f9 f98e 	bl	80001e4 <__adddf3>
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	f7f9 f98a 	bl	80001e4 <__adddf3>
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	f7f9 f986 	bl	80001e4 <__adddf3>
 8006ed8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	4658      	mov	r0, fp
 8006ee2:	460d      	mov	r5, r1
 8006ee4:	f7f9 f97c 	bl	80001e0 <__aeabi_dsub>
 8006ee8:	4642      	mov	r2, r8
 8006eea:	464b      	mov	r3, r9
 8006eec:	f7f9 f978 	bl	80001e0 <__aeabi_dsub>
 8006ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ef4:	f7f9 f974 	bl	80001e0 <__aeabi_dsub>
 8006ef8:	465c      	mov	r4, fp
 8006efa:	4602      	mov	r2, r0
 8006efc:	e036      	b.n	8006f6c <__ieee754_pow+0x79c>
 8006efe:	bf00      	nop
 8006f00:	4a454eef 	.word	0x4a454eef
 8006f04:	3fca7e28 	.word	0x3fca7e28
 8006f08:	93c9db65 	.word	0x93c9db65
 8006f0c:	3fcd864a 	.word	0x3fcd864a
 8006f10:	a91d4101 	.word	0xa91d4101
 8006f14:	3fd17460 	.word	0x3fd17460
 8006f18:	518f264d 	.word	0x518f264d
 8006f1c:	3fd55555 	.word	0x3fd55555
 8006f20:	db6fabff 	.word	0xdb6fabff
 8006f24:	3fdb6db6 	.word	0x3fdb6db6
 8006f28:	33333303 	.word	0x33333303
 8006f2c:	3fe33333 	.word	0x3fe33333
 8006f30:	e0000000 	.word	0xe0000000
 8006f34:	3feec709 	.word	0x3feec709
 8006f38:	dc3a03fd 	.word	0xdc3a03fd
 8006f3c:	3feec709 	.word	0x3feec709
 8006f40:	145b01f5 	.word	0x145b01f5
 8006f44:	be3e2fe0 	.word	0xbe3e2fe0
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	43400000 	.word	0x43400000
 8006f50:	0003988e 	.word	0x0003988e
 8006f54:	000bb679 	.word	0x000bb679
 8006f58:	080085f0 	.word	0x080085f0
 8006f5c:	3ff00000 	.word	0x3ff00000
 8006f60:	40080000 	.word	0x40080000
 8006f64:	080085d0 	.word	0x080085d0
 8006f68:	080085e0 	.word	0x080085e0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f72:	e5d7      	b.n	8006b24 <__ieee754_pow+0x354>
 8006f74:	f04f 0a01 	mov.w	sl, #1
 8006f78:	e65e      	b.n	8006c38 <__ieee754_pow+0x468>
 8006f7a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800724c <__ieee754_pow+0xa7c>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	f7f9 f92e 	bl	80001e4 <__adddf3>
 8006f88:	4642      	mov	r2, r8
 8006f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f8e:	464b      	mov	r3, r9
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 f924 	bl	80001e0 <__aeabi_dsub>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fa0:	f7f9 fd66 	bl	8000a70 <__aeabi_dcmpgt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f47f ae00 	bne.w	8006baa <__ieee754_pow+0x3da>
 8006faa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006fae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006fb2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006fb6:	fa43 fa0a 	asr.w	sl, r3, sl
 8006fba:	44da      	add	sl, fp
 8006fbc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006fc0:	489d      	ldr	r0, [pc, #628]	@ (8007238 <__ieee754_pow+0xa68>)
 8006fc2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006fc6:	4108      	asrs	r0, r1
 8006fc8:	ea00 030a 	and.w	r3, r0, sl
 8006fcc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006fd0:	f1c1 0114 	rsb	r1, r1, #20
 8006fd4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006fd8:	fa4a fa01 	asr.w	sl, sl, r1
 8006fdc:	f1bb 0f00 	cmp.w	fp, #0
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	bfb8      	it	lt
 8006fea:	f1ca 0a00 	rsblt	sl, sl, #0
 8006fee:	f7f9 f8f7 	bl	80001e0 <__aeabi_dsub>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	4689      	mov	r9, r1
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	f7f9 f8f1 	bl	80001e4 <__adddf3>
 8007002:	2400      	movs	r4, #0
 8007004:	a37c      	add	r3, pc, #496	@ (adr r3, 80071f8 <__ieee754_pow+0xa28>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	4620      	mov	r0, r4
 800700c:	460d      	mov	r5, r1
 800700e:	f7f9 fa9f 	bl	8000550 <__aeabi_dmul>
 8007012:	4642      	mov	r2, r8
 8007014:	e9cd 0100 	strd	r0, r1, [sp]
 8007018:	464b      	mov	r3, r9
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 f8df 	bl	80001e0 <__aeabi_dsub>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 f8d9 	bl	80001e0 <__aeabi_dsub>
 800702e:	a374      	add	r3, pc, #464	@ (adr r3, 8007200 <__ieee754_pow+0xa30>)
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	f7f9 fa8c 	bl	8000550 <__aeabi_dmul>
 8007038:	a373      	add	r3, pc, #460	@ (adr r3, 8007208 <__ieee754_pow+0xa38>)
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	4680      	mov	r8, r0
 8007040:	4689      	mov	r9, r1
 8007042:	4620      	mov	r0, r4
 8007044:	4629      	mov	r1, r5
 8007046:	f7f9 fa83 	bl	8000550 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4640      	mov	r0, r8
 8007050:	4649      	mov	r1, r9
 8007052:	f7f9 f8c7 	bl	80001e4 <__adddf3>
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007062:	f7f9 f8bf 	bl	80001e4 <__adddf3>
 8007066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800706a:	4680      	mov	r8, r0
 800706c:	4689      	mov	r9, r1
 800706e:	f7f9 f8b7 	bl	80001e0 <__aeabi_dsub>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4620      	mov	r0, r4
 8007078:	4629      	mov	r1, r5
 800707a:	f7f9 f8b1 	bl	80001e0 <__aeabi_dsub>
 800707e:	4642      	mov	r2, r8
 8007080:	4606      	mov	r6, r0
 8007082:	460f      	mov	r7, r1
 8007084:	464b      	mov	r3, r9
 8007086:	4640      	mov	r0, r8
 8007088:	4649      	mov	r1, r9
 800708a:	f7f9 fa61 	bl	8000550 <__aeabi_dmul>
 800708e:	a360      	add	r3, pc, #384	@ (adr r3, 8007210 <__ieee754_pow+0xa40>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	4604      	mov	r4, r0
 8007096:	460d      	mov	r5, r1
 8007098:	f7f9 fa5a 	bl	8000550 <__aeabi_dmul>
 800709c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007218 <__ieee754_pow+0xa48>)
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 f89d 	bl	80001e0 <__aeabi_dsub>
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	f7f9 fa51 	bl	8000550 <__aeabi_dmul>
 80070ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8007220 <__ieee754_pow+0xa50>)
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	f7f9 f896 	bl	80001e4 <__adddf3>
 80070b8:	4622      	mov	r2, r4
 80070ba:	462b      	mov	r3, r5
 80070bc:	f7f9 fa48 	bl	8000550 <__aeabi_dmul>
 80070c0:	a359      	add	r3, pc, #356	@ (adr r3, 8007228 <__ieee754_pow+0xa58>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 f88b 	bl	80001e0 <__aeabi_dsub>
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	f7f9 fa3f 	bl	8000550 <__aeabi_dmul>
 80070d2:	a357      	add	r3, pc, #348	@ (adr r3, 8007230 <__ieee754_pow+0xa60>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f7f9 f884 	bl	80001e4 <__adddf3>
 80070dc:	4622      	mov	r2, r4
 80070de:	462b      	mov	r3, r5
 80070e0:	f7f9 fa36 	bl	8000550 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4640      	mov	r0, r8
 80070ea:	4649      	mov	r1, r9
 80070ec:	f7f9 f878 	bl	80001e0 <__aeabi_dsub>
 80070f0:	4604      	mov	r4, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4640      	mov	r0, r8
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fa28 	bl	8000550 <__aeabi_dmul>
 8007100:	2200      	movs	r2, #0
 8007102:	e9cd 0100 	strd	r0, r1, [sp]
 8007106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800710a:	4620      	mov	r0, r4
 800710c:	4629      	mov	r1, r5
 800710e:	f7f9 f867 	bl	80001e0 <__aeabi_dsub>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	e9dd 0100 	ldrd	r0, r1, [sp]
 800711a:	f7f9 fb43 	bl	80007a4 <__aeabi_ddiv>
 800711e:	4632      	mov	r2, r6
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	463b      	mov	r3, r7
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 fa11 	bl	8000550 <__aeabi_dmul>
 800712e:	4632      	mov	r2, r6
 8007130:	463b      	mov	r3, r7
 8007132:	f7f9 f857 	bl	80001e4 <__adddf3>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4620      	mov	r0, r4
 800713c:	4629      	mov	r1, r5
 800713e:	f7f9 f84f 	bl	80001e0 <__aeabi_dsub>
 8007142:	4642      	mov	r2, r8
 8007144:	464b      	mov	r3, r9
 8007146:	f7f9 f84b 	bl	80001e0 <__aeabi_dsub>
 800714a:	460b      	mov	r3, r1
 800714c:	4602      	mov	r2, r0
 800714e:	493b      	ldr	r1, [pc, #236]	@ (800723c <__ieee754_pow+0xa6c>)
 8007150:	2000      	movs	r0, #0
 8007152:	f7f9 f845 	bl	80001e0 <__aeabi_dsub>
 8007156:	ec41 0b10 	vmov	d0, r0, r1
 800715a:	ee10 3a90 	vmov	r3, s1
 800715e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007166:	da30      	bge.n	80071ca <__ieee754_pow+0x9fa>
 8007168:	4650      	mov	r0, sl
 800716a:	f000 f87d 	bl	8007268 <scalbn>
 800716e:	ec51 0b10 	vmov	r0, r1, d0
 8007172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007176:	f7ff bbd2 	b.w	800691e <__ieee754_pow+0x14e>
 800717a:	4c31      	ldr	r4, [pc, #196]	@ (8007240 <__ieee754_pow+0xa70>)
 800717c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007180:	42a3      	cmp	r3, r4
 8007182:	d91a      	bls.n	80071ba <__ieee754_pow+0x9ea>
 8007184:	4b2f      	ldr	r3, [pc, #188]	@ (8007244 <__ieee754_pow+0xa74>)
 8007186:	440b      	add	r3, r1
 8007188:	4303      	orrs	r3, r0
 800718a:	d009      	beq.n	80071a0 <__ieee754_pow+0x9d0>
 800718c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007190:	2200      	movs	r2, #0
 8007192:	2300      	movs	r3, #0
 8007194:	f7f9 fc4e 	bl	8000a34 <__aeabi_dcmplt>
 8007198:	3800      	subs	r0, #0
 800719a:	bf18      	it	ne
 800719c:	2001      	movne	r0, #1
 800719e:	e42b      	b.n	80069f8 <__ieee754_pow+0x228>
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	f7f9 f81c 	bl	80001e0 <__aeabi_dsub>
 80071a8:	4632      	mov	r2, r6
 80071aa:	463b      	mov	r3, r7
 80071ac:	f7f9 fc56 	bl	8000a5c <__aeabi_dcmpge>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1eb      	bne.n	800718c <__ieee754_pow+0x9bc>
 80071b4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8007254 <__ieee754_pow+0xa84>
 80071b8:	e6f7      	b.n	8006faa <__ieee754_pow+0x7da>
 80071ba:	469a      	mov	sl, r3
 80071bc:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <__ieee754_pow+0xa78>)
 80071be:	459a      	cmp	sl, r3
 80071c0:	f63f aef3 	bhi.w	8006faa <__ieee754_pow+0x7da>
 80071c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80071c8:	e715      	b.n	8006ff6 <__ieee754_pow+0x826>
 80071ca:	ec51 0b10 	vmov	r0, r1, d0
 80071ce:	4619      	mov	r1, r3
 80071d0:	e7cf      	b.n	8007172 <__ieee754_pow+0x9a2>
 80071d2:	491a      	ldr	r1, [pc, #104]	@ (800723c <__ieee754_pow+0xa6c>)
 80071d4:	2000      	movs	r0, #0
 80071d6:	f7ff bb18 	b.w	800680a <__ieee754_pow+0x3a>
 80071da:	2000      	movs	r0, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	f7ff bb14 	b.w	800680a <__ieee754_pow+0x3a>
 80071e2:	4630      	mov	r0, r6
 80071e4:	4639      	mov	r1, r7
 80071e6:	f7ff bb10 	b.w	800680a <__ieee754_pow+0x3a>
 80071ea:	460c      	mov	r4, r1
 80071ec:	f7ff bb5e 	b.w	80068ac <__ieee754_pow+0xdc>
 80071f0:	2400      	movs	r4, #0
 80071f2:	f7ff bb49 	b.w	8006888 <__ieee754_pow+0xb8>
 80071f6:	bf00      	nop
 80071f8:	00000000 	.word	0x00000000
 80071fc:	3fe62e43 	.word	0x3fe62e43
 8007200:	fefa39ef 	.word	0xfefa39ef
 8007204:	3fe62e42 	.word	0x3fe62e42
 8007208:	0ca86c39 	.word	0x0ca86c39
 800720c:	be205c61 	.word	0xbe205c61
 8007210:	72bea4d0 	.word	0x72bea4d0
 8007214:	3e663769 	.word	0x3e663769
 8007218:	c5d26bf1 	.word	0xc5d26bf1
 800721c:	3ebbbd41 	.word	0x3ebbbd41
 8007220:	af25de2c 	.word	0xaf25de2c
 8007224:	3f11566a 	.word	0x3f11566a
 8007228:	16bebd93 	.word	0x16bebd93
 800722c:	3f66c16c 	.word	0x3f66c16c
 8007230:	5555553e 	.word	0x5555553e
 8007234:	3fc55555 	.word	0x3fc55555
 8007238:	fff00000 	.word	0xfff00000
 800723c:	3ff00000 	.word	0x3ff00000
 8007240:	4090cbff 	.word	0x4090cbff
 8007244:	3f6f3400 	.word	0x3f6f3400
 8007248:	3fe00000 	.word	0x3fe00000
 800724c:	652b82fe 	.word	0x652b82fe
 8007250:	3c971547 	.word	0x3c971547
 8007254:	4090cc00 	.word	0x4090cc00

08007258 <fabs>:
 8007258:	ec51 0b10 	vmov	r0, r1, d0
 800725c:	4602      	mov	r2, r0
 800725e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007262:	ec43 2b10 	vmov	d0, r2, r3
 8007266:	4770      	bx	lr

08007268 <scalbn>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	ec55 4b10 	vmov	r4, r5, d0
 800726e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007272:	4606      	mov	r6, r0
 8007274:	462b      	mov	r3, r5
 8007276:	b991      	cbnz	r1, 800729e <scalbn+0x36>
 8007278:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800727c:	4323      	orrs	r3, r4
 800727e:	d03d      	beq.n	80072fc <scalbn+0x94>
 8007280:	4b35      	ldr	r3, [pc, #212]	@ (8007358 <scalbn+0xf0>)
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	2200      	movs	r2, #0
 8007288:	f7f9 f962 	bl	8000550 <__aeabi_dmul>
 800728c:	4b33      	ldr	r3, [pc, #204]	@ (800735c <scalbn+0xf4>)
 800728e:	429e      	cmp	r6, r3
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	da0f      	bge.n	80072b6 <scalbn+0x4e>
 8007296:	a328      	add	r3, pc, #160	@ (adr r3, 8007338 <scalbn+0xd0>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	e01e      	b.n	80072dc <scalbn+0x74>
 800729e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80072a2:	4291      	cmp	r1, r2
 80072a4:	d10b      	bne.n	80072be <scalbn+0x56>
 80072a6:	4622      	mov	r2, r4
 80072a8:	4620      	mov	r0, r4
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7f8 ff9a 	bl	80001e4 <__adddf3>
 80072b0:	4604      	mov	r4, r0
 80072b2:	460d      	mov	r5, r1
 80072b4:	e022      	b.n	80072fc <scalbn+0x94>
 80072b6:	460b      	mov	r3, r1
 80072b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80072bc:	3936      	subs	r1, #54	@ 0x36
 80072be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80072c2:	4296      	cmp	r6, r2
 80072c4:	dd0d      	ble.n	80072e2 <scalbn+0x7a>
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007340 <scalbn+0xd8>)
 80072ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ce:	da02      	bge.n	80072d6 <scalbn+0x6e>
 80072d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007348 <scalbn+0xe0>)
 80072d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007340 <scalbn+0xd8>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f9 f938 	bl	8000550 <__aeabi_dmul>
 80072e0:	e7e6      	b.n	80072b0 <scalbn+0x48>
 80072e2:	1872      	adds	r2, r6, r1
 80072e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80072e8:	428a      	cmp	r2, r1
 80072ea:	dcec      	bgt.n	80072c6 <scalbn+0x5e>
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	dd08      	ble.n	8007302 <scalbn+0x9a>
 80072f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80072f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80072f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072fc:	ec45 4b10 	vmov	d0, r4, r5
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007306:	da08      	bge.n	800731a <scalbn+0xb2>
 8007308:	2d00      	cmp	r5, #0
 800730a:	a10b      	add	r1, pc, #44	@ (adr r1, 8007338 <scalbn+0xd0>)
 800730c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007310:	dac1      	bge.n	8007296 <scalbn+0x2e>
 8007312:	a10f      	add	r1, pc, #60	@ (adr r1, 8007350 <scalbn+0xe8>)
 8007314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007318:	e7bd      	b.n	8007296 <scalbn+0x2e>
 800731a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800731e:	3236      	adds	r2, #54	@ 0x36
 8007320:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007324:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007328:	4620      	mov	r0, r4
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <scalbn+0xf8>)
 800732c:	4629      	mov	r1, r5
 800732e:	2200      	movs	r2, #0
 8007330:	e7d4      	b.n	80072dc <scalbn+0x74>
 8007332:	bf00      	nop
 8007334:	f3af 8000 	nop.w
 8007338:	c2f8f359 	.word	0xc2f8f359
 800733c:	01a56e1f 	.word	0x01a56e1f
 8007340:	8800759c 	.word	0x8800759c
 8007344:	7e37e43c 	.word	0x7e37e43c
 8007348:	8800759c 	.word	0x8800759c
 800734c:	fe37e43c 	.word	0xfe37e43c
 8007350:	c2f8f359 	.word	0xc2f8f359
 8007354:	81a56e1f 	.word	0x81a56e1f
 8007358:	43500000 	.word	0x43500000
 800735c:	ffff3cb0 	.word	0xffff3cb0
 8007360:	3c900000 	.word	0x3c900000

08007364 <with_errno>:
 8007364:	b510      	push	{r4, lr}
 8007366:	ed2d 8b02 	vpush	{d8}
 800736a:	eeb0 8a40 	vmov.f32	s16, s0
 800736e:	eef0 8a60 	vmov.f32	s17, s1
 8007372:	4604      	mov	r4, r0
 8007374:	f7ff f93e 	bl	80065f4 <__errno>
 8007378:	eeb0 0a48 	vmov.f32	s0, s16
 800737c:	eef0 0a68 	vmov.f32	s1, s17
 8007380:	ecbd 8b02 	vpop	{d8}
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	bd10      	pop	{r4, pc}

08007388 <xflow>:
 8007388:	4603      	mov	r3, r0
 800738a:	b507      	push	{r0, r1, r2, lr}
 800738c:	ec51 0b10 	vmov	r0, r1, d0
 8007390:	b183      	cbz	r3, 80073b4 <xflow+0x2c>
 8007392:	4602      	mov	r2, r0
 8007394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007398:	e9cd 2300 	strd	r2, r3, [sp]
 800739c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073a0:	f7f9 f8d6 	bl	8000550 <__aeabi_dmul>
 80073a4:	ec41 0b10 	vmov	d0, r0, r1
 80073a8:	2022      	movs	r0, #34	@ 0x22
 80073aa:	b003      	add	sp, #12
 80073ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b0:	f7ff bfd8 	b.w	8007364 <with_errno>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	e7ee      	b.n	8007398 <xflow+0x10>
 80073ba:	0000      	movs	r0, r0
 80073bc:	0000      	movs	r0, r0
	...

080073c0 <__math_uflow>:
 80073c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80073c8 <__math_uflow+0x8>
 80073c4:	f7ff bfe0 	b.w	8007388 <xflow>
 80073c8:	00000000 	.word	0x00000000
 80073cc:	10000000 	.word	0x10000000

080073d0 <__math_oflow>:
 80073d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80073d8 <__math_oflow+0x8>
 80073d4:	f7ff bfd8 	b.w	8007388 <xflow>
 80073d8:	00000000 	.word	0x00000000
 80073dc:	70000000 	.word	0x70000000

080073e0 <__ieee754_sqrt>:
 80073e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	4a68      	ldr	r2, [pc, #416]	@ (8007588 <__ieee754_sqrt+0x1a8>)
 80073e6:	ec55 4b10 	vmov	r4, r5, d0
 80073ea:	43aa      	bics	r2, r5
 80073ec:	462b      	mov	r3, r5
 80073ee:	4621      	mov	r1, r4
 80073f0:	d110      	bne.n	8007414 <__ieee754_sqrt+0x34>
 80073f2:	4622      	mov	r2, r4
 80073f4:	4620      	mov	r0, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7f9 f8aa 	bl	8000550 <__aeabi_dmul>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4620      	mov	r0, r4
 8007402:	4629      	mov	r1, r5
 8007404:	f7f8 feee 	bl	80001e4 <__adddf3>
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	ec45 4b10 	vmov	d0, r4, r5
 8007410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	2d00      	cmp	r5, #0
 8007416:	dc0e      	bgt.n	8007436 <__ieee754_sqrt+0x56>
 8007418:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800741c:	4322      	orrs	r2, r4
 800741e:	d0f5      	beq.n	800740c <__ieee754_sqrt+0x2c>
 8007420:	b19d      	cbz	r5, 800744a <__ieee754_sqrt+0x6a>
 8007422:	4622      	mov	r2, r4
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f8 feda 	bl	80001e0 <__aeabi_dsub>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	f7f9 f9b8 	bl	80007a4 <__aeabi_ddiv>
 8007434:	e7e8      	b.n	8007408 <__ieee754_sqrt+0x28>
 8007436:	152a      	asrs	r2, r5, #20
 8007438:	d115      	bne.n	8007466 <__ieee754_sqrt+0x86>
 800743a:	2000      	movs	r0, #0
 800743c:	e009      	b.n	8007452 <__ieee754_sqrt+0x72>
 800743e:	0acb      	lsrs	r3, r1, #11
 8007440:	3a15      	subs	r2, #21
 8007442:	0549      	lsls	r1, r1, #21
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0fa      	beq.n	800743e <__ieee754_sqrt+0x5e>
 8007448:	e7f7      	b.n	800743a <__ieee754_sqrt+0x5a>
 800744a:	462a      	mov	r2, r5
 800744c:	e7fa      	b.n	8007444 <__ieee754_sqrt+0x64>
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	3001      	adds	r0, #1
 8007452:	02dc      	lsls	r4, r3, #11
 8007454:	d5fb      	bpl.n	800744e <__ieee754_sqrt+0x6e>
 8007456:	1e44      	subs	r4, r0, #1
 8007458:	1b12      	subs	r2, r2, r4
 800745a:	f1c0 0420 	rsb	r4, r0, #32
 800745e:	fa21 f404 	lsr.w	r4, r1, r4
 8007462:	4323      	orrs	r3, r4
 8007464:	4081      	lsls	r1, r0
 8007466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800746a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800746e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007472:	07d2      	lsls	r2, r2, #31
 8007474:	bf5c      	itt	pl
 8007476:	005b      	lslpl	r3, r3, #1
 8007478:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800747c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007480:	bf58      	it	pl
 8007482:	0049      	lslpl	r1, r1, #1
 8007484:	2600      	movs	r6, #0
 8007486:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800748a:	106d      	asrs	r5, r5, #1
 800748c:	0049      	lsls	r1, r1, #1
 800748e:	2016      	movs	r0, #22
 8007490:	4632      	mov	r2, r6
 8007492:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007496:	1917      	adds	r7, r2, r4
 8007498:	429f      	cmp	r7, r3
 800749a:	bfde      	ittt	le
 800749c:	193a      	addle	r2, r7, r4
 800749e:	1bdb      	suble	r3, r3, r7
 80074a0:	1936      	addle	r6, r6, r4
 80074a2:	0fcf      	lsrs	r7, r1, #31
 80074a4:	3801      	subs	r0, #1
 80074a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80074aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80074ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80074b2:	d1f0      	bne.n	8007496 <__ieee754_sqrt+0xb6>
 80074b4:	4604      	mov	r4, r0
 80074b6:	2720      	movs	r7, #32
 80074b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80074bc:	429a      	cmp	r2, r3
 80074be:	eb00 0e0c 	add.w	lr, r0, ip
 80074c2:	db02      	blt.n	80074ca <__ieee754_sqrt+0xea>
 80074c4:	d113      	bne.n	80074ee <__ieee754_sqrt+0x10e>
 80074c6:	458e      	cmp	lr, r1
 80074c8:	d811      	bhi.n	80074ee <__ieee754_sqrt+0x10e>
 80074ca:	f1be 0f00 	cmp.w	lr, #0
 80074ce:	eb0e 000c 	add.w	r0, lr, ip
 80074d2:	da42      	bge.n	800755a <__ieee754_sqrt+0x17a>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	db40      	blt.n	800755a <__ieee754_sqrt+0x17a>
 80074d8:	f102 0801 	add.w	r8, r2, #1
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	458e      	cmp	lr, r1
 80074e0:	bf88      	it	hi
 80074e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80074e6:	eba1 010e 	sub.w	r1, r1, lr
 80074ea:	4464      	add	r4, ip
 80074ec:	4642      	mov	r2, r8
 80074ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80074f2:	3f01      	subs	r7, #1
 80074f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80074f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80074fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007500:	d1dc      	bne.n	80074bc <__ieee754_sqrt+0xdc>
 8007502:	4319      	orrs	r1, r3
 8007504:	d01b      	beq.n	800753e <__ieee754_sqrt+0x15e>
 8007506:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800758c <__ieee754_sqrt+0x1ac>
 800750a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007590 <__ieee754_sqrt+0x1b0>
 800750e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007512:	e9db 2300 	ldrd	r2, r3, [fp]
 8007516:	f7f8 fe63 	bl	80001e0 <__aeabi_dsub>
 800751a:	e9da 8900 	ldrd	r8, r9, [sl]
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f9 fa8f 	bl	8000a48 <__aeabi_dcmple>
 800752a:	b140      	cbz	r0, 800753e <__ieee754_sqrt+0x15e>
 800752c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007530:	e9da 0100 	ldrd	r0, r1, [sl]
 8007534:	e9db 2300 	ldrd	r2, r3, [fp]
 8007538:	d111      	bne.n	800755e <__ieee754_sqrt+0x17e>
 800753a:	3601      	adds	r6, #1
 800753c:	463c      	mov	r4, r7
 800753e:	1072      	asrs	r2, r6, #1
 8007540:	0863      	lsrs	r3, r4, #1
 8007542:	07f1      	lsls	r1, r6, #31
 8007544:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007548:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800754c:	bf48      	it	mi
 800754e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007552:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007556:	4618      	mov	r0, r3
 8007558:	e756      	b.n	8007408 <__ieee754_sqrt+0x28>
 800755a:	4690      	mov	r8, r2
 800755c:	e7be      	b.n	80074dc <__ieee754_sqrt+0xfc>
 800755e:	f7f8 fe41 	bl	80001e4 <__adddf3>
 8007562:	e9da 8900 	ldrd	r8, r9, [sl]
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 fa61 	bl	8000a34 <__aeabi_dcmplt>
 8007572:	b120      	cbz	r0, 800757e <__ieee754_sqrt+0x19e>
 8007574:	1ca0      	adds	r0, r4, #2
 8007576:	bf08      	it	eq
 8007578:	3601      	addeq	r6, #1
 800757a:	3402      	adds	r4, #2
 800757c:	e7df      	b.n	800753e <__ieee754_sqrt+0x15e>
 800757e:	1c63      	adds	r3, r4, #1
 8007580:	f023 0401 	bic.w	r4, r3, #1
 8007584:	e7db      	b.n	800753e <__ieee754_sqrt+0x15e>
 8007586:	bf00      	nop
 8007588:	7ff00000 	.word	0x7ff00000
 800758c:	20000068 	.word	0x20000068
 8007590:	20000060 	.word	0x20000060

08007594 <_init>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr

080075a0 <_fini>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr
